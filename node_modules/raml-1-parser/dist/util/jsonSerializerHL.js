"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/// <reference path="../../typings/main.d.ts" />
var core = require("../parser/wrapped-ast/parserCore");
var proxy = require("../parser/ast.core/LowLevelASTProxy");
var def = require("raml-definition-system");
var hlImpl = require("../parser/highLevelImpl");
var builder = require("../parser/ast.core/builder");
var referencePatcher = require("../parser/ast.core/referencePatcher");
var typeSystem = def.rt;
var typeExpressions = typeSystem.typeExpressions;
var universeHelpers = require("../parser/tools/universeHelpers");
var universes = require("../parser/tools/universe");
var util = require("../util/index");
var defaultCalculator = require("../parser/wrapped-ast/defaultCalculator");
var helpersLL = require("../parser/wrapped-ast/helpersLL");
var stubs = require('../parser/stubs');
var _ = require("underscore");
var pathUtils = require("path");
var RAML_MEDIATYPE = "application/raml+yaml";
function dump(node, options) {
    return new JsonSerializer(options).dump(node);
}
exports.dump = dump;
var getRootPath = function (node) {
    var rootPath;
    var rootNode = node.root();
    if (rootNode) {
        var llRoot = rootNode.lowLevel();
        if (llRoot) {
            var rootUnit = llRoot.unit();
            if (rootUnit) {
                rootPath = rootUnit.absolutePath();
            }
        }
    }
    return rootPath;
};
var JsonSerializer = (function () {
    function JsonSerializer(options) {
        this.options = options;
        this.nodePropertyTransformers = [
            new MethodsToMapTransformer(),
            new TypesTransformer(),
            new TraitsTransformer(),
            new SecuritySchemesTransformer(),
            new ResourceTypesTransformer(),
            //new ResourcesTransformer(),
            //new TypeExampleTransformer(),
            new ParametersTransformer(),
            //new TypesTransformer(),
            //new UsesTransformer(),
            new PropertiesTransformer(),
            //        new TypeValueTransformer(),
            // //new ExamplesTransformer(),
            new ResponsesTransformer(),
            new BodiesTransformer(),
            new AnnotationsTransformer(),
            //new SecuritySchemesTransformer(),
            //new AnnotationTypesTransformer(),
            //new TemplateParametrizedPropertiesTransformer(),
            //new TraitsTransformer(),
            //new ResourceTypesTransformer(),
            new FacetsTransformer(),
        ];
        this.nodeTransformersMap = {};
        this.nodePropertyTransformersMap = {};
        this.options = this.options || {};
        if (this.options.serializeMetadata == null) {
            this.options.serializeMetadata = true;
        }
        if (this.options.attributeDefaults == null) {
            this.options.attributeDefaults = true;
        }
        this.defaultsCalculator = new defaultCalculator.AttributeDefaultsCalculator(true, true);
        this.nodeTransformers = [
            new ResourcesTransformer(),
            //new TypeExampleTransformer(this.options.dumpXMLRepresentationOfExamples),
            new TypeTransformer(this.options),
            //new ParametersTransformer(),
            //new ArrayExpressionTransformer(),
            //new UsesTransformer(),
            //new PropertiesTransformer(),
            //new ResponsesTransformer(),
            //new BodiesTransformer(),
            //new AnnotationsTransformer(),
            new SimpleNamesTransformer(),
            new TemplateParametrizedPropertiesTransformer(),
            //new FacetsTransformer(),
            new SchemasTransformer(),
            new ProtocolsToUpperCaseTransformer(),
            new ReferencesTransformer(),
            new Api10SchemasTransformer(),
            new AllUriParametersTransformer(this.options.allUriParameters)
        ];
        fillTransformersMap(this.nodeTransformers, this.nodeTransformersMap);
        fillTransformersMap(this.nodePropertyTransformers, this.nodePropertyTransformersMap);
    }
    JsonSerializer.prototype.init = function (node) {
        this.helpersMap = {
            "baseUriParameters": baseUriParametersHandler,
            "uriParameters": uriParametersHandler
        };
        var isElement = node.isElement();
        if (isElement) {
            node.types();
            var eNode = node.asElement();
            var definition = eNode.definition();
            if (definition.universe().version() == "RAML08") {
                if (universeHelpers.isApiType(definition)) {
                    var schemasCache08 = {};
                    eNode.elementsOfKind(universes.Universe08.Api.properties.schemas.name)
                        .forEach(function (x) { return schemasCache08[x.name()] = x; });
                    this.helpersMap["schemaContent"] = new SchemaContentHandler(schemasCache08);
                }
            }
            if (universeHelpers.isApiSibling(definition)) {
                this.helpersMap["traits"] = new TemplatesHandler(helpersLL.allTraits(eNode, false));
                this.helpersMap["resourceTypes"] = new TemplatesHandler(helpersLL.allResourceTypes(eNode, false));
            }
        }
    };
    JsonSerializer.prototype.dispose = function () {
        delete this.helpersMap;
    };
    JsonSerializer.prototype.dump = function (node) {
        this.init(node);
        var isElement = node.isElement();
        var highLevelParent = node.parent();
        var rootNodeDetails = !highLevelParent && this.options.rootNodeDetails;
        var rootPath = getRootPath(node);
        var result = this.dumpInternal(node, null, rootPath, null, true);
        if (rootNodeDetails) {
            var obj = result;
            result = {};
            result.specification = obj;
            if (isElement) {
                var eNode = node.asElement();
                var definition = eNode.definition();
                if (definition) {
                    var universe = definition.universe();
                    var ramlVersion = universe.version();
                    result.ramlVersion = ramlVersion;
                    var typeName = definition.nameId();
                    if (!typeName) {
                        if (definition.isAssignableFrom(def.universesInfo.Universe10.TypeDeclaration.name)) {
                            var typeDecl = universe.type(def.universesInfo.Universe10.TypeDeclaration.name);
                            var map_1 = {};
                            typeDecl.allSubTypes().forEach(function (x) { return map_1[x.nameId()] = true; });
                            for (var _i = 0, _a = definition.allSuperTypes(); _i < _a.length; _i++) {
                                var st = _a[_i];
                                if (map_1[st.nameId()]) {
                                    typeName = st.nameId();
                                    break;
                                }
                            }
                        }
                    }
                    result.type = typeName;
                }
                result.errors = this.dumpErrors(core.errors(eNode));
            }
        }
        this.dispose();
        return result;
    };
    JsonSerializer.prototype.dumpInternal = function (_node, nodeProperty, rp, meta, isRoot) {
        var _this = this;
        if (isRoot === void 0) { isRoot = false; }
        if (_node == null) {
            return null;
        }
        if (_node.isReused()) {
            var reusedJSON = _node.getJSON();
            if (reusedJSON != null) {
                //console.log(_node.id());
                return reusedJSON;
            }
        }
        var result = {};
        if (_node.isElement()) {
            var map = {};
            var eNode = _node.asElement();
            var definition = eNode.definition();
            if (universeHelpers.isExampleSpecType(definition)) {
                if (eNode.parent() != null) {
                    result = ""; //to be fulfilled by the transformer
                }
                else {
                    var at = hlImpl.auxiliaryTypeForExample(eNode);
                    var eObj = helpersLL.dumpExpandableExample(at.examples()[0], this.options.dumpXMLRepresentationOfExamples);
                    var uses = eNode.elementsOfKind("uses").map(function (x) { return _this.dumpInternal(x, x.property(), rp); });
                    if (uses.length > 0) {
                        eObj["uses"] = uses;
                    }
                    result = eObj;
                }
            }
            else {
                var obj = {};
                var children = eNode.attrs()
                    .concat(eNode.children().filter(function (x) { return !x.isAttr(); }));
                for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
                    var ch = children_1[_i];
                    var prop = ch.property();
                    if (prop != null) {
                        var pName = prop.nameId();
                        var pVal = map[pName];
                        if (pVal == null) {
                            pVal = new PropertyValue(prop);
                            map[pName] = pVal;
                        }
                        pVal.registerValue(ch);
                    }
                    else {
                        var llNode = ch.lowLevel();
                        var key = llNode.key();
                        if (key) {
                        }
                    }
                }
                var scalarsAnnotations = {};
                for (var _a = 0, _b = definition.allProperties()
                    .concat(definition.allCustomProperties()); _a < _b.length; _a++) {
                    var p = _b[_a];
                    if (def.UserDefinedProp.isInstance(p)) {
                        continue;
                    }
                    var pName = p.nameId();
                    //TODO implement as transformer or ignore case
                    if (!isRoot && pName == "uses") {
                        if (universeHelpers.isApiSibling(eNode.root().definition())) {
                            continue;
                        }
                    }
                    var pVal = map[pName];
                    if (universeHelpers.isTypeProperty(p)) {
                        if (map["schema"]) {
                            var isNull = (pVal == null);
                            if (!isNull && pVal.arr.length == 1 && pVal.arr[0].isAttr()) {
                                isNull = (pVal.arr[0].asAttr().value() == null);
                            }
                            if (isNull) {
                                meta = meta || new core.NodeMetadataImpl();
                                meta.registerInsertedAsDefaultValue("type");
                            }
                            continue;
                        }
                        if (universeHelpers.isStringTypeDeclarationDescendant(definition)) {
                            if (pVal == null) {
                                result["type"] = "string";
                                meta = meta || new core.NodeMetadataImpl();
                                meta.registerInsertedAsDefaultValue("type");
                                continue;
                            }
                            else if (pVal.arr.length == 1 && pVal.arr[0].isAttr()) {
                                var tVal = pVal.arr[0].asAttr().value();
                                if (tVal == null) {
                                    result["type"] = "string";
                                    meta = meta || new core.NodeMetadataImpl();
                                    meta.registerInsertedAsDefaultValue("type");
                                    continue;
                                }
                                else if (tVal === "NULL" || tVal === "Null") {
                                    result["type"] = "string";
                                    continue;
                                }
                            }
                        }
                    }
                    pVal = this.applyHelpers(pVal, eNode, p, this.options.serializeMetadata);
                    var udVal = obj[pName];
                    var aVal = void 0;
                    if (pVal !== undefined) {
                        if (pVal.isMultiValue) {
                            aVal = pVal.arr.map(function (x, i) {
                                var pMeta = pVal.hasMeta ? pVal.mArr[i] : null;
                                return _this.dumpInternal(x, pVal.prop, rp, pMeta);
                            });
                            if (p.isValueProperty()) {
                                var sAnnotations = [];
                                var gotScalarAnnotations = false;
                                pVal.arr.filter(function (x) { return x.isAttr(); }).map(function (x) { return x.asAttr(); })
                                    .filter(function (x) { return x.isAnnotatedScalar(); }).forEach(function (x) {
                                    var sAnnotations1 = x.annotations().map(function (x) { return _this.dumpInternal(x, null, rp); });
                                    gotScalarAnnotations = gotScalarAnnotations || sAnnotations1.length > 0;
                                    sAnnotations.push(sAnnotations1);
                                });
                                if (gotScalarAnnotations) {
                                    scalarsAnnotations[pName] = sAnnotations;
                                }
                            }
                            if (universeHelpers.isTypeDeclarationDescendant(definition)
                                && universeHelpers.isTypeProperty(p)) {
                                //TODO compatibility crutch
                                if (pVal.arr.map(function (x) { return x.value(); })
                                    .filter(function (x) { return hlImpl.isStructuredValue(x); }).length > 0) {
                                    aVal = aVal[0];
                                }
                            }
                        }
                        else {
                            aVal = this.dumpInternal(pVal.val, pVal.prop, rp);
                            if (p.isValueProperty()) {
                                var attr = pVal.val.asAttr();
                                if (attr.isAnnotatedScalar()) {
                                    var sAnnotations = attr.annotations().map(function (x) { return _this.dumpInternal(x, null, rp); });
                                    if (sAnnotations.length > 0) {
                                        scalarsAnnotations[pName] = sAnnotations;
                                    }
                                }
                            }
                        }
                    }
                    else if (udVal !== undefined) {
                        aVal = udVal;
                    }
                    else if (this.options.attributeDefaults) {
                        var defVal = this.defaultsCalculator.attributeDefaultIfEnabled(eNode, p);
                        if (defVal != null) {
                            meta = meta || new core.NodeMetadataImpl();
                            if (Array.isArray(defVal)) {
                                defVal = defVal.map(function (x) {
                                    if (hlImpl.isASTPropImpl(x)) {
                                        return _this.dumpInternal(x, p, rp);
                                    }
                                    return x;
                                });
                            }
                            else if (hlImpl.isASTPropImpl(defVal)) {
                                defVal = this.dumpInternal(defVal, p, rp);
                            }
                            aVal = defVal;
                            if (aVal != null && p.isMultiValue() && !Array.isArray(aVal)) {
                                aVal = [aVal];
                            }
                            var insertionKind = this.defaultsCalculator.insertionKind(eNode, p);
                            if (insertionKind == defaultCalculator.InsertionKind.CALCULATED) {
                                meta.registerCalculatedValue(pName);
                            }
                            else if (insertionKind == defaultCalculator.InsertionKind.BY_DEFAULT) {
                                meta.registerInsertedAsDefaultValue(pName);
                            }
                        }
                    }
                    aVal = applyTransformersMap(eNode, p, aVal, this.nodePropertyTransformersMap);
                    if (aVal != null) {
                        //TODO implement as transformer
                        if ((pName === "type" || pName == "schema") && aVal && aVal.forEach && typeof aVal[0] === "string") {
                            var schemaString = aVal[0].trim();
                            var canBeJson = (schemaString[0] === "{" && schemaString[schemaString.length - 1] === "}");
                            var canBeXml = (schemaString[0] === "<" && schemaString[schemaString.length - 1] === ">");
                            if (canBeJson || canBeXml) {
                                var include = eNode.lowLevel().includePath && eNode.lowLevel().includePath();
                                if (!include) {
                                    var typeAttr = eNode.attr("type");
                                    if (!typeAttr) {
                                        typeAttr = eNode.attr("schema");
                                    }
                                    if (typeAttr) {
                                        include = typeAttr.lowLevel().includePath && typeAttr.lowLevel().includePath();
                                    }
                                }
                                if (include) {
                                    var ind = include.indexOf("#");
                                    var postfix = "";
                                    if (ind >= 0) {
                                        postfix = include.substring(ind);
                                        include = include.substring(0, ind);
                                    }
                                    var aPath = eNode.lowLevel().unit().resolve(include).absolutePath();
                                    var relativePath;
                                    if (util.stringStartsWith(aPath, "http://") || util.stringStartsWith(aPath, "https://")) {
                                        relativePath = aPath;
                                    }
                                    else {
                                        relativePath = pathUtils.relative(eNode.lowLevel().unit().project().getRootPath(), aPath);
                                    }
                                    relativePath = relativePath.replace(/\\/g, '/');
                                    result["schemaPath"] = relativePath + postfix;
                                }
                            }
                        }
                        result[pName] = aVal;
                    }
                }
                if (this.options.dumpSchemaContents && map["schema"]) {
                    if (map["schema"].prop.range().key() == universes.Universe08.SchemaString) {
                        var schemas = eNode.root().elementsOfKind("schemas");
                        schemas.forEach(function (x) {
                            if (x.name() == result["schema"]) {
                                var vl = x.attr("value");
                                if (vl) {
                                    result["schema"] = vl.value();
                                    result["schemaContent"] = vl.value();
                                }
                            }
                        });
                    }
                }
                if (this.options.serializeMetadata) {
                    this.serializeMeta(result, eNode, meta);
                }
                if (Object.keys(scalarsAnnotations).length > 0) {
                    result["scalarsAnnotations"] = scalarsAnnotations;
                }
                var pProps = helpersLL.getTemplateParametrizedProperties(eNode);
                if (pProps) {
                    result["parametrizedProperties"] = pProps;
                }
                if (universeHelpers.isTypeDeclarationDescendant(definition)) {
                    var fixedFacets = helpersLL.typeFixedFacets(eNode);
                    if (fixedFacets) {
                        result["fixedFacets"] = fixedFacets;
                    }
                }
                result = applyTransformersMap(eNode, nodeProperty || eNode.property(), result, this.nodeTransformersMap);
            }
        }
        else if (_node.isAttr()) {
            var aNode = _node.asAttr();
            var val = aNode.value();
            var prop = aNode.property();
            var rangeType = prop.range();
            var isValueType = rangeType.isValueType();
            var val;
            if (isValueType && aNode['value']) {
                val = aNode['value']();
                if (val == null && universeHelpers.isAnyTypeType(rangeType)) {
                    var llAttrNode = aNode.lowLevel();
                    if (aNode.isAnnotatedScalar()) {
                        llAttrNode = _.find(llAttrNode.children(), function (x) { return x.key() == "value"; });
                    }
                    if (llAttrNode) {
                        val = aNode.lowLevel().dumpToObject();
                    }
                }
            }
            if (val != null && (typeof val == 'number' || typeof val == 'string' || typeof val == 'boolean')) {
                result = val;
            }
            else {
                if (hlImpl.isStructuredValue(val)) {
                    var sVal = val;
                    var llNode = sVal.lowLevel();
                    val = llNode ? llNode.dumpToObject() : null;
                    var propName = prop.nameId();
                    if (rangeType.isAssignableFrom("Reference")) {
                        //TODO implement as transformer
                        var key = Object.keys(val)[0];
                        var name = sVal.valueName();
                        var refVal = val[key];
                        if (refVal === undefined) {
                            refVal = null;
                        }
                        val = {
                            name: name,
                            structuredValue: refVal
                        };
                    }
                    else if (propName == "type") {
                        var llNode = aNode.lowLevel();
                        var tdl = null;
                        var td = def.getUniverse("RAML10").type(universes.Universe10.TypeDeclaration.name);
                        var hasType = def.getUniverse("RAML10").type(universes.Universe10.LibraryBase.name);
                        var tNode = new hlImpl.ASTNodeImpl(llNode, aNode.parent(), td, hasType.property(universes.Universe10.LibraryBase.properties.types.name));
                        tNode.patchType(builder.doDescrimination(tNode));
                        val = this.dumpInternal(tNode, nodeProperty || aNode.property(), rp, null, true);
                    }
                    else if (propName == "items" && typeof val === "object") {
                        var isArr = Array.isArray(val);
                        var isObj = !isArr;
                        if (isArr) {
                            isObj = _.find(val, function (x) { return typeof (x) == "object"; }) != null;
                        }
                        if (isObj) {
                            val = null;
                            var a = _node.parent().lowLevel();
                            var tdl = null;
                            a.children().forEach(function (x) {
                                if (x.key() == "items") {
                                    var td = def.getUniverse("RAML10").type(universes.Universe10.TypeDeclaration.name);
                                    var hasType = def.getUniverse("RAML10").type(universes.Universe10.LibraryBase.name);
                                    var tNode = new hlImpl.ASTNodeImpl(x, aNode.parent(), td, hasType.property(universes.Universe10.LibraryBase.properties.types.name));
                                    tNode.patchType(builder.doDescrimination(tNode));
                                    val = _this.dumpInternal(tNode, nodeProperty || aNode.property(), rp, null, true);
                                    propName = x.key();
                                }
                            });
                        }
                    }
                }
                val = applyTransformersMap(aNode, nodeProperty || aNode.property(), val, this.nodeTransformersMap);
                result = val;
            }
        }
        else {
            var llNode = _node.lowLevel();
            result = llNode ? llNode.dumpToObject() : null;
        }
        _node.setJSON(result);
        return result;
    };
    JsonSerializer.prototype.getDefaultsCalculator = function () {
        return this.defaultsCalculator;
    };
    JsonSerializer.prototype.canBeFragment = function (node) {
        var definition = node.definition();
        var arr = [definition].concat(definition.allSubTypes());
        var arr1 = arr.filter(function (x) { return x.getAdapter(def.RAMLService).possibleInterfaces()
            .filter(function (y) { return y.nameId() == def.universesInfo.Universe10.FragmentDeclaration.name; }).length > 0; });
        return arr1.length > 0;
    };
    JsonSerializer.prototype.dumpErrors = function (errors) {
        var _this = this;
        return errors.map(function (x) {
            var eObj = _this.dumpErrorBasic(x);
            if (x.trace && x.trace.length > 0) {
                eObj['trace'] = _this.dumpErrors(x.trace);
            }
            return eObj;
        }).sort(function (x, y) {
            if (x.path != y.path) {
                return x.path.localeCompare(y.path);
            }
            if (x.range.start.position != y.range.start.position) {
                return x.range.start.position - y.range.start.position;
            }
            return x.code - y.code;
        });
    };
    JsonSerializer.prototype.dumpErrorBasic = function (x) {
        var eObj = {
            "code": x.code,
            "message": x.message,
            "path": x.path,
            "line": x.line,
            "column": x.column,
            "position": x.start,
            "range": x.range
        };
        if (x.isWarning === true) {
            eObj.isWarning = true;
        }
        return eObj;
    };
    JsonSerializer.prototype.serializeMeta = function (obj, node, _meta) {
        if (!this.options.serializeMetadata) {
            return;
        }
        var definition = node.definition();
        var isOptional = universeHelpers.isMethodType(definition) && node.optional();
        if (!_meta && !isOptional) {
            return;
        }
        var meta = _meta || new core.NodeMetadataImpl(false, false);
        if (isOptional) {
            meta.setOptional();
        }
        //if (!meta.isDefault()) {
        obj["__METADATA__"] = meta.toJSON();
        //}
    };
    JsonSerializer.prototype.applyHelpers = function (pVal, node, p, serializeMetadata) {
        var pName = p.nameId();
        var hMethod = this.helpersMap[pName];
        if (!hMethod) {
            return pVal;
        }
        var newVal = hMethod.apply(node, pVal, p, serializeMetadata);
        if (!newVal) {
            return pVal;
        }
        return newVal;
    };
    return JsonSerializer;
}());
exports.JsonSerializer = JsonSerializer;
var PropertyValue = (function () {
    function PropertyValue(prop) {
        this.prop = prop;
        this.arr = [];
        this.mArr = [];
        this.isMultiValue = prop.isMultiValue();
    }
    PropertyValue.prototype.registerValue = function (val) {
        if (this.isMultiValue) {
            this.arr.push(val);
        }
        else {
            this.val = val;
        }
    };
    PropertyValue.prototype.registerMeta = function (m) {
        if (this.isMultiValue) {
            this.mArr.push(m);
        }
    };
    return PropertyValue;
}());
function applyHelpers(pVal, node, p, serializeMetadata, schemasCache08) {
    var newVal;
    if (universeHelpers.isBaseUriParametersProperty(p)) {
        newVal = baseUriParameters(node, pVal, p, serializeMetadata);
    }
    if (universeHelpers.isUriParametersProperty(p)) {
        newVal = uriParameters(node, pVal, p, serializeMetadata);
    }
    else if (universeHelpers.isTraitsProperty(p)) {
        var arr = helpersLL.allTraits(node, false);
        newVal = contributeExternalNodes(node, arr, p, serializeMetadata);
    }
    else if (universeHelpers.isResourceTypesProperty(p)) {
        var arr = helpersLL.allResourceTypes(node, false);
        newVal = contributeExternalNodes(node, arr, p, serializeMetadata);
    }
    else if (p.nameId() == "schemaContent") {
        var attr = helpersLL.schemaContent08Internal(node, schemasCache08);
        if (attr) {
            newVal = new PropertyValue(p);
            newVal.registerValue(attr);
        }
    }
    if (newVal) {
        return newVal;
    }
    return pVal;
}
function uriParameters(resource, pVal, p, serializeMetadata) {
    if (serializeMetadata === void 0) { serializeMetadata = false; }
    var attr = resource.attr(universes.Universe10.Resource.properties.relativeUri.name);
    if (!attr) {
        return pVal;
    }
    var uri = attr.value();
    return extractParams(pVal, uri, resource, p, serializeMetadata);
}
function baseUriParameters(api, pVal, p, serializeMetadata) {
    if (serializeMetadata === void 0) { serializeMetadata = true; }
    var buriAttr = api.attr(universes.Universe10.Api.properties.baseUri.name);
    var uri = buriAttr ? buriAttr.value() : '';
    return extractParams(pVal, uri, api, p, serializeMetadata);
}
function extractParams(pVal, uri, ownerHl, prop, serializeMetadata) {
    if (!uri) {
        return pVal;
    }
    var describedParams = {};
    if (pVal) {
        pVal.arr.forEach(function (x) {
            var arr = describedParams[x.name()];
            if (!arr) {
                arr = [];
                describedParams[x.name()] = arr;
            }
            arr.push(x);
        });
    }
    var newVal = new PropertyValue(prop);
    var prev = 0;
    var mentionedParams = {};
    var gotUndescribedParam = false;
    for (var i = uri.indexOf('{'); i >= 0; i = uri.indexOf('{', prev)) {
        prev = uri.indexOf('}', ++i);
        if (prev < 0) {
            break;
        }
        var paramName = uri.substring(i, prev);
        mentionedParams[paramName] = true;
        if (describedParams[paramName]) {
            describedParams[paramName].forEach(function (x) {
                newVal.registerValue(x);
                newVal.registerMeta(null);
            });
        }
        else {
            gotUndescribedParam = true;
            var universe = ownerHl.definition().universe();
            var nc = universe.type(universes.Universe10.StringTypeDeclaration.name);
            var hlNode = stubs.createStubNode(nc, null, paramName, ownerHl.lowLevel().unit());
            hlNode.setParent(ownerHl);
            hlNode.attrOrCreate("name").setValue(paramName);
            hlNode.patchProp(prop);
            newVal.registerValue(hlNode);
            if (serializeMetadata) {
                newVal.hasMeta = true;
                var meta = new core.NodeMetadataImpl();
                meta.setCalculated();
                newVal.registerMeta(meta);
            }
        }
    }
    if (!gotUndescribedParam) {
        return pVal;
    }
    Object.keys(describedParams).filter(function (x) { return !mentionedParams[x]; })
        .forEach(function (x) { return describedParams[x].forEach(function (y) {
        newVal.registerValue(y);
        if (newVal.hasMeta) {
            newVal.registerMeta(null);
        }
    }); });
    return newVal;
}
;
function contributeExternalNodes(ownerNode, arr, p, serializeMetadata) {
    if (arr.length == 0) {
        return null;
    }
    var rootPath = ownerNode.lowLevel().unit().absolutePath();
    var newVal = new PropertyValue(p);
    arr.forEach(function (x) {
        newVal.registerValue(x);
        if (serializeMetadata) {
            if (x.lowLevel().unit().absolutePath() != rootPath) {
                newVal.hasMeta = true;
                var meta = new core.NodeMetadataImpl();
                meta.setCalculated();
                newVal.mArr.push(meta);
            }
            else {
                newVal.mArr.push(null);
            }
        }
    });
    return newVal;
}
var baseUriParametersHandler = {
    apply: function (node, pVal, p, serializeMetadata) {
        var buriAttr = node.attr(universes.Universe10.Api.properties.baseUri.name);
        var uri = buriAttr ? buriAttr.value() : '';
        return extractParams(pVal, uri, node, p, serializeMetadata);
    }
};
var uriParametersHandler = {
    apply: function (node, pVal, p, serializeMetadata) {
        var attr = node.attr(universes.Universe10.Resource.properties.relativeUri.name);
        if (!attr) {
            return pVal;
        }
        var uri = attr.value();
        return extractParams(pVal, uri, node, p, serializeMetadata);
    }
};
var TemplatesHandler = (function () {
    function TemplatesHandler(arr) {
        this.arr = arr;
    }
    TemplatesHandler.prototype.apply = function (node, pVal, p, serializeMetadata) {
        //var arr = helpersHL.allTraits(node,false);
        return contributeExternalNodes(node, this.arr, p, serializeMetadata);
    };
    return TemplatesHandler;
}());
var SchemaContentHandler = (function () {
    function SchemaContentHandler(schemasCache08) {
        this.schemasCache08 = schemasCache08;
    }
    SchemaContentHandler.prototype.apply = function (node, pVal, p, serializeMetadata) {
        var newVal = null;
        var attr = helpersLL.schemaContent08Internal(node, this.schemasCache08);
        if (attr) {
            newVal = new PropertyValue(p);
            newVal.registerValue(attr);
        }
        return newVal;
    };
    return SchemaContentHandler;
}());
function applyTransformersMap(node, prop, value, map) {
    var definition;
    if (node.isElement()) {
        definition = node.asElement().definition();
    }
    else if (node.isAttr()) {
        var p = node.asAttr().property();
        if (p) {
            definition = p.range();
        }
    }
    if (definition instanceof def.UserDefinedClass || definition.isUserDefined()) {
        definition = _.find(definition.allSuperTypes(), function (x) { return !x.isUserDefined(); });
    }
    if (definition == null) {
        return value;
    }
    var rv = definition.universe().version();
    var uMap = map[rv];
    if (!uMap) {
        return value;
    }
    var tMap = uMap[definition.nameId()];
    if (!tMap) {
        return value;
    }
    var pName = prop ? prop.nameId() : "__$$anyprop__";
    var arr = tMap[pName];
    if (!arr) {
        arr = tMap["__$$anyprop__"];
    }
    if (!arr) {
        return value;
    }
    for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
        var t = arr_1[_i];
        value = t.transform(value, node);
    }
    return value;
}
exports.applyTransformersMap = applyTransformersMap;
function fillTransformersMap(tArr, map) {
    for (var _i = 0, tArr_1 = tArr; _i < tArr_1.length; _i++) {
        var t = tArr_1[_i];
        var info = t.registrationInfo();
        if (!info) {
            continue;
        }
        for (var _a = 0, _b = Object.keys(info); _a < _b.length; _a++) {
            var uName = _b[_a];
            var uObject = info[uName];
            var uMap = map[uName];
            if (uMap == null) {
                uMap = {};
                map[uName] = uMap;
            }
            for (var _c = 0, _d = Object.keys(uObject); _c < _d.length; _c++) {
                var tName = _d[_c];
                var tObject = uObject[tName];
                var tMap = uMap[tName];
                if (tMap == null) {
                    tMap = {};
                    uMap[tName] = tMap;
                }
                for (var _e = 0, _f = Object.keys(tObject); _e < _f.length; _e++) {
                    var pName = _f[_e];
                    var arr = tMap[pName];
                    if (arr == null) {
                        arr = [];
                        if (pName != "__$$anyprop__") {
                            var aArr = tMap["__$$anyprop__"];
                            if (aArr) {
                                arr = arr.concat(aArr);
                            }
                        }
                        tMap[pName] = arr;
                    }
                    if (pName == "__$$anyprop__") {
                        for (var _g = 0, _h = Object.keys(tMap); _g < _h.length; _g++) {
                            var pn = _h[_g];
                            tMap[pn].push(t);
                        }
                    }
                    else {
                        arr.push(t);
                    }
                }
            }
        }
    }
}
var AbstractObjectPropertyMatcher = (function () {
    function AbstractObjectPropertyMatcher() {
    }
    AbstractObjectPropertyMatcher.prototype.match = function (td, prop) {
        if (td == null) {
            return false;
        }
        var info = this.registrationInfo();
        var ver = td.universe().version();
        if (td instanceof def.UserDefinedClass || td.isUserDefined()) {
            td = _.find(td.allSuperTypes(), function (x) { return !x.isUserDefined(); });
            if (td == null) {
                return prop == null;
            }
        }
        var uObject = info[ver];
        if (!uObject) {
            return false;
        }
        var tObject = uObject[td.nameId()];
        if (!tObject) {
            return false;
        }
        var p = (prop == null) || tObject[prop.nameId()] === true || tObject["__$$anyprop__"] === true;
        return p;
    };
    return AbstractObjectPropertyMatcher;
}());
var BasicObjectPropertyMatcher = (function (_super) {
    __extends(BasicObjectPropertyMatcher, _super);
    function BasicObjectPropertyMatcher(typeName, propName, applyToDescendatns, restrictToUniverses) {
        if (applyToDescendatns === void 0) { applyToDescendatns = false; }
        if (restrictToUniverses === void 0) { restrictToUniverses = ["RAML10", "RAML08"]; }
        _super.call(this);
        this.typeName = typeName;
        this.propName = propName;
        this.applyToDescendatns = applyToDescendatns;
        this.restrictToUniverses = restrictToUniverses;
    }
    BasicObjectPropertyMatcher.prototype.registrationInfo = function () {
        var _this = this;
        if (this.regInfo) {
            return this.regInfo;
        }
        var result = {};
        var uObjects = [];
        for (var _i = 0, _a = this.restrictToUniverses; _i < _a.length; _i++) {
            var uName = _a[_i];
            var uObj = {};
            result[uName] = uObj;
            uObjects.push(uObj);
        }
        var tObjects = [];
        for (var _b = 0, _c = Object.keys(result); _b < _c.length; _b++) {
            var uName = _c[_b];
            var t = def.getUniverse(uName).type(this.typeName);
            if (t) {
                var uObject = result[uName];
                var typeNames = [this.typeName];
                if (this.applyToDescendatns) {
                    t.allSubTypes().forEach(function (x) { return typeNames.push(x.nameId()); });
                }
                for (var _d = 0, typeNames_1 = typeNames; _d < typeNames_1.length; _d++) {
                    var tName = typeNames_1[_d];
                    var tObject = {};
                    if (this.propName != null) {
                        tObject[this.propName] = true;
                    }
                    else {
                        tObject["__$$anyprop__"] = true;
                    }
                    uObject[tName] = tObject;
                }
            }
        }
        this.regInfo = {};
        Object.keys(result).forEach(function (x) {
            var uObject = result[x];
            if (Object.keys(uObject).length > 0) {
                _this.regInfo[x] = uObject;
            }
        });
        return this.regInfo;
    };
    return BasicObjectPropertyMatcher;
}(AbstractObjectPropertyMatcher));
var MatcherBasedTransformation = (function () {
    function MatcherBasedTransformation(matcher) {
        this.matcher = matcher;
    }
    MatcherBasedTransformation.prototype.match = function (node, prop) {
        var definition;
        if (node.isElement()) {
            definition = node.asElement().definition();
        }
        else if (node.isAttr()) {
            var prop1 = node.asAttr().property();
            if (prop1) {
                definition = prop1.range();
            }
        }
        return definition ? this.matcher.match(definition, prop) : false;
    };
    MatcherBasedTransformation.prototype.registrationInfo = function () {
        return this.matcher.registrationInfo();
    };
    return MatcherBasedTransformation;
}());
var BasicTransformation = (function (_super) {
    __extends(BasicTransformation, _super);
    function BasicTransformation(typeName, propName, applyToDescendatns, restrictToUniverses) {
        if (applyToDescendatns === void 0) { applyToDescendatns = false; }
        if (restrictToUniverses === void 0) { restrictToUniverses = ["RAML10", "RAML08"]; }
        _super.call(this, new BasicObjectPropertyMatcher(typeName, propName, applyToDescendatns, restrictToUniverses));
        this.typeName = typeName;
        this.propName = propName;
        this.applyToDescendatns = applyToDescendatns;
        this.restrictToUniverses = restrictToUniverses;
    }
    return BasicTransformation;
}(MatcherBasedTransformation));
var CompositeObjectPropertyMatcher = (function (_super) {
    __extends(CompositeObjectPropertyMatcher, _super);
    function CompositeObjectPropertyMatcher(matchers) {
        _super.call(this);
        this.matchers = matchers;
    }
    CompositeObjectPropertyMatcher.prototype.registrationInfo = function () {
        if (this.regInfo) {
            return this.regInfo;
        }
        this.regInfo = mergeRegInfos(this.matchers.map(function (x) { return x.registrationInfo(); }));
        return this.regInfo;
    };
    return CompositeObjectPropertyMatcher;
}(AbstractObjectPropertyMatcher));
var ArrayToMapTransformer = (function () {
    function ArrayToMapTransformer(matcher, propName) {
        this.matcher = matcher;
        this.propName = propName;
    }
    ArrayToMapTransformer.prototype.match = function (node, prop) {
        return node.isElement() && this.matcher.match(node.asElement().definition(), prop);
    };
    ArrayToMapTransformer.prototype.transform = function (value, node) {
        var _this = this;
        if (Array.isArray(value) && value.length > 0 && value[0][this.propName]) {
            var obj = {};
            value.forEach(function (x) {
                var key = x["$$" + _this.propName];
                if (key != null) {
                    delete x["$$" + _this.propName];
                }
                else {
                    key = x[_this.propName];
                }
                var previous = obj[key];
                if (previous) {
                    if (Array.isArray(previous)) {
                        previous.push(x);
                    }
                    else {
                        obj[key] = [previous, x];
                    }
                }
                else {
                    obj[key] = x;
                }
            });
            return obj;
        }
        return value;
    };
    ArrayToMapTransformer.prototype.registrationInfo = function () {
        return this.matcher.registrationInfo();
    };
    return ArrayToMapTransformer;
}());
var ResourcesTransformer = (function (_super) {
    __extends(ResourcesTransformer, _super);
    function ResourcesTransformer() {
        _super.call(this, universes.Universe10.Resource.name, null, true);
    }
    ResourcesTransformer.prototype.transform = function (value, node) {
        if (Array.isArray(value)) {
            return value;
        }
        var relUri = value[universes.Universe10.Resource.properties.relativeUri.name];
        if (relUri) {
            var segments = relUri.trim().split("/");
            while (segments.length > 0 && segments[0].length == 0) {
                segments.shift();
            }
            value["relativeUriPathSegments"] = segments;
            value.absoluteUri = helpersLL.absoluteUri(node.asElement());
            value.completeRelativeUri = helpersLL.completeRelativeUri(node.asElement());
            if (universeHelpers.isResourceType(node.parent().definition())) {
                value.parentUri = helpersLL.completeRelativeUri(node.parent());
            }
            else {
                value.parentUri = "";
            }
        }
        return value;
    };
    return ResourcesTransformer;
}(BasicTransformation));
var TypeTransformer = (function (_super) {
    __extends(TypeTransformer, _super);
    function TypeTransformer(options) {
        if (options === void 0) { options = {}; }
        _super.call(this, universes.Universe10.TypeDeclaration.name, null, true);
        this.options = options;
    }
    TypeTransformer.prototype.transform = function (_value, node) {
        var isArray = Array.isArray(_value);
        if (isArray && _value.length == 0) {
            return _value;
        }
        var value = isArray ? _value[0] : _value;
        var exampleObj = helpersLL.typeExample(node.asElement(), this.options.dumpXMLRepresentationOfExamples);
        if (exampleObj) {
            value["examples"] = [exampleObj];
        }
        else {
            var examples = helpersLL.typeExamples(node.asElement(), this.options.dumpXMLRepresentationOfExamples);
            if (examples.length > 0) {
                value["examples"] = examples;
            }
        }
        delete value["example"];
        if (value.hasOwnProperty("schema")) {
            if (!value.hasOwnProperty("type")) {
                value["type"] = value["schema"];
            }
            else {
                var typeValue = value["type"];
                if (!Array.isArray(typeValue)) {
                    typeValue = [typeValue];
                    value["type"] = typeValue;
                }
                var schemaValue = value["schema"];
                if (Array.isArray(schemaValue)) {
                    schemaValue.forEach(function (x) { return typeValue.push(x); });
                }
                else {
                    typeValue.push(schemaValue);
                }
            }
            delete value["schema"];
        }
        //this.refineTypeValue(value,node.asElement());
        if (!Array.isArray(value.type)) {
            value.type = [value.type];
        }
        value.mediaType = RAML_MEDIATYPE;
        if (node && node.isElement()) {
            var e = node.asElement();
            var externalType = e.localType().isExternal() ? e.localType() : null;
            if (!externalType) {
                for (var _i = 0, _a = e.localType().allSuperTypes(); _i < _a.length; _i++) {
                    var st = _a[_i];
                    if (st.isExternal()) {
                        externalType = st;
                    }
                }
            }
            if (externalType) {
                var sch = externalType.external().schema().trim();
                if (util.stringStartsWith(sch, "<")) {
                    value.mediaType = "application/xml";
                }
                else {
                    value.mediaType = "application/json";
                }
            }
        }
        var prop = node.property();
        if (prop && !(universeHelpers.isHeadersProperty(prop)
            || universeHelpers.isQueryParametersProperty(prop)
            || universeHelpers.isUriParametersProperty(prop)
            || universeHelpers.isPropertiesProperty(prop)
            || universeHelpers.isBaseUriParametersProperty(prop))) {
            delete value["required"];
            var metaObj = value["__METADATA__"];
            if (metaObj) {
                var pMetaObj = metaObj["primitiveValuesMeta"];
                if (pMetaObj) {
                    delete pMetaObj["required"];
                }
            }
        }
        var typeValue = value["type"];
        if (typeValue.forEach && typeof typeValue[0] === "string") {
            var runtimeType = node.asElement().localType();
            if (runtimeType && runtimeType.hasExternalInHierarchy()) {
                var schemaString = typeValue[0].trim();
                var canBeJson = (schemaString[0] === "{" && schemaString[schemaString.length - 1] === "}");
                var canBeXml = (schemaString[0] === "<" && schemaString[schemaString.length - 1] === ">");
                if (canBeJson) {
                    value["typePropertyKind"] = "JSON";
                }
                else if (canBeXml) {
                    value["typePropertyKind"] = "XML";
                }
            }
            else {
                value["typePropertyKind"] = "TYPE_EXPRESSION";
            }
        }
        else if (typeof typeValue === "object") {
            value["typePropertyKind"] = "INPLACE";
        }
        if (this.options.unfoldTypes) {
            value.unfolded = this.processExpressions(value);
        }
        if (value.type.length == 1) {
            var typeVal = value.type[0];
            if (typeof (typeVal) == "string") {
                typeVal = typeVal.trim();
                var isArr = util.stringEndsWith(typeVal, "[]");
                if (isArr) {
                    var itemsStr = typeVal.substring(0, typeVal.length - "[]".length).trim();
                    while (itemsStr.length > 0
                        && itemsStr.charAt(0) == "("
                        && itemsStr.charAt(itemsStr.length - 1) == ")") {
                        itemsStr = itemsStr.substring(1, itemsStr.length - 1);
                    }
                    value.type[0] = "array";
                    value.items = itemsStr;
                }
            }
        }
        return _value;
    };
    TypeTransformer.prototype.processExpressions = function (value) {
        var copy = util.deepCopy(value);
        this.parseExpressions(copy);
        return copy;
    };
    TypeTransformer.prototype.parseExpressions = function (obj) {
        this.parseExpressionsForProperty(obj, "type");
        this.parseExpressionsForProperty(obj, "items");
        if (obj.properties) {
            for (var _i = 0, _a = Object.keys(obj.properties); _i < _a.length; _i++) {
                var pName = _a[_i];
                var p = obj.properties[pName];
                if (p.unfolded) {
                    obj.properties[pName] = p.unfolded;
                }
            }
        }
    };
    TypeTransformer.prototype.parseExpressionsForProperty = function (obj, prop) {
        var value = obj[prop];
        if (!value) {
            return;
        }
        var isSingleString = false;
        if (!Array.isArray(value)) {
            if (typeof value == "object") {
                if (value.unfolded) {
                    obj.prop = value.unfolded;
                }
                else {
                    this.parseExpressions(value);
                }
                return;
            }
            else if (typeof value == "string") {
                isSingleString = true;
                value = [value];
            }
        }
        var resultingArray = [];
        for (var i = 0; i < value.length; i++) {
            var expr = value[i];
            if (typeof expr == "object") {
                if (expr.unfolded) {
                    expr = expr.unfolded;
                }
                else {
                    this.parseExpressions(expr);
                }
            }
            resultingArray.push(expr);
            if (typeof expr != "string") {
                continue;
            }
            var str = expr;
            var gotExpression = referencePatcher.checkExpression(str);
            if (!gotExpression) {
                continue;
            }
            var escapeData = {
                status: referencePatcher.ParametersEscapingStatus.NOT_REQUIRED
            };
            if (expr.indexOf("<<") >= 0) {
                escapeData = referencePatcher.escapeTemplateParameters(expr);
                if (escapeData.status == referencePatcher.ParametersEscapingStatus.OK) {
                    str = escapeData.resultingString;
                    gotExpression = referencePatcher.checkExpression(str);
                    if (!gotExpression) {
                        continue;
                    }
                }
                else if (escapeData.status == referencePatcher.ParametersEscapingStatus.ERROR) {
                    continue;
                }
            }
            var parsedExpression = void 0;
            try {
                parsedExpression = typeExpressions.parse(str);
            }
            catch (exception) {
                continue;
            }
            if (!parsedExpression) {
                continue;
            }
            var exprObj = this.expressionToObject(parsedExpression, escapeData);
            if (exprObj != null) {
                resultingArray[i] = exprObj;
            }
        }
        obj[prop] = isSingleString ? resultingArray[0] : resultingArray;
    };
    TypeTransformer.prototype.expressionToObject = function (expr, escapeData) {
        var result;
        var arr = 0;
        if (expr.type == "name") {
            var literal = expr;
            arr = literal.arr;
            result = literal.value;
            if (escapeData.status == referencePatcher.ParametersEscapingStatus.OK) {
                var unescapeData = referencePatcher.unescapeTemplateParameters(result, escapeData.substitutions);
                if (unescapeData.status == referencePatcher.ParametersEscapingStatus.OK) {
                    result = unescapeData.resultingString;
                }
                else if (unescapeData.status == referencePatcher.ParametersEscapingStatus.ERROR) {
                    result = null;
                }
            }
        }
        else if (expr.type == "union") {
            var union = expr;
            result = {
                type: ["union"],
                options: []
            };
            var components = this.toOptionsArray(union);
            for (var _i = 0, components_1 = components; _i < components_1.length; _i++) {
                var c = components_1[_i];
                if (c == null) {
                    result = null;
                    break;
                }
                var c1 = this.expressionToObject(c, escapeData);
                result.options.push(c1);
            }
            result.options = _.unique(result.options).sort();
        }
        else if (expr.type == "parens") {
            var parens = expr;
            arr = parens.arr;
            result = this.expressionToObject(parens.expr, escapeData);
        }
        if (result != null) {
            while (arr-- > 0) {
                result = {
                    type: ["array"],
                    items: result
                };
            }
        }
        return result;
    };
    TypeTransformer.prototype.toOptionsArray = function (union) {
        var result;
        var e1 = union.first;
        var e2 = union.rest;
        while (e1.type == "parens" && e1.arr == 0) {
            e1 = e1.expr;
        }
        while (e2.type == "parens" && e2.arr == 0) {
            e2 = e2.expr;
        }
        if (e1.type == "union") {
            result = this.toOptionsArray(e1);
        }
        else {
            result = [e1];
        }
        if (e2.type == "union") {
            result = result.concat(this.toOptionsArray(e2));
        }
        else {
            result.push(e2);
        }
        return result;
    };
    return TypeTransformer;
}(BasicTransformation));
var SimpleNamesTransformer = (function (_super) {
    __extends(SimpleNamesTransformer, _super);
    function SimpleNamesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.TypeDeclaration.name, universes.Universe10.LibraryBase.properties.annotationTypes.name, true, ["RAML10"]),
            new BasicObjectPropertyMatcher(universes.Universe10.TypeDeclaration.name, universes.Universe10.LibraryBase.properties.types.name, true, ["RAML10"]),
            new BasicObjectPropertyMatcher(universes.Universe10.Trait.name, universes.Universe10.LibraryBase.properties.traits.name, true, ["RAML10"]),
            new BasicObjectPropertyMatcher(universes.Universe10.AbstractSecurityScheme.name, universes.Universe10.LibraryBase.properties.securitySchemes.name, true, ["RAML10"]),
            new BasicObjectPropertyMatcher(universes.Universe10.ResourceType.name, universes.Universe10.LibraryBase.properties.resourceTypes.name, true, ["RAML10"])
        ]));
    }
    SimpleNamesTransformer.prototype.transform = function (value, node) {
        if (!node.parent() || !node.parent().lowLevel()["libProcessed"]) {
            return value;
        }
        var llNode = node.lowLevel();
        var key = llNode.key();
        value["$$name"] = key;
        var original = llNode;
        while (proxy.LowLevelProxyNode.isInstance(original)) {
            original = original.originalNode();
        }
        var oKey = original.key();
        var aVal = value;
        aVal.name = oKey;
        if (aVal.displayName == key) {
            aVal.displayName = oKey;
        }
        return value;
    };
    return SimpleNamesTransformer;
}(MatcherBasedTransformation));
var TemplateParametrizedPropertiesTransformer = (function (_super) {
    __extends(TemplateParametrizedPropertiesTransformer, _super);
    function TemplateParametrizedPropertiesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.ResourceType.name, null, true),
            new BasicObjectPropertyMatcher(universes.Universe10.Trait.name, null, true),
            new BasicObjectPropertyMatcher(universes.Universe10.Method.name, null, true),
            new BasicObjectPropertyMatcher(universes.Universe10.Response.name, null, true),
            new BasicObjectPropertyMatcher(universes.Universe08.Parameter.name, null, true),
            new BasicObjectPropertyMatcher(universes.Universe08.BodyLike.name, null, true),
            new BasicObjectPropertyMatcher(universes.Universe10.TypeDeclaration.name, null, true)
        ]));
    }
    TemplateParametrizedPropertiesTransformer.prototype.transform = function (value) {
        if (Array.isArray(value)) {
            return value;
        }
        var propName = def.universesInfo.Universe10.Trait.properties.parametrizedProperties.name;
        var parametrizedProps = value[propName];
        if (parametrizedProps) {
            Object.keys(parametrizedProps).forEach(function (y) {
                value[y] = parametrizedProps[y];
            });
            delete value[propName];
        }
        return value;
    };
    return TemplateParametrizedPropertiesTransformer;
}(MatcherBasedTransformation));
var PropertiesTransformer = (function (_super) {
    __extends(PropertiesTransformer, _super);
    function PropertiesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.ObjectTypeDeclaration.name, universes.Universe10.ObjectTypeDeclaration.properties.properties.name, true)
        ]), "name");
    }
    return PropertiesTransformer;
}(ArrayToMapTransformer));
var SchemasTransformer = (function (_super) {
    __extends(SchemasTransformer, _super);
    function SchemasTransformer() {
        _super.call(this, universes.Universe08.GlobalSchema.name, universes.Universe08.Api.properties.schemas.name, true, ["RAML08"]);
    }
    SchemasTransformer.prototype.transform = function (value) {
        if (Array.isArray(value)) {
            return value;
        }
        else {
            var obj = {};
            obj[value.key] = value.value;
            return obj;
        }
    };
    return SchemasTransformer;
}(BasicTransformation));
var ProtocolsToUpperCaseTransformer = (function (_super) {
    __extends(ProtocolsToUpperCaseTransformer, _super);
    function ProtocolsToUpperCaseTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.Api.name, universes.Universe10.Api.properties.protocols.name, true),
            new BasicObjectPropertyMatcher(universes.Universe10.MethodBase.name, universes.Universe10.MethodBase.properties.protocols.name, true),
        ]));
    }
    ProtocolsToUpperCaseTransformer.prototype.transform = function (value) {
        if (typeof (value) == 'string') {
            return value.toUpperCase();
        }
        else if (Array.isArray(value)) {
            return value.map(function (x) { return x.toUpperCase(); });
        }
        return value;
    };
    return ProtocolsToUpperCaseTransformer;
}(MatcherBasedTransformation));
var ReferencesTransformer = (function (_super) {
    __extends(ReferencesTransformer, _super);
    function ReferencesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.SecuritySchemeRef.name, universes.Universe10.Api.properties.securedBy.name, true),
            new BasicObjectPropertyMatcher(universes.Universe10.TraitRef.name, universes.Universe10.MethodBase.properties.is.name, true),
            new BasicObjectPropertyMatcher(universes.Universe10.ResourceTypeRef.name, universes.Universe10.ResourceBase.properties.type.name, true)
        ]));
    }
    ReferencesTransformer.prototype.transform = function (value) {
        if (!value) {
            return null;
        }
        if (Array.isArray(value)) {
            return value;
        }
        return this.toSimpleValue(value);
    };
    ReferencesTransformer.prototype.toSimpleValue = function (x) {
        if (typeof (x) == "string") {
            return x;
        }
        var name = x['name'];
        var params = x['structuredValue'];
        if (params) {
            var obj = {};
            obj[name] = params;
            return obj;
        }
        else {
            return name;
        }
    };
    return ReferencesTransformer;
}(MatcherBasedTransformation));
var AllUriParametersTransformer = (function (_super) {
    __extends(AllUriParametersTransformer, _super);
    function AllUriParametersTransformer(enabled) {
        if (enabled === void 0) { enabled = false; }
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.Api.name, null, true)
        ]));
        this.enabled = enabled;
    }
    AllUriParametersTransformer.prototype.match = function (node, prop) {
        return this.enabled ? _super.prototype.match.call(this, node, prop) : false;
    };
    AllUriParametersTransformer.prototype.registrationInfo = function () {
        return this.enabled ? _super.prototype.registrationInfo.call(this) : null;
    };
    AllUriParametersTransformer.prototype.transform = function (value, node, uriParams) {
        var _this = this;
        var params = uriParams;
        var ownParams = value[AllUriParametersTransformer.uriParamsPropName];
        if (ownParams) {
            params = [].concat(uriParams || []);
            Object.keys(ownParams).forEach(function (x) {
                var obj = ownParams[x];
                if (Array.isArray(obj)) {
                    obj.forEach(function (y) { return params.push(y); });
                }
                else {
                    params.push(obj);
                }
            });
        }
        if (params) {
            value["allUriParameters"] = params;
            var methods = value[AllUriParametersTransformer.methodsPropName];
            if (methods) {
                Object.keys(methods).forEach(function (x) {
                    return methods[x]["allUriParameters"] = params;
                });
            }
        }
        var resources = value[AllUriParametersTransformer.resourcesPropName];
        if (resources) {
            resources.forEach(function (x) { return _this.transform(x, null, params); });
        }
        return value;
    };
    AllUriParametersTransformer.uriParamsPropName = universes.Universe10.ResourceBase.properties.uriParameters.name;
    AllUriParametersTransformer.methodsPropName = universes.Universe10.ResourceBase.properties.methods.name;
    AllUriParametersTransformer.resourcesPropName = universes.Universe10.Api.properties.resources.name;
    return AllUriParametersTransformer;
}(MatcherBasedTransformation));
var MethodsToMapTransformer = (function (_super) {
    __extends(MethodsToMapTransformer, _super);
    function MethodsToMapTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.ResourceBase.name, universes.Universe10.ResourceBase.properties.methods.name, true),
            new BasicObjectPropertyMatcher(universes.Universe08.Resource.name, universes.Universe08.Resource.properties.methods.name, true),
            new BasicObjectPropertyMatcher(universes.Universe08.ResourceType.name, universes.Universe08.ResourceType.properties.methods.name, true)
        ]), "method");
    }
    return MethodsToMapTransformer;
}(ArrayToMapTransformer));
var TypesTransformer = (function (_super) {
    __extends(TypesTransformer, _super);
    function TypesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.LibraryBase.name, universes.Universe10.LibraryBase.properties.types.name, true),
            new BasicObjectPropertyMatcher(universes.Universe10.LibraryBase.name, universes.Universe10.LibraryBase.properties.schemas.name, true),
            new BasicObjectPropertyMatcher(universes.Universe10.LibraryBase.name, universes.Universe10.LibraryBase.properties.annotationTypes.name, true)
        ]), "name");
    }
    return TypesTransformer;
}(ArrayToMapTransformer));
var TraitsTransformer = (function (_super) {
    __extends(TraitsTransformer, _super);
    function TraitsTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.LibraryBase.name, universes.Universe10.LibraryBase.properties.traits.name, true),
            new BasicObjectPropertyMatcher(universes.Universe08.Api.name, universes.Universe08.Api.properties.traits.name, true)
        ]), "name");
    }
    return TraitsTransformer;
}(ArrayToMapTransformer));
var ResourceTypesTransformer = (function (_super) {
    __extends(ResourceTypesTransformer, _super);
    function ResourceTypesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.LibraryBase.name, universes.Universe10.LibraryBase.properties.resourceTypes.name, true),
            new BasicObjectPropertyMatcher(universes.Universe08.Api.name, universes.Universe10.Api.properties.resourceTypes.name, true, ["RAML08"])
        ]), "name");
    }
    return ResourceTypesTransformer;
}(ArrayToMapTransformer));
var SecuritySchemesTransformer = (function (_super) {
    __extends(SecuritySchemesTransformer, _super);
    function SecuritySchemesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.LibraryBase.name, universes.Universe10.LibraryBase.properties.securitySchemes.name, true),
            new BasicObjectPropertyMatcher(universes.Universe08.Api.name, universes.Universe08.Api.properties.securitySchemes.name, true, ["RAML08"])
        ]), "name");
    }
    return SecuritySchemesTransformer;
}(ArrayToMapTransformer));
var ParametersTransformer = (function (_super) {
    __extends(ParametersTransformer, _super);
    function ParametersTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.Api.name, universes.Universe10.Api.properties.baseUriParameters.name, true),
            new BasicObjectPropertyMatcher(universes.Universe10.ResourceBase.name, universes.Universe10.ResourceBase.properties.uriParameters.name, true),
            new BasicObjectPropertyMatcher(universes.Universe08.Resource.name, universes.Universe08.Resource.properties.uriParameters.name, true, ["RAML08"]),
            new BasicObjectPropertyMatcher(universes.Universe10.ResourceBase.name, universes.Universe10.MethodBase.properties.queryParameters.name, true),
            new BasicObjectPropertyMatcher(universes.Universe10.MethodBase.name, universes.Universe10.MethodBase.properties.queryParameters.name, true),
            new BasicObjectPropertyMatcher(universes.Universe10.Operation.name, universes.Universe10.MethodBase.properties.queryParameters.name, true),
            new BasicObjectPropertyMatcher(universes.Universe10.Operation.name, universes.Universe10.MethodBase.properties.headers.name, true),
            new BasicObjectPropertyMatcher(universes.Universe10.MethodBase.name, universes.Universe10.MethodBase.properties.headers.name, true),
            new BasicObjectPropertyMatcher(universes.Universe08.BodyLike.name, universes.Universe08.BodyLike.properties.formParameters.name)
        ]), "name");
    }
    return ParametersTransformer;
}(ArrayToMapTransformer));
var ResponsesTransformer = (function (_super) {
    __extends(ResponsesTransformer, _super);
    function ResponsesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            //new BasicObjectPropertyMatcher(universes.Universe10.Operation.name,universes.Universe10.Operation.properties.responses.name,true),
            new BasicObjectPropertyMatcher(universes.Universe10.MethodBase.name, universes.Universe10.MethodBase.properties.responses.name, true)
        ]), "code");
    }
    return ResponsesTransformer;
}(ArrayToMapTransformer));
var AnnotationsTransformer = (function (_super) {
    __extends(AnnotationsTransformer, _super);
    function AnnotationsTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.Annotable.name, universes.Universe10.Annotable.properties.annotations.name, true)
        ]), "name");
    }
    return AnnotationsTransformer;
}(ArrayToMapTransformer));
var BodiesTransformer = (function (_super) {
    __extends(BodiesTransformer, _super);
    function BodiesTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.Response.name, universes.Universe10.Response.properties.body.name),
            new BasicObjectPropertyMatcher(universes.Universe10.MethodBase.name, universes.Universe10.MethodBase.properties.body.name, true)
        ]), "name");
    }
    return BodiesTransformer;
}(ArrayToMapTransformer));
var FacetsTransformer = (function (_super) {
    __extends(FacetsTransformer, _super);
    function FacetsTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.TypeDeclaration.name, universes.Universe10.TypeDeclaration.properties.facets.name, true)
        ]), "name");
    }
    return FacetsTransformer;
}(ArrayToMapTransformer));
var Api10SchemasTransformer = (function (_super) {
    __extends(Api10SchemasTransformer, _super);
    function Api10SchemasTransformer() {
        _super.call(this, new CompositeObjectPropertyMatcher([
            new BasicObjectPropertyMatcher(universes.Universe10.LibraryBase.name, null, true, ["RAML10"])
        ]));
    }
    Api10SchemasTransformer.prototype.transform = function (value, node) {
        if (!value) {
            return value;
        }
        if (!value.hasOwnProperty("schemas")) {
            return value;
        }
        var schemasValue = value["schemas"];
        if (!value.hasOwnProperty("types")) {
            value["types"] = schemasValue;
        }
        else {
            var typesValue = value["types"];
            Object.keys(schemasValue).forEach(function (x) {
                if (!typesValue.hasOwnProperty(x)) {
                    typesValue[x] = schemasValue[x];
                }
            });
        }
        delete value["schemas"];
        return value;
    };
    return Api10SchemasTransformer;
}(MatcherBasedTransformation));
function mergeRegInfos(arr) {
    if (arr.length == 0) {
        return {};
    }
    var result = arr[0];
    for (var i = 1; i < arr.length; i++) {
        var obj = arr[i];
        result = mergeObjects(result, obj);
    }
    return result;
}
exports.mergeRegInfos = mergeRegInfos;
function mergeObjects(o1, o2) {
    for (var _i = 0, _a = Object.keys(o2); _i < _a.length; _i++) {
        var k = _a[_i];
        var f1 = o1[k];
        var f2 = o2[k];
        if (f1 == null) {
            o1[k] = f2;
        }
        else {
            if (typeof (f1) == "object" && typeof (f2) == "object") {
                o1[k] = mergeObjects(f1, f2);
            }
        }
    }
    return o1;
}
//# sourceMappingURL=jsonSerializerHL.js.map