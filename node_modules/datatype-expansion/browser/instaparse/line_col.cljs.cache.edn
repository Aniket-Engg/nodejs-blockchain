;; Analyzed by ClojureScript 1.9.14
{:use-macros nil, :excludes #{}, :name instaparse.line-col, :imports nil, :requires {instaparse.transform instaparse.transform}, :uses nil, :defs {Cursor {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name instaparse.line-col/Cursor, :file "browser/instaparse/line_col.cljs", :end-column 18, :type true, :column 12, :internal-ctor true, :line 6, :record true, :end-line 6, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Cursor {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/line_col.cljs", :line 6, :column 12, :end-line 6, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([index line column]))}, :name instaparse.line-col/->Cursor, :variadic false, :file "browser/instaparse/line_col.cljs", :end-column 18, :method-params ([index line column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([index line column]))}, map->Cursor {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/line_col.cljs", :line 6, :column 12, :end-line 6, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__16486]))}, :name instaparse.line-col/map->Cursor, :variadic false, :file "browser/instaparse/line_col.cljs", :end-column 18, :method-params ([G__16486]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__16486]))}, advance-cursor {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/line_col.cljs", :line 8, :column 8, :end-line 8, :end-column 22, :private true, :arglists (quote ([cursor text new-index]))}, :private true, :name instaparse.line-col/advance-cursor, :variadic false, :file "browser/instaparse/line_col.cljs", :end-column 22, :method-params ([cursor text new-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 3, :fn-var true, :arglists (quote ([cursor text new-index]))}, make-line-col-fn {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/line_col.cljs", :line 18, :column 8, :end-line 18, :end-column 24, :private true, :arglists (quote ([text])), :doc "Given a string `text`, returns a function that takes an index into the string,\nand returns a cursor, including line and column information.  For efficiency,\ninputs must be fed into the function in increasing order."}, :private true, :name instaparse.line-col/make-line-col-fn, :variadic false, :file "browser/instaparse/line_col.cljs", :end-column 24, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "Given a string `text`, returns a function that takes an index into the string,\nand returns a cursor, including line and column information.  For efficiency,\ninputs must be fed into the function in increasing order."}, hiccup-add-line-col-spans {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/line_col.cljs", :line 28, :column 8, :end-line 28, :end-column 33, :private true, :arglists (quote ([line-col-fn parse-tree]))}, :private true, :name instaparse.line-col/hiccup-add-line-col-spans, :variadic false, :file "browser/instaparse/line_col.cljs", :end-column 33, :method-params ([line-col-fn parse-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line-col-fn parse-tree]))}, enlive-add-line-col-spans {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/line_col.cljs", :line 46, :column 8, :end-line 46, :end-column 33, :private true, :arglists (quote ([line-col-fn parse-tree]))}, :private true, :name instaparse.line-col/enlive-add-line-col-spans, :variadic false, :file "browser/instaparse/line_col.cljs", :end-column 33, :method-params ([line-col-fn parse-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([line-col-fn parse-tree]))}, add-line-col-spans {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/line_col.cljs", :line 64, :column 7, :end-line 64, :end-column 25, :arglists (quote ([text parse-tree])), :doc "Given a string `text` and a `parse-tree` for text, return parse tree\nwith its metadata annotated with line and column info. The info can\nthen be found in the metadata map under the keywords:\n \n:instaparse.gll/start-line, :instaparse.gll/start-column,\n:instaparse.gll/end-line, :instaparse.gll/end-column\n\nThe start is inclusive, the end is exclusive. Lines and columns are 1-based."}, :name instaparse.line-col/add-line-col-spans, :variadic false, :file "browser/instaparse/line_col.cljs", :end-column 25, :method-params ([text parse-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([text parse-tree])), :doc "Given a string `text` and a `parse-tree` for text, return parse tree\nwith its metadata annotated with line and column info. The info can\nthen be found in the metadata map under the keywords:\n \n:instaparse.gll/start-line, :instaparse.gll/start-column,\n:instaparse.gll/end-line, :instaparse.gll/end-column\n\nThe start is inclusive, the end is exclusive. Lines and columns are 1-based."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:index :else :instaparse.gll/end-line :instaparse.gll/start-column :instaparse.gll/end-index :content long index int :column :instaparse.gll/start-line :line :instaparse.gll/start-index column :instaparse.gll/end-column :tag line}, :order [:index :line :column index :tag int line long column :else :instaparse.gll/start-index :instaparse.gll/end-index :instaparse.gll/start-line :instaparse.gll/start-column :instaparse.gll/end-line :instaparse.gll/end-column :content]}, :doc nil}