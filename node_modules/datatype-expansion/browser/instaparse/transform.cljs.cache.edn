;; Analyzed by ClojureScript 1.9.14
{:use-macros nil, :excludes #{}, :name instaparse.transform, :imports nil, :requires {instaparse.gll instaparse.gll}, :uses nil, :defs {map-preserving-meta {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/transform.cljs", :line 5, :column 8, :end-line 5, :end-column 27, :private true, :arglists (quote ([f l]))}, :private true, :name instaparse.transform/map-preserving-meta, :variadic false, :file "browser/instaparse/transform.cljs", :end-column 27, :method-params ([f l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f l]))}, merge-meta {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/transform.cljs", :line 8, :column 7, :end-line 8, :end-column 17, :arglists (quote ([obj metamap])), :doc "This variation of the merge-meta in gll does nothing if obj is not\nsomething that can have a metamap attached."}, :name instaparse.transform/merge-meta, :variadic false, :file "browser/instaparse/transform.cljs", :end-column 17, :method-params ([obj metamap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj metamap])), :doc "This variation of the merge-meta in gll does nothing if obj is not\nsomething that can have a metamap attached."}, enlive-transform {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/transform.cljs", :line 16, :column 8, :end-line 16, :end-column 24, :private true, :arglists (quote ([transform-map parse-tree]))}, :private true, :name instaparse.transform/enlive-transform, :variadic false, :file "browser/instaparse/transform.cljs", :end-column 24, :method-params ([transform-map parse-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([transform-map parse-tree]))}, hiccup-transform {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/transform.cljs", :line 31, :column 8, :end-line 31, :end-column 24, :private true, :arglists (quote ([transform-map parse-tree]))}, :private true, :name instaparse.transform/hiccup-transform, :variadic false, :file "browser/instaparse/transform.cljs", :end-column 24, :method-params ([transform-map parse-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([transform-map parse-tree]))}, transform {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/transform.cljs", :line 46, :column 7, :end-line 46, :end-column 16, :arglists (quote ([transform-map parse-tree])), :doc "Takes a transform map and a parse tree (or seq of parse-trees).\n   A transform map is a mapping from tags to \n   functions that take a node's contents and return\n   a replacement for the node, i.e.,\n   {:node-tag (fn [child1 child2 ...] node-replacement),\n    :another-node-tag (fn [child1 child2 ...] node-replacement)}"}, :name instaparse.transform/transform, :variadic false, :file "browser/instaparse/transform.cljs", :end-column 16, :method-params ([transform-map parse-tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([transform-map parse-tree])), :doc "Takes a transform map and a parse tree (or seq of parse-trees).\n   A transform map is a mapping from tags to \n   functions that take a node's contents and return\n   a replacement for the node, i.e.,\n   {:node-tag (fn [child1 child2 ...] node-replacement),\n    :another-node-tag (fn [child1 child2 ...] node-replacement)}"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :content :tag}, :order [:tag :content :else]}, :doc "Functions to transform parse trees"}