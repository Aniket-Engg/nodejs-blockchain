;; Analyzed by ClojureScript 1.9.14
{:use-macros nil, :excludes #{cat}, :name instaparse.combinators-source, :imports nil, :requires {instaparse.reduction instaparse.reduction}, :uses {raw-non-terminal-reduction instaparse.reduction, singleton? instaparse.reduction, red instaparse.reduction, reduction-types instaparse.reduction}, :defs {unhide-tags {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 139, :column 7, :end-line 139, :end-column 18, :arglists (quote ([reduction-type grammar])), :doc "Recursively undoes the effect of hide-tag"}, :name instaparse.combinators-source/unhide-tags, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 18, :method-params ([reduction-type grammar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reduction-type grammar])), :doc "Recursively undoes the effect of hide-tag"}, auto-whitespace {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 175, :column 7, :end-line 175, :end-column 22, :arglists (quote ([grammar start grammar-ws start-ws]))}, :name instaparse.combinators-source/auto-whitespace, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 22, :method-params ([grammar start grammar-ws start-ws]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 4, :fn-var true, :arglists (quote ([grammar start grammar-ws start-ws]))}, string-ci {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 65, :column 7, :end-line 65, :end-column 16, :arglists (quote ([s])), :doc "Create a case-insensitive string terminal out of s"}, :name instaparse.combinators-source/string-ci, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Create a case-insensitive string terminal out of s"}, auto-whitespace-parser {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 158, :column 7, :end-line 158, :end-column 29, :arglists (quote ([parser ws-parser]))}, :name instaparse.combinators-source/auto-whitespace-parser, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 29, :method-params ([parser ws-parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parser ws-parser]))}, opt {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 12, :column 7, :end-line 12, :end-column 10, :arglists (quote ([parser])), :doc "Optional, i.e., parser?"}, :name instaparse.combinators-source/opt, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 10, :method-params ([parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parser])), :doc "Optional, i.e., parser?"}, neg {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 101, :column 7, :end-line 101, :end-column 10, :arglists (quote ([parser])), :doc "Negative lookahead, i.e., !parser"}, :name instaparse.combinators-source/neg, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 10, :method-params ([parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parser])), :doc "Negative lookahead, i.e., !parser"}, cat {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 53, :column 7, :end-line 53, :end-column 10, :arglists (quote ([& parsers])), :doc "Concatenation, i.e., parser1 parser2 ...", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(parsers)], :arglists ([& parsers]), :arglists-meta (nil)}}, :name instaparse.combinators-source/cat, :variadic true, :file "browser/instaparse/combinators_source.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(parsers)], :arglists ([& parsers]), :arglists-meta (nil)}, :method-params [(parsers)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 0, :fn-var true, :arglists ([& parsers]), :doc "Concatenation, i.e., parser1 parser2 ..."}, ord {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 43, :column 7, :end-line 43, :end-column 10, :arglists (quote ([] [parser1 & parsers])), :doc "Ordered choice, i.e., parser1 / parser2", :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([]), :arglists ([] [parser1 & parsers]), :arglists-meta (nil nil)}}, :name instaparse.combinators-source/ord, :variadic true, :file "browser/instaparse/combinators_source.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params ([]), :arglists ([] [parser1 & parsers]), :arglists-meta (nil nil)}, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists ([] [parser1 & parsers]), :doc "Ordered choice, i.e., parser1 / parser2"}, hide-tag {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 109, :column 7, :end-line 109, :end-column 15, :arglists (quote ([parser])), :doc "Hide the tag associated with this rule.  \n  Wrap this combinator around the entire right-hand side."}, :name instaparse.combinators-source/hide-tag, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 15, :method-params ([parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parser])), :doc "Hide the tag associated with this rule.  \n  Wrap this combinator around the entire right-hand side."}, alt {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 33, :column 7, :end-line 33, :end-column 10, :arglists (quote ([& parsers])), :doc "Alternation, i.e., parser1 | parser2 | parser3 | ...", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(parsers)], :arglists ([& parsers]), :arglists-meta (nil)}}, :name instaparse.combinators-source/alt, :variadic true, :file "browser/instaparse/combinators_source.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(parsers)], :arglists ([& parsers]), :arglists-meta (nil)}, :method-params [(parsers)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 0, :fn-var true, :arglists ([& parsers]), :doc "Alternation, i.e., parser1 | parser2 | parser3 | ..."}, ord2 {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 40, :column 8, :end-line 40, :end-column 12, :private true, :arglists (quote ([parser1 parser2]))}, :private true, :name instaparse.combinators-source/ord2, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 12, :method-params ([parser1 parser2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parser1 parser2]))}, look {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 97, :column 7, :end-line 97, :end-column 11, :arglists (quote ([parser])), :doc "Lookahead, i.e., &parser"}, :name instaparse.combinators-source/look, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 11, :method-params ([parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parser])), :doc "Lookahead, i.e., &parser"}, unhide-content {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 121, :column 7, :end-line 121, :end-column 21, :arglists (quote ([parser])), :doc "Recursively undoes the effect of hide on one parser"}, :name instaparse.combinators-source/unhide-content, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 21, :method-params ([parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parser])), :doc "Recursively undoes the effect of hide on one parser"}, nt {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 93, :column 7, :end-line 93, :end-column 9, :arglists (quote ([s])), :doc "Refers to a non-terminal defined by the grammar map"}, :name instaparse.combinators-source/nt, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 9, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Refers to a non-terminal defined by the grammar map"}, unhide-all-content {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 133, :column 7, :end-line 133, :end-column 25, :arglists (quote ([grammar])), :doc "Recursively undoes the effect of hide on all parsers in the grammar"}, :name instaparse.combinators-source/unhide-all-content, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 25, :method-params ([grammar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grammar])), :doc "Recursively undoes the effect of hide on all parsers in the grammar"}, rep {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 27, :column 7, :end-line 27, :end-column 10, :arglists (quote ([m n parser])), :doc "Between m and n repetitions"}, :name instaparse.combinators-source/rep, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 10, :method-params ([m n parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m n parser])), :doc "Between m and n repetitions"}, unicode-char {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 70, :column 7, :end-line 70, :end-column 19, :arglists (quote ([code-point] [lo hi])), :doc "Matches a Unicode code point or a range of code points", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([code-point] [lo hi]), :arglists ([code-point] [lo hi]), :arglists-meta (nil nil)}}, :name instaparse.combinators-source/unicode-char, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([code-point] [lo hi]), :arglists ([code-point] [lo hi]), :arglists-meta (nil nil)}, :method-params ([code-point] [lo hi]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists ([code-point] [lo hi]), :doc "Matches a Unicode code point or a range of code points"}, star {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 22, :column 7, :end-line 22, :end-column 11, :arglists (quote ([parser])), :doc "Zero or more, i.e., parser*"}, :name instaparse.combinators-source/star, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 11, :method-params ([parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parser])), :doc "Zero or more, i.e., parser*"}, string {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 60, :column 7, :end-line 60, :end-column 13, :arglists (quote ([s])), :doc "Create a string terminal out of s"}, :name instaparse.combinators-source/string, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Create a string terminal out of s"}, hide {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 105, :column 7, :end-line 105, :end-column 11, :arglists (quote ([parser])), :doc "Hide the result of parser, i.e., <parser>"}, :name instaparse.combinators-source/hide, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 11, :method-params ([parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parser])), :doc "Hide the result of parser, i.e., <parser>"}, regexp->str {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 78, :column 8, :end-line 78, :end-column 19, :private true, :arglists (quote ([r])), :doc "(str regexp) in clojurescript puts slashes around the result, unlike\n   in clojure. Work around that."}, :private true, :name instaparse.combinators-source/regexp->str, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 19, :method-params ([r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([r])), :doc "(str regexp) in clojurescript puts slashes around the result, unlike\n   in clojure. Work around that."}, unhide-all {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 147, :column 7, :end-line 147, :end-column 17, :arglists (quote ([reduction-type grammar])), :doc "Recursively undoes the effect of both hide and hide-tag"}, :name instaparse.combinators-source/unhide-all, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 17, :method-params ([reduction-type grammar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([reduction-type grammar])), :doc "Recursively undoes the effect of both hide and hide-tag"}, regexp {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 87, :column 7, :end-line 87, :end-column 13, :arglists (quote ([r])), :doc "Create a regexp terminal out of regular expression r"}, :name instaparse.combinators-source/regexp, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 13, :method-params ([r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([r])), :doc "Create a regexp terminal out of regular expression r"}, Epsilon {:name instaparse.combinators-source/Epsilon, :file "browser/instaparse/combinators_source.cljs", :line 10, :column 1, :end-line 10, :end-column 13, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 10, :column 6, :end-line 10, :end-column 13}}, plus {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 17, :column 7, :end-line 17, :end-column 11, :arglists (quote ([parser])), :doc "One or more, i.e., parser+"}, :name instaparse.combinators-source/plus, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 11, :method-params ([parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parser])), :doc "One or more, i.e., parser+"}, hidden-tag? {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/combinators_source.cljs", :line 116, :column 7, :end-line 116, :end-column 18, :arglists (quote ([parser])), :doc "Tests whether parser was created with hide-tag combinator"}, :name instaparse.combinators-source/hidden-tag?, :variadic false, :file "browser/instaparse/combinators_source.cljs", :end-column 18, :method-params ([parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parser])), :doc "Tests whether parser was created with hide-tag combinator"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:neg :parser2 :cat :min :ord :else :alt :look :nt :rep :star :string :lo :hide :parser :regexp :parser1 :keyword :max :red :plus :epsilon :tag :parsers :string-ci :hi :char :opt}, :order [:tag :epsilon :parser :opt :plus :star :min :max :rep :else :parsers :alt :parser1 :parser2 :ord :cat :string :string-ci :lo :hi :char :regexp :keyword :nt :look :neg :hide :red]}, :doc "This is the underlying implementation of the various combinators."}