;; Analyzed by ClojureScript 1.9.14
{:use-macros nil, :excludes #{cat}, :name instaparse.abnf, :imports nil, :requires {t instaparse.transform, instaparse.combinators-source instaparse.combinators-source, gll instaparse.gll, cfg instaparse.cfg, instaparse.reduction instaparse.reduction, instaparse.transform instaparse.transform, instaparse.cfg instaparse.cfg, goog.string.format goog.string.format, instaparse.gll instaparse.gll, red instaparse.reduction}, :uses {string-ci instaparse.combinators-source, opt instaparse.combinators-source, neg instaparse.combinators-source, cat instaparse.combinators-source, ord instaparse.combinators-source, hide-tag instaparse.combinators-source, alt instaparse.combinators-source, look instaparse.combinators-source, nt instaparse.combinators-source, rep instaparse.combinators-source, unicode-char instaparse.combinators-source, star instaparse.combinators-source, string instaparse.combinators-source, hide instaparse.combinators-source, regexp instaparse.combinators-source, Epsilon instaparse.combinators-source, plus instaparse.combinators-source}, :defs {alt-preserving-hide-tag {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 119, :column 7, :end-line 119, :end-column 30, :arglists (quote ([p1 p2]))}, :name instaparse.abnf/alt-preserving-hide-tag, :variadic false, :file "browser/instaparse/abnf.cljs", :end-column 30, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, *case-insensitive* {:name instaparse.abnf/*case-insensitive*, :file "browser/instaparse/abnf.cljs", :line 13, :column 1, :end-line 13, :end-column 34, :dynamic true, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 13, :column 16, :end-line 13, :end-column 34, :dynamic true}, :doc "This is normally set to false, in which case the non-terminals\nare treated as case-sensitive, which is NOT the norm\nfor ABNF grammars. If you really want case-insensitivity,\nbind this to true, in which case all non-terminals\nwill be converted to upper-case internally (which\nyou'll have to keep in mind when transforming)."}, abnf {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 193, :column 7, :end-line 193, :end-column 11, :arglists (quote ([spec])), :doc "Takes an ABNF grammar specification string and returns the combinator version.\n  If you give it the right-hand side of a rule, it will return the combinator equivalent.\n  If you give it a series of rules, it will give you back a grammar map.   \n  Useful for combining with other combinators."}, :name instaparse.abnf/abnf, :variadic false, :file "browser/instaparse/abnf.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "Takes an ABNF grammar specification string and returns the combinator version.\n  If you give it the right-hand side of a rule, it will return the combinator equivalent.\n  If you give it a series of rules, it will give you back a grammar map.   \n  Useful for combining with other combinators."}, get-char-combinator {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 91, :column 7, :end-line 91, :end-column 26, :arglists (quote ([& nums])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nums)], :arglists ([& nums]), :arglists-meta (nil)}}, :name instaparse.abnf/get-char-combinator, :variadic true, :file "browser/instaparse/abnf.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nums)], :arglists ([& nums]), :arglists-meta (nil)}, :method-params [(nums)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 0, :fn-var true, :arglists ([& nums])}, abnf-parser {:name instaparse.abnf/abnf-parser, :file "browser/instaparse/abnf.cljs", :line 186, :column 1, :end-line 186, :end-column 17, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 186, :column 6, :end-line 186, :end-column 17}}, hide-tag? {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 114, :column 7, :end-line 114, :end-column 16, :arglists (quote ([p])), :doc "Tests whether parser was constructed with hide-tag"}, :name instaparse.abnf/hide-tag?, :variadic false, :file "browser/instaparse/abnf.cljs", :end-column 16, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p])), :doc "Tests whether parser was constructed with hide-tag"}, abnf-transformer {:name instaparse.abnf/abnf-transformer, :file "browser/instaparse/abnf.cljs", :line 132, :column 1, :end-line 132, :end-column 22, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 132, :column 6, :end-line 132, :end-column 22}}, abnf-core {:name instaparse.abnf/abnf-core, :file "browser/instaparse/abnf.cljs", :line 22, :column 1, :end-line 22, :end-column 15, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 22, :column 6, :end-line 22, :end-column 15}}, format {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 86, :column 7, :end-line 86, :end-column 13, :arglists (quote ([fmt & args])), :doc "Formats a string using goog.string.format.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}}, :name instaparse.abnf/format, :variadic true, :file "browser/instaparse/abnf.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fmt args)], :arglists ([fmt & args]), :arglists-meta (nil)}, :method-params [(fmt args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists ([fmt & args]), :doc "Formats a string using goog.string.format."}, rules->grammar-map {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 189, :column 7, :end-line 189, :end-column 25, :arglists (quote ([rules]))}, :name instaparse.abnf/rules->grammar-map, :variadic false, :file "browser/instaparse/abnf.cljs", :end-column 25, :method-params ([rules]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rules]))}, build-parser {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 212, :column 7, :end-line 212, :end-column 19, :arglists (quote ([spec output-format]))}, :name instaparse.abnf/build-parser, :variadic false, :file "browser/instaparse/abnf.cljs", :end-column 19, :method-params ([spec output-format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec output-format]))}, abnf-grammar {:name instaparse.abnf/abnf-grammar, :file "browser/instaparse/abnf.cljs", :line 44, :column 1, :end-line 44, :end-column 18, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 44, :column 6, :end-line 44, :end-column 18}}, project {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 99, :column 7, :end-line 99, :end-column 14, :arglists (quote ([m ks])), :doc "Restricts map to certain keys"}, :name instaparse.abnf/project, :variadic false, :file "browser/instaparse/abnf.cljs", :end-column 14, :method-params ([m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ks])), :doc "Restricts map to certain keys"}, merge-core {:protocol-inline nil, :meta {:file "/Users/antoniogarrote/Development/raml-parser-toolbelt/tools/datatype-expansion/browser/instaparse/abnf.cljs", :line 107, :column 7, :end-line 107, :end-column 17, :arglists (quote ([grammar-map])), :doc "Merges abnf-core map in with parsed grammar map"}, :name instaparse.abnf/merge-core, :variadic false, :file "browser/instaparse/abnf.cljs", :end-column 17, :method-params ([grammar-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grammar-map])), :doc "Merges abnf-core map in with parsed grammar map"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:neg :CRLF :HTAB :hide-tag-rule :LWSP :LF :else :look :bin-char :start-production :rule :rulename-right :VCHAR :DIGIT :grammar :output-format :SP :NUM :char-val :hiccup :hide :high :HEXDIG :CTL :option :hex-char :DQUOTE :bin-val :dec-val :concatenation :alternation :regexp :repetition :WSP :rulename-left :red :CR :OCTET :rulelist :low :repeat :ALPHA :hex-val :CHAR :BIT :dec-char}, :order [:CRLF :HTAB :LWSP :LF :VCHAR :DIGIT :SP :HEXDIG :CTL :DQUOTE :WSP :CR :OCTET :ALPHA :CHAR :BIT :else :red :neg :hide-tag-rule :look :bin-char :rule :rulename-right :NUM :char-val :hide :option :hex-char :bin-val :dec-val :concatenation :alternation :regexp :repetition :rulename-left :repeat :hex-val :dec-char :low :high :hiccup :rulelist :grammar :start-production :output-format]}, :doc "This is the context free grammar that recognizes ABNF notation."}