;; Analyzed by ClojureScript 1.9.14
{:use-macros nil, :excludes #{}, :name instaparse.cfg, :imports nil, :requires {instaparse.combinators-source instaparse.combinators-source, instaparse.reduction instaparse.reduction, instaparse.gll instaparse.gll, str clojure.string, clojure.string clojure.string, reader cljs.reader, cljs.reader cljs.reader}, :uses {string-ci instaparse.combinators-source, opt instaparse.combinators-source, neg instaparse.combinators-source, cat instaparse.combinators-source, ord instaparse.combinators-source, hide-tag instaparse.combinators-source, alt instaparse.combinators-source, look instaparse.combinators-source, nt instaparse.combinators-source, rep instaparse.combinators-source, star instaparse.combinators-source, string instaparse.combinators-source, hide instaparse.combinators-source, apply-standard-reductions instaparse.reduction, regexp instaparse.combinators-source, Epsilon instaparse.combinators-source, parse instaparse.gll, plus instaparse.combinators-source}, :defs {tag {:name instaparse.cfg/tag, :file "node/instaparse/cfg.cljs", :line 135, :column 1, :end-line 135, :end-column 9, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 135, :column 6, :end-line 135, :end-column 9}}, contents {:name instaparse.cfg/contents, :file "node/instaparse/cfg.cljs", :line 136, :column 1, :end-line 136, :end-column 14, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 136, :column 6, :end-line 136, :end-column 14}}, build-rule {:protocol-inline nil, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 195, :column 7, :end-line 195, :end-column 17, :arglists (quote ([tree])), :doc "Convert one parsed rule from the grammar into combinators"}, :name instaparse.cfg/build-rule, :variadic false, :file "node/instaparse/cfg.cljs", :end-column 17, :method-params ([tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tree])), :doc "Convert one parsed rule from the grammar into combinators"}, double-quoted-regexp {:name instaparse.cfg/double-quoted-regexp, :file "node/instaparse/cfg.cljs", :line 18, :column 1, :end-line 18, :end-column 26, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 18, :column 6, :end-line 18, :end-column 26}}, seq-nt {:protocol-inline nil, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 221, :column 7, :end-line 221, :end-column 13, :arglists (quote ([parser])), :doc "Returns a sequence of all non-terminals in a parser built from combinators."}, :name instaparse.cfg/seq-nt, :variadic false, :file "node/instaparse/cfg.cljs", :end-column 13, :method-params ([parser]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 1, :fn-var true, :arglists (quote ([parser])), :doc "Returns a sequence of all non-terminals in a parser built from combinators."}, escape {:protocol-inline nil, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 141, :column 7, :end-line 141, :end-column 13, :arglists (quote ([s])), :doc "Converts escaped single-quotes to unescaped, and unescaped double-quotes to escaped"}, :name instaparse.cfg/escape, :variadic false, :file "node/instaparse/cfg.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts escaped single-quotes to unescaped, and unescaped double-quotes to escaped"}, process-regexp {:protocol-inline nil, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 179, :column 7, :end-line 179, :end-column 21, :arglists (quote ([s])), :doc "Converts single quoted regexp to double-quoted"}, :name instaparse.cfg/process-regexp, :variadic false, :file "node/instaparse/cfg.cljs", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts single quoted regexp to double-quoted"}, cfg {:name instaparse.cfg/cfg, :file "node/instaparse/cfg.cljs", :line 24, :column 1, :end-line 24, :end-column 9, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 24, :column 6, :end-line 24, :end-column 9}}, double-quoted-string {:name instaparse.cfg/double-quoted-string, :file "node/instaparse/cfg.cljs", :line 17, :column 1, :end-line 17, :end-column 26, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 17, :column 6, :end-line 17, :end-column 26}}, ws {:name instaparse.cfg/ws, :file "node/instaparse/cfg.cljs", :line 20, :column 1, :end-line 20, :end-column 8, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 20, :column 6, :end-line 20, :end-column 8}}, content {:name instaparse.cfg/content, :file "node/instaparse/cfg.cljs", :line 137, :column 1, :end-line 137, :end-column 13, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 137, :column 6, :end-line 137, :end-column 13}}, build-parser {:protocol-inline nil, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 241, :column 7, :end-line 241, :end-column 19, :arglists (quote ([spec output-format]))}, :name instaparse.cfg/build-parser, :variadic false, :file "node/instaparse/cfg.cljs", :end-column 19, :method-params ([spec output-format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec output-format]))}, safe-read-string {:protocol-inline nil, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 156, :column 7, :end-line 156, :end-column 23, :arglists (quote ([s]))}, :name instaparse.cfg/safe-read-string, :variadic false, :file "node/instaparse/cfg.cljs", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, check-grammar {:protocol-inline nil, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 232, :column 7, :end-line 232, :end-column 20, :arglists (quote ([grammar-map])), :doc "Throw error if grammar uses any invalid non-terminals in its productions"}, :name instaparse.cfg/check-grammar, :variadic false, :file "node/instaparse/cfg.cljs", :end-column 20, :method-params ([grammar-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grammar-map])), :doc "Throw error if grammar uses any invalid non-terminals in its productions"}, *case-insensitive-literals* {:name instaparse.cfg/*case-insensitive-literals*, :file "node/instaparse/cfg.cljs", :line 11, :column 1, :end-line 11, :end-column 43, :dynamic true, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 11, :column 16, :end-line 11, :end-column 43, :dynamic true}, :doc "When true all string literal terminals in built grammar will be treated as case insensitive"}, inside-comment {:name instaparse.cfg/inside-comment, :file "node/instaparse/cfg.cljs", :line 19, :column 1, :end-line 19, :end-column 20, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 19, :column 6, :end-line 19, :end-column 20}}, single-quoted-regexp {:name instaparse.cfg/single-quoted-regexp, :file "node/instaparse/cfg.cljs", :line 16, :column 1, :end-line 16, :end-column 26, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 16, :column 6, :end-line 16, :end-column 26}}, process-string {:protocol-inline nil, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 167, :column 7, :end-line 167, :end-column 21, :arglists (quote ([s])), :doc "Converts single quoted string to double-quoted"}, :name instaparse.cfg/process-string, :variadic false, :file "node/instaparse/cfg.cljs", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts single quoted string to double-quoted"}, ebnf {:protocol-inline nil, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 259, :column 7, :end-line 259, :end-column 11, :arglists (quote ([spec])), :doc "Takes an EBNF grammar specification string and returns the combinator version.\nIf you give it the right-hand side of a rule, it will return the combinator equivalent.\nIf you give it a series of rules, it will give you back a grammar map.   \nUseful for combining with other combinators."}, :name instaparse.cfg/ebnf, :variadic false, :file "node/instaparse/cfg.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "Takes an EBNF grammar specification string and returns the combinator version.\nIf you give it the right-hand side of a rule, it will return the combinator equivalent.\nIf you give it a series of rules, it will give you back a grammar map.   \nUseful for combining with other combinators."}, build-parser-from-combinators {:protocol-inline nil, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 252, :column 7, :end-line 252, :end-column 36, :arglists (quote ([grammar-map output-format start-production]))}, :name instaparse.cfg/build-parser-from-combinators, :variadic false, :file "node/instaparse/cfg.cljs", :end-column 36, :method-params ([grammar-map output-format start-production]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 3, :fn-var true, :arglists (quote ([grammar-map output-format start-production]))}, opt-whitespace {:name instaparse.cfg/opt-whitespace, :file "node/instaparse/cfg.cljs", :line 22, :column 1, :end-line 22, :end-column 20, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 22, :column 6, :end-line 22, :end-column 20}}, single-quoted-string {:name instaparse.cfg/single-quoted-string, :file "node/instaparse/cfg.cljs", :line 15, :column 1, :end-line 15, :end-column 26, :meta {:file "/Users/christianmule/projects/raml/raml-parser-toolbelt/tools/datatype-expansion/node/instaparse/cfg.cljs", :line 15, :column 6, :end-line 15, :end-column 26}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:neg :parser2 :cat :ord :rule-separator :alt :look :start-production :rule :nt :grammar :hide-nt :output-format :inside-comment :star :string :hiccup :rules :hide :paren :alt-or-ord :parser :regexp :parser1 :keyword :factor :comment :plus :epsilon :opt-whitespace :tag :parsers :opt}, :order [:opt-whitespace :hiccup :neg :cat :ord :rule-separator :alt :look :rule :nt :hide-nt :inside-comment :star :string :rules :hide :paren :alt-or-ord :regexp :factor :comment :plus :epsilon :opt :tag :parser :parsers :parser1 :parser2 :keyword :grammar :start-production :output-format]}, :doc "This is the context free grammar that recognizes context free grammars."}