// Compiled by ClojureScript 1.9.14 {:target :nodejs}
goog.provide('cljs.core.async');
goog.require('cljs.core');
goog.require('cljs.core.async.impl.channels');
goog.require('cljs.core.async.impl.dispatch');
goog.require('cljs.core.async.impl.ioc_helpers');
goog.require('cljs.core.async.impl.protocols');
goog.require('cljs.core.async.impl.buffers');
goog.require('cljs.core.async.impl.timers');
cljs.core.async.fn_handler = (function cljs$core$async$fn_handler(var_args){
var args17959 = [];
var len__7291__auto___17965 = arguments.length;
var i__7292__auto___17966 = (0);
while(true){
if((i__7292__auto___17966 < len__7291__auto___17965)){
args17959.push((arguments[i__7292__auto___17966]));

var G__17967 = (i__7292__auto___17966 + (1));
i__7292__auto___17966 = G__17967;
continue;
} else {
}
break;
}

var G__17961 = args17959.length;
switch (G__17961) {
case 1:
return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args17959.length)].join('')));

}
});

cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1 = (function (f){
return cljs.core.async.fn_handler.call(null,f,true);
});

cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2 = (function (f,blockable){
if(typeof cljs.core.async.t_cljs$core$async17962 !== 'undefined'){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Handler}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async17962 = (function (f,blockable,meta17963){
this.f = f;
this.blockable = blockable;
this.meta17963 = meta17963;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
cljs.core.async.t_cljs$core$async17962.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_17964,meta17963__$1){
var self__ = this;
var _17964__$1 = this;
return (new cljs.core.async.t_cljs$core$async17962(self__.f,self__.blockable,meta17963__$1));
});

cljs.core.async.t_cljs$core$async17962.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_17964){
var self__ = this;
var _17964__$1 = this;
return self__.meta17963;
});

cljs.core.async.t_cljs$core$async17962.prototype.cljs$core$async$impl$protocols$Handler$ = true;

cljs.core.async.t_cljs$core$async17962.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return true;
});

cljs.core.async.t_cljs$core$async17962.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.blockable;
});

cljs.core.async.t_cljs$core$async17962.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.f;
});

cljs.core.async.t_cljs$core$async17962.getBasis = (function (){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"blockable","blockable",-28395259,null),new cljs.core.Symbol(null,"meta17963","meta17963",1991536021,null)], null);
});

cljs.core.async.t_cljs$core$async17962.cljs$lang$type = true;

cljs.core.async.t_cljs$core$async17962.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async17962";

cljs.core.async.t_cljs$core$async17962.cljs$lang$ctorPrWriter = (function (this__6822__auto__,writer__6823__auto__,opt__6824__auto__){
return cljs.core._write.call(null,writer__6823__auto__,"cljs.core.async/t_cljs$core$async17962");
});

cljs.core.async.__GT_t_cljs$core$async17962 = (function cljs$core$async$__GT_t_cljs$core$async17962(f__$1,blockable__$1,meta17963){
return (new cljs.core.async.t_cljs$core$async17962(f__$1,blockable__$1,meta17963));
});

}

return (new cljs.core.async.t_cljs$core$async17962(f,blockable,cljs.core.PersistentArrayMap.EMPTY));
});

cljs.core.async.fn_handler.cljs$lang$maxFixedArity = 2;
/**
 * Returns a fixed buffer of size n. When full, puts will block/park.
 */
cljs.core.async.buffer = (function cljs$core$async$buffer(n){
return cljs.core.async.impl.buffers.fixed_buffer.call(null,n);
});
/**
 * Returns a buffer of size n. When full, puts will complete but
 *   val will be dropped (no transfer).
 */
cljs.core.async.dropping_buffer = (function cljs$core$async$dropping_buffer(n){
return cljs.core.async.impl.buffers.dropping_buffer.call(null,n);
});
/**
 * Returns a buffer of size n. When full, puts will complete, and be
 *   buffered, but oldest elements in buffer will be dropped (not
 *   transferred).
 */
cljs.core.async.sliding_buffer = (function cljs$core$async$sliding_buffer(n){
return cljs.core.async.impl.buffers.sliding_buffer.call(null,n);
});
/**
 * Returns true if a channel created with buff will never block. That is to say,
 * puts into this buffer will never cause the buffer to be full. 
 */
cljs.core.async.unblocking_buffer_QMARK_ = (function cljs$core$async$unblocking_buffer_QMARK_(buff){
if(!((buff == null))){
if((false) || (buff.cljs$core$async$impl$protocols$UnblockingBuffer$)){
return true;
} else {
if((!buff.cljs$lang$protocol_mask$partition$)){
return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.async.impl.protocols.UnblockingBuffer,buff);
} else {
return false;
}
}
} else {
return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.async.impl.protocols.UnblockingBuffer,buff);
}
});
/**
 * Creates a channel with an optional buffer, an optional transducer (like (map f),
 *   (filter p) etc or a composition thereof), and an optional exception handler.
 *   If buf-or-n is a number, will create and use a fixed buffer of that size. If a
 *   transducer is supplied a buffer must be specified. ex-handler must be a
 *   fn of one argument - if an exception occurs during transformation it will be called
 *   with the thrown value as an argument, and any non-nil return value will be placed
 *   in the channel.
 */
cljs.core.async.chan = (function cljs$core$async$chan(var_args){
var args17971 = [];
var len__7291__auto___17974 = arguments.length;
var i__7292__auto___17975 = (0);
while(true){
if((i__7292__auto___17975 < len__7291__auto___17974)){
args17971.push((arguments[i__7292__auto___17975]));

var G__17976 = (i__7292__auto___17975 + (1));
i__7292__auto___17975 = G__17976;
continue;
} else {
}
break;
}

var G__17973 = args17971.length;
switch (G__17973) {
case 0:
return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args17971.length)].join('')));

}
});

cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = (function (){
return cljs.core.async.chan.call(null,null);
});

cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = (function (buf_or_n){
return cljs.core.async.chan.call(null,buf_or_n,null,null);
});

cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = (function (buf_or_n,xform){
return cljs.core.async.chan.call(null,buf_or_n,xform,null);
});

cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = (function (buf_or_n,xform,ex_handler){
var buf_or_n__$1 = ((cljs.core._EQ_.call(null,buf_or_n,(0)))?null:buf_or_n);
if(cljs.core.truth_(xform)){
if(cljs.core.truth_(buf_or_n__$1)){
} else {
throw (new Error([cljs.core.str("Assert failed: "),cljs.core.str("buffer must be supplied when transducer is"),cljs.core.str("\n"),cljs.core.str("buf-or-n")].join('')));
}
} else {
}

return cljs.core.async.impl.channels.chan.call(null,((typeof buf_or_n__$1 === 'number')?cljs.core.async.buffer.call(null,buf_or_n__$1):buf_or_n__$1),xform,ex_handler);
});

cljs.core.async.chan.cljs$lang$maxFixedArity = 3;
/**
 * Creates a promise channel with an optional transducer, and an optional
 *   exception-handler. A promise channel can take exactly one value that consumers
 *   will receive. Once full, puts complete but val is dropped (no transfer).
 *   Consumers will block until either a value is placed in the channel or the
 *   channel is closed. See chan for the semantics of xform and ex-handler.
 */
cljs.core.async.promise_chan = (function cljs$core$async$promise_chan(var_args){
var args17978 = [];
var len__7291__auto___17981 = arguments.length;
var i__7292__auto___17982 = (0);
while(true){
if((i__7292__auto___17982 < len__7291__auto___17981)){
args17978.push((arguments[i__7292__auto___17982]));

var G__17983 = (i__7292__auto___17982 + (1));
i__7292__auto___17982 = G__17983;
continue;
} else {
}
break;
}

var G__17980 = args17978.length;
switch (G__17980) {
case 0:
return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args17978.length)].join('')));

}
});

cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0 = (function (){
return cljs.core.async.promise_chan.call(null,null);
});

cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1 = (function (xform){
return cljs.core.async.promise_chan.call(null,xform,null);
});

cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2 = (function (xform,ex_handler){
return cljs.core.async.chan.call(null,cljs.core.async.impl.buffers.promise_buffer.call(null),xform,ex_handler);
});

cljs.core.async.promise_chan.cljs$lang$maxFixedArity = 2;
/**
 * Returns a channel that will close after msecs
 */
cljs.core.async.timeout = (function cljs$core$async$timeout(msecs){
return cljs.core.async.impl.timers.timeout.call(null,msecs);
});
/**
 * takes a val from port. Must be called inside a (go ...) block. Will
 *   return nil if closed. Will park if nothing is available.
 *   Returns true unless port is already closed
 */
cljs.core.async._LT__BANG_ = (function cljs$core$async$_LT__BANG_(port){
throw (new Error("<! used not in (go ...) block"));
});
/**
 * Asynchronously takes a val from port, passing to fn1. Will pass nil
 * if closed. If on-caller? (default true) is true, and value is
 * immediately available, will call fn1 on calling thread.
 * Returns nil.
 */
cljs.core.async.take_BANG_ = (function cljs$core$async$take_BANG_(var_args){
var args17985 = [];
var len__7291__auto___17988 = arguments.length;
var i__7292__auto___17989 = (0);
while(true){
if((i__7292__auto___17989 < len__7291__auto___17988)){
args17985.push((arguments[i__7292__auto___17989]));

var G__17990 = (i__7292__auto___17989 + (1));
i__7292__auto___17989 = G__17990;
continue;
} else {
}
break;
}

var G__17987 = args17985.length;
switch (G__17987) {
case 2:
return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args17985.length)].join('')));

}
});

cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (port,fn1){
return cljs.core.async.take_BANG_.call(null,port,fn1,true);
});

cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (port,fn1,on_caller_QMARK_){
var ret = cljs.core.async.impl.protocols.take_BANG_.call(null,port,cljs.core.async.fn_handler.call(null,fn1));
if(cljs.core.truth_(ret)){
var val_17992 = cljs.core.deref.call(null,ret);
if(cljs.core.truth_(on_caller_QMARK_)){
fn1.call(null,val_17992);
} else {
cljs.core.async.impl.dispatch.run.call(null,((function (val_17992,ret){
return (function (){
return fn1.call(null,val_17992);
});})(val_17992,ret))
);
}
} else {
}

return null;
});

cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.async.nop = (function cljs$core$async$nop(_){
return null;
});
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null,cljs.core.async.nop);
/**
 * puts a val into port. nil values are not allowed. Must be called
 *   inside a (go ...) block. Will park if no buffer space is available.
 *   Returns true unless port is already closed.
 */
cljs.core.async._GT__BANG_ = (function cljs$core$async$_GT__BANG_(port,val){
throw (new Error(">! used not in (go ...) block"));
});
/**
 * Asynchronously puts a val into port, calling fn0 (if supplied) when
 * complete. nil values are not allowed. Will throw if closed. If
 * on-caller? (default true) is true, and the put is immediately
 * accepted, will call fn0 on calling thread.  Returns nil.
 */
cljs.core.async.put_BANG_ = (function cljs$core$async$put_BANG_(var_args){
var args17993 = [];
var len__7291__auto___17996 = arguments.length;
var i__7292__auto___17997 = (0);
while(true){
if((i__7292__auto___17997 < len__7291__auto___17996)){
args17993.push((arguments[i__7292__auto___17997]));

var G__17998 = (i__7292__auto___17997 + (1));
i__7292__auto___17997 = G__17998;
continue;
} else {
}
break;
}

var G__17995 = args17993.length;
switch (G__17995) {
case 2:
return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args17993.length)].join('')));

}
});

cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (port,val){
var temp__4655__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null,port,val,cljs.core.async.fhnop);
if(cljs.core.truth_(temp__4655__auto__)){
var ret = temp__4655__auto__;
return cljs.core.deref.call(null,ret);
} else {
return true;
}
});

cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (port,val,fn1){
return cljs.core.async.put_BANG_.call(null,port,val,fn1,true);
});

cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = (function (port,val,fn1,on_caller_QMARK_){
var temp__4655__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null,port,val,cljs.core.async.fn_handler.call(null,fn1));
if(cljs.core.truth_(temp__4655__auto__)){
var retb = temp__4655__auto__;
var ret = cljs.core.deref.call(null,retb);
if(cljs.core.truth_(on_caller_QMARK_)){
fn1.call(null,ret);
} else {
cljs.core.async.impl.dispatch.run.call(null,((function (ret,retb,temp__4655__auto__){
return (function (){
return fn1.call(null,ret);
});})(ret,retb,temp__4655__auto__))
);
}

return ret;
} else {
return true;
}
});

cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.async.close_BANG_ = (function cljs$core$async$close_BANG_(port){
return cljs.core.async.impl.protocols.close_BANG_.call(null,port);
});
cljs.core.async.random_array = (function cljs$core$async$random_array(n){
var a = (new Array(n));
var n__7131__auto___18000 = n;
var x_18001 = (0);
while(true){
if((x_18001 < n__7131__auto___18000)){
(a[x_18001] = (0));

var G__18002 = (x_18001 + (1));
x_18001 = G__18002;
continue;
} else {
}
break;
}

var i = (1);
while(true){
if(cljs.core._EQ_.call(null,i,n)){
return a;
} else {
var j = cljs.core.rand_int.call(null,i);
(a[i] = (a[j]));

(a[j] = i);

var G__18003 = (i + (1));
i = G__18003;
continue;
}
break;
}
});
cljs.core.async.alt_flag = (function cljs$core$async$alt_flag(){
var flag = cljs.core.atom.call(null,true);
if(typeof cljs.core.async.t_cljs$core$async18007 !== 'undefined'){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Handler}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async18007 = (function (alt_flag,flag,meta18008){
this.alt_flag = alt_flag;
this.flag = flag;
this.meta18008 = meta18008;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
cljs.core.async.t_cljs$core$async18007.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = ((function (flag){
return (function (_18009,meta18008__$1){
var self__ = this;
var _18009__$1 = this;
return (new cljs.core.async.t_cljs$core$async18007(self__.alt_flag,self__.flag,meta18008__$1));
});})(flag))
;

cljs.core.async.t_cljs$core$async18007.prototype.cljs$core$IMeta$_meta$arity$1 = ((function (flag){
return (function (_18009){
var self__ = this;
var _18009__$1 = this;
return self__.meta18008;
});})(flag))
;

cljs.core.async.t_cljs$core$async18007.prototype.cljs$core$async$impl$protocols$Handler$ = true;

cljs.core.async.t_cljs$core$async18007.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = ((function (flag){
return (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.deref.call(null,self__.flag);
});})(flag))
;

cljs.core.async.t_cljs$core$async18007.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = ((function (flag){
return (function (_){
var self__ = this;
var ___$1 = this;
return true;
});})(flag))
;

cljs.core.async.t_cljs$core$async18007.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = ((function (flag){
return (function (_){
var self__ = this;
var ___$1 = this;
cljs.core.reset_BANG_.call(null,self__.flag,null);

return true;
});})(flag))
;

cljs.core.async.t_cljs$core$async18007.getBasis = ((function (flag){
return (function (){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,"alt-flag","alt-flag",-1794972754,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"private","private",-558947994),true,new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),new cljs.core.Symbol(null,"flag","flag",-1565787888,null),new cljs.core.Symbol(null,"meta18008","meta18008",-1766029569,null)], null);
});})(flag))
;

cljs.core.async.t_cljs$core$async18007.cljs$lang$type = true;

cljs.core.async.t_cljs$core$async18007.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async18007";

cljs.core.async.t_cljs$core$async18007.cljs$lang$ctorPrWriter = ((function (flag){
return (function (this__6822__auto__,writer__6823__auto__,opt__6824__auto__){
return cljs.core._write.call(null,writer__6823__auto__,"cljs.core.async/t_cljs$core$async18007");
});})(flag))
;

cljs.core.async.__GT_t_cljs$core$async18007 = ((function (flag){
return (function cljs$core$async$alt_flag_$___GT_t_cljs$core$async18007(alt_flag__$1,flag__$1,meta18008){
return (new cljs.core.async.t_cljs$core$async18007(alt_flag__$1,flag__$1,meta18008));
});})(flag))
;

}

return (new cljs.core.async.t_cljs$core$async18007(cljs$core$async$alt_flag,flag,cljs.core.PersistentArrayMap.EMPTY));
});
cljs.core.async.alt_handler = (function cljs$core$async$alt_handler(flag,cb){
if(typeof cljs.core.async.t_cljs$core$async18013 !== 'undefined'){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Handler}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async18013 = (function (alt_handler,flag,cb,meta18014){
this.alt_handler = alt_handler;
this.flag = flag;
this.cb = cb;
this.meta18014 = meta18014;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
cljs.core.async.t_cljs$core$async18013.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_18015,meta18014__$1){
var self__ = this;
var _18015__$1 = this;
return (new cljs.core.async.t_cljs$core$async18013(self__.alt_handler,self__.flag,self__.cb,meta18014__$1));
});

cljs.core.async.t_cljs$core$async18013.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_18015){
var self__ = this;
var _18015__$1 = this;
return self__.meta18014;
});

cljs.core.async.t_cljs$core$async18013.prototype.cljs$core$async$impl$protocols$Handler$ = true;

cljs.core.async.t_cljs$core$async18013.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.active_QMARK_.call(null,self__.flag);
});

cljs.core.async.t_cljs$core$async18013.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return true;
});

cljs.core.async.t_cljs$core$async18013.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
cljs.core.async.impl.protocols.commit.call(null,self__.flag);

return self__.cb;
});

cljs.core.async.t_cljs$core$async18013.getBasis = (function (){
return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,"alt-handler","alt-handler",963786170,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"private","private",-558947994),true,new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"flag","flag",-1565787888,null),new cljs.core.Symbol(null,"cb","cb",-2064487928,null)], null)))], null)),new cljs.core.Symbol(null,"flag","flag",-1565787888,null),new cljs.core.Symbol(null,"cb","cb",-2064487928,null),new cljs.core.Symbol(null,"meta18014","meta18014",283255498,null)], null);
});

cljs.core.async.t_cljs$core$async18013.cljs$lang$type = true;

cljs.core.async.t_cljs$core$async18013.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async18013";

cljs.core.async.t_cljs$core$async18013.cljs$lang$ctorPrWriter = (function (this__6822__auto__,writer__6823__auto__,opt__6824__auto__){
return cljs.core._write.call(null,writer__6823__auto__,"cljs.core.async/t_cljs$core$async18013");
});

cljs.core.async.__GT_t_cljs$core$async18013 = (function cljs$core$async$alt_handler_$___GT_t_cljs$core$async18013(alt_handler__$1,flag__$1,cb__$1,meta18014){
return (new cljs.core.async.t_cljs$core$async18013(alt_handler__$1,flag__$1,cb__$1,meta18014));
});

}

return (new cljs.core.async.t_cljs$core$async18013(cljs$core$async$alt_handler,flag,cb,cljs.core.PersistentArrayMap.EMPTY));
});
/**
 * returns derefable [val port] if immediate, nil if enqueued
 */
cljs.core.async.do_alts = (function cljs$core$async$do_alts(fret,ports,opts){
var flag = cljs.core.async.alt_flag.call(null);
var n = cljs.core.count.call(null,ports);
var idxs = cljs.core.async.random_array.call(null,n);
var priority = new cljs.core.Keyword(null,"priority","priority",1431093715).cljs$core$IFn$_invoke$arity$1(opts);
var ret = (function (){var i = (0);
while(true){
if((i < n)){
var idx = (cljs.core.truth_(priority)?i:(idxs[i]));
var port = cljs.core.nth.call(null,ports,idx);
var wport = ((cljs.core.vector_QMARK_.call(null,port))?port.call(null,(0)):null);
var vbox = (cljs.core.truth_(wport)?(function (){var val = port.call(null,(1));
return cljs.core.async.impl.protocols.put_BANG_.call(null,wport,val,cljs.core.async.alt_handler.call(null,flag,((function (i,val,idx,port,wport,flag,n,idxs,priority){
return (function (p1__18016_SHARP_){
return fret.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18016_SHARP_,wport], null));
});})(i,val,idx,port,wport,flag,n,idxs,priority))
));
})():cljs.core.async.impl.protocols.take_BANG_.call(null,port,cljs.core.async.alt_handler.call(null,flag,((function (i,idx,port,wport,flag,n,idxs,priority){
return (function (p1__18017_SHARP_){
return fret.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18017_SHARP_,port], null));
});})(i,idx,port,wport,flag,n,idxs,priority))
)));
if(cljs.core.truth_(vbox)){
return cljs.core.async.impl.channels.box.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null,vbox),(function (){var or__6216__auto__ = wport;
if(cljs.core.truth_(or__6216__auto__)){
return or__6216__auto__;
} else {
return port;
}
})()], null));
} else {
var G__18018 = (i + (1));
i = G__18018;
continue;
}
} else {
return null;
}
break;
}
})();
var or__6216__auto__ = ret;
if(cljs.core.truth_(or__6216__auto__)){
return or__6216__auto__;
} else {
if(cljs.core.contains_QMARK_.call(null,opts,new cljs.core.Keyword(null,"default","default",-1987822328))){
var temp__4657__auto__ = (function (){var and__6204__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null,flag);
if(cljs.core.truth_(and__6204__auto__)){
return cljs.core.async.impl.protocols.commit.call(null,flag);
} else {
return and__6204__auto__;
}
})();
if(cljs.core.truth_(temp__4657__auto__)){
var got = temp__4657__auto__;
return cljs.core.async.impl.channels.box.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"default","default",-1987822328).cljs$core$IFn$_invoke$arity$1(opts),new cljs.core.Keyword(null,"default","default",-1987822328)], null));
} else {
return null;
}
} else {
return null;
}
}
});
/**
 * Completes at most one of several channel operations. Must be called
 * inside a (go ...) block. ports is a vector of channel endpoints,
 * which can be either a channel to take from or a vector of
 *   [channel-to-put-to val-to-put], in any combination. Takes will be
 *   made as if by <!, and puts will be made as if by >!. Unless
 *   the :priority option is true, if more than one port operation is
 *   ready a non-deterministic choice will be made. If no operation is
 *   ready and a :default value is supplied, [default-val :default] will
 *   be returned, otherwise alts! will park until the first operation to
 *   become ready completes. Returns [val port] of the completed
 *   operation, where val is the value taken for takes, and a
 *   boolean (true unless already closed, as per put!) for puts.
 * 
 *   opts are passed as :key val ... Supported options:
 * 
 *   :default val - the value to use if none of the operations are immediately ready
 *   :priority true - (default nil) when true, the operations will be tried in order.
 * 
 *   Note: there is no guarantee that the port exps or val exprs will be
 *   used, nor in what order should they be, so they should not be
 *   depended upon for side effects.
 */
cljs.core.async.alts_BANG_ = (function cljs$core$async$alts_BANG_(var_args){
var args__7298__auto__ = [];
var len__7291__auto___18024 = arguments.length;
var i__7292__auto___18025 = (0);
while(true){
if((i__7292__auto___18025 < len__7291__auto___18024)){
args__7298__auto__.push((arguments[i__7292__auto___18025]));

var G__18026 = (i__7292__auto___18025 + (1));
i__7292__auto___18025 = G__18026;
continue;
} else {
}
break;
}

var argseq__7299__auto__ = ((((1) < args__7298__auto__.length))?(new cljs.core.IndexedSeq(args__7298__auto__.slice((1)),(0),null)):null);
return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__7299__auto__);
});

cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (ports,p__18021){
var map__18022 = p__18021;
var map__18022__$1 = ((((!((map__18022 == null)))?((((map__18022.cljs$lang$protocol_mask$partition0$ & (64))) || (map__18022.cljs$core$ISeq$))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__18022):map__18022);
var opts = map__18022__$1;
throw (new Error("alts! used not in (go ...) block"));
});

cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = (1);

cljs.core.async.alts_BANG_.cljs$lang$applyTo = (function (seq18019){
var G__18020 = cljs.core.first.call(null,seq18019);
var seq18019__$1 = cljs.core.next.call(null,seq18019);
return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__18020,seq18019__$1);
});
/**
 * Puts a val into port if it's possible to do so immediately.
 *   nil values are not allowed. Never blocks. Returns true if offer succeeds.
 */
cljs.core.async.offer_BANG_ = (function cljs$core$async$offer_BANG_(port,val){
var ret = cljs.core.async.impl.protocols.put_BANG_.call(null,port,val,cljs.core.async.fn_handler.call(null,cljs.core.async.nop,false));
if(cljs.core.truth_(ret)){
return cljs.core.deref.call(null,ret);
} else {
return null;
}
});
/**
 * Takes a val from port if it's possible to do so immediately.
 *   Never blocks. Returns value if successful, nil otherwise.
 */
cljs.core.async.poll_BANG_ = (function cljs$core$async$poll_BANG_(port){
var ret = cljs.core.async.impl.protocols.take_BANG_.call(null,port,cljs.core.async.fn_handler.call(null,cljs.core.async.nop,false));
if(cljs.core.truth_(ret)){
return cljs.core.deref.call(null,ret);
} else {
return null;
}
});
/**
 * Takes elements from the from channel and supplies them to the to
 * channel. By default, the to channel will be closed when the from
 * channel closes, but can be determined by the close?  parameter. Will
 * stop consuming the from channel if the to channel closes
 */
cljs.core.async.pipe = (function cljs$core$async$pipe(var_args){
var args18027 = [];
var len__7291__auto___18077 = arguments.length;
var i__7292__auto___18078 = (0);
while(true){
if((i__7292__auto___18078 < len__7291__auto___18077)){
args18027.push((arguments[i__7292__auto___18078]));

var G__18079 = (i__7292__auto___18078 + (1));
i__7292__auto___18078 = G__18079;
continue;
} else {
}
break;
}

var G__18029 = args18027.length;
switch (G__18029) {
case 2:
return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args18027.length)].join('')));

}
});

cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = (function (from,to){
return cljs.core.async.pipe.call(null,from,to,true);
});

cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = (function (from,to,close_QMARK_){
var c__17914__auto___18081 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___18081){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___18081){
return (function (state_18053){
var state_val_18054 = (state_18053[(1)]);
if((state_val_18054 === (7))){
var inst_18049 = (state_18053[(2)]);
var state_18053__$1 = state_18053;
var statearr_18055_18082 = state_18053__$1;
(statearr_18055_18082[(2)] = inst_18049);

(statearr_18055_18082[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18054 === (1))){
var state_18053__$1 = state_18053;
var statearr_18056_18083 = state_18053__$1;
(statearr_18056_18083[(2)] = null);

(statearr_18056_18083[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18054 === (4))){
var inst_18032 = (state_18053[(7)]);
var inst_18032__$1 = (state_18053[(2)]);
var inst_18033 = (inst_18032__$1 == null);
var state_18053__$1 = (function (){var statearr_18057 = state_18053;
(statearr_18057[(7)] = inst_18032__$1);

return statearr_18057;
})();
if(cljs.core.truth_(inst_18033)){
var statearr_18058_18084 = state_18053__$1;
(statearr_18058_18084[(1)] = (5));

} else {
var statearr_18059_18085 = state_18053__$1;
(statearr_18059_18085[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18054 === (13))){
var state_18053__$1 = state_18053;
var statearr_18060_18086 = state_18053__$1;
(statearr_18060_18086[(2)] = null);

(statearr_18060_18086[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18054 === (6))){
var inst_18032 = (state_18053[(7)]);
var state_18053__$1 = state_18053;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_18053__$1,(11),to,inst_18032);
} else {
if((state_val_18054 === (3))){
var inst_18051 = (state_18053[(2)]);
var state_18053__$1 = state_18053;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_18053__$1,inst_18051);
} else {
if((state_val_18054 === (12))){
var state_18053__$1 = state_18053;
var statearr_18061_18087 = state_18053__$1;
(statearr_18061_18087[(2)] = null);

(statearr_18061_18087[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18054 === (2))){
var state_18053__$1 = state_18053;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_18053__$1,(4),from);
} else {
if((state_val_18054 === (11))){
var inst_18042 = (state_18053[(2)]);
var state_18053__$1 = state_18053;
if(cljs.core.truth_(inst_18042)){
var statearr_18062_18088 = state_18053__$1;
(statearr_18062_18088[(1)] = (12));

} else {
var statearr_18063_18089 = state_18053__$1;
(statearr_18063_18089[(1)] = (13));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18054 === (9))){
var state_18053__$1 = state_18053;
var statearr_18064_18090 = state_18053__$1;
(statearr_18064_18090[(2)] = null);

(statearr_18064_18090[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18054 === (5))){
var state_18053__$1 = state_18053;
if(cljs.core.truth_(close_QMARK_)){
var statearr_18065_18091 = state_18053__$1;
(statearr_18065_18091[(1)] = (8));

} else {
var statearr_18066_18092 = state_18053__$1;
(statearr_18066_18092[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18054 === (14))){
var inst_18047 = (state_18053[(2)]);
var state_18053__$1 = state_18053;
var statearr_18067_18093 = state_18053__$1;
(statearr_18067_18093[(2)] = inst_18047);

(statearr_18067_18093[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18054 === (10))){
var inst_18039 = (state_18053[(2)]);
var state_18053__$1 = state_18053;
var statearr_18068_18094 = state_18053__$1;
(statearr_18068_18094[(2)] = inst_18039);

(statearr_18068_18094[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18054 === (8))){
var inst_18036 = cljs.core.async.close_BANG_.call(null,to);
var state_18053__$1 = state_18053;
var statearr_18069_18095 = state_18053__$1;
(statearr_18069_18095[(2)] = inst_18036);

(statearr_18069_18095[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___18081))
;
return ((function (switch__17802__auto__,c__17914__auto___18081){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_18073 = [null,null,null,null,null,null,null,null];
(statearr_18073[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_18073[(1)] = (1));

return statearr_18073;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_18053){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_18053);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e18074){if((e18074 instanceof Object)){
var ex__17806__auto__ = e18074;
var statearr_18075_18096 = state_18053;
(statearr_18075_18096[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_18053);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e18074;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__18097 = state_18053;
state_18053 = G__18097;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_18053){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_18053);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___18081))
})();
var state__17916__auto__ = (function (){var statearr_18076 = f__17915__auto__.call(null);
(statearr_18076[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___18081);

return statearr_18076;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___18081))
);


return to;
});

cljs.core.async.pipe.cljs$lang$maxFixedArity = 3;
cljs.core.async.pipeline_STAR_ = (function cljs$core$async$pipeline_STAR_(n,to,xf,from,close_QMARK_,ex_handler,type){
if((n > (0))){
} else {
throw (new Error("Assert failed: (pos? n)"));
}

var jobs = cljs.core.async.chan.call(null,n);
var results = cljs.core.async.chan.call(null,n);
var process = ((function (jobs,results){
return (function (p__18281){
var vec__18282 = p__18281;
var v = cljs.core.nth.call(null,vec__18282,(0),null);
var p = cljs.core.nth.call(null,vec__18282,(1),null);
var job = vec__18282;
if((job == null)){
cljs.core.async.close_BANG_.call(null,results);

return null;
} else {
var res = cljs.core.async.chan.call(null,(1),xf,ex_handler);
var c__17914__auto___18464 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___18464,res,vec__18282,v,p,job,jobs,results){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___18464,res,vec__18282,v,p,job,jobs,results){
return (function (state_18287){
var state_val_18288 = (state_18287[(1)]);
if((state_val_18288 === (1))){
var state_18287__$1 = state_18287;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_18287__$1,(2),res,v);
} else {
if((state_val_18288 === (2))){
var inst_18284 = (state_18287[(2)]);
var inst_18285 = cljs.core.async.close_BANG_.call(null,res);
var state_18287__$1 = (function (){var statearr_18289 = state_18287;
(statearr_18289[(7)] = inst_18284);

return statearr_18289;
})();
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_18287__$1,inst_18285);
} else {
return null;
}
}
});})(c__17914__auto___18464,res,vec__18282,v,p,job,jobs,results))
;
return ((function (switch__17802__auto__,c__17914__auto___18464,res,vec__18282,v,p,job,jobs,results){
return (function() {
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__ = null;
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0 = (function (){
var statearr_18293 = [null,null,null,null,null,null,null,null];
(statearr_18293[(0)] = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__);

(statearr_18293[(1)] = (1));

return statearr_18293;
});
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1 = (function (state_18287){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_18287);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e18294){if((e18294 instanceof Object)){
var ex__17806__auto__ = e18294;
var statearr_18295_18465 = state_18287;
(statearr_18295_18465[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_18287);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e18294;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__18466 = state_18287;
state_18287 = G__18466;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__ = function(state_18287){
switch(arguments.length){
case 0:
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1.call(this,state_18287);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0;
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1;
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___18464,res,vec__18282,v,p,job,jobs,results))
})();
var state__17916__auto__ = (function (){var statearr_18296 = f__17915__auto__.call(null);
(statearr_18296[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___18464);

return statearr_18296;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___18464,res,vec__18282,v,p,job,jobs,results))
);


cljs.core.async.put_BANG_.call(null,p,res);

return true;
}
});})(jobs,results))
;
var async = ((function (jobs,results,process){
return (function (p__18297){
var vec__18298 = p__18297;
var v = cljs.core.nth.call(null,vec__18298,(0),null);
var p = cljs.core.nth.call(null,vec__18298,(1),null);
var job = vec__18298;
if((job == null)){
cljs.core.async.close_BANG_.call(null,results);

return null;
} else {
var res = cljs.core.async.chan.call(null,(1));
xf.call(null,v,res);

cljs.core.async.put_BANG_.call(null,p,res);

return true;
}
});})(jobs,results,process))
;
var n__7131__auto___18467 = n;
var __18468 = (0);
while(true){
if((__18468 < n__7131__auto___18467)){
var G__18299_18469 = (((type instanceof cljs.core.Keyword))?type.fqn:null);
switch (G__18299_18469) {
case "compute":
var c__17914__auto___18471 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (__18468,c__17914__auto___18471,G__18299_18469,n__7131__auto___18467,jobs,results,process,async){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (__18468,c__17914__auto___18471,G__18299_18469,n__7131__auto___18467,jobs,results,process,async){
return (function (state_18312){
var state_val_18313 = (state_18312[(1)]);
if((state_val_18313 === (1))){
var state_18312__$1 = state_18312;
var statearr_18314_18472 = state_18312__$1;
(statearr_18314_18472[(2)] = null);

(statearr_18314_18472[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18313 === (2))){
var state_18312__$1 = state_18312;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_18312__$1,(4),jobs);
} else {
if((state_val_18313 === (3))){
var inst_18310 = (state_18312[(2)]);
var state_18312__$1 = state_18312;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_18312__$1,inst_18310);
} else {
if((state_val_18313 === (4))){
var inst_18302 = (state_18312[(2)]);
var inst_18303 = process.call(null,inst_18302);
var state_18312__$1 = state_18312;
if(cljs.core.truth_(inst_18303)){
var statearr_18315_18473 = state_18312__$1;
(statearr_18315_18473[(1)] = (5));

} else {
var statearr_18316_18474 = state_18312__$1;
(statearr_18316_18474[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18313 === (5))){
var state_18312__$1 = state_18312;
var statearr_18317_18475 = state_18312__$1;
(statearr_18317_18475[(2)] = null);

(statearr_18317_18475[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18313 === (6))){
var state_18312__$1 = state_18312;
var statearr_18318_18476 = state_18312__$1;
(statearr_18318_18476[(2)] = null);

(statearr_18318_18476[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18313 === (7))){
var inst_18308 = (state_18312[(2)]);
var state_18312__$1 = state_18312;
var statearr_18319_18477 = state_18312__$1;
(statearr_18319_18477[(2)] = inst_18308);

(statearr_18319_18477[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
});})(__18468,c__17914__auto___18471,G__18299_18469,n__7131__auto___18467,jobs,results,process,async))
;
return ((function (__18468,switch__17802__auto__,c__17914__auto___18471,G__18299_18469,n__7131__auto___18467,jobs,results,process,async){
return (function() {
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__ = null;
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0 = (function (){
var statearr_18323 = [null,null,null,null,null,null,null];
(statearr_18323[(0)] = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__);

(statearr_18323[(1)] = (1));

return statearr_18323;
});
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1 = (function (state_18312){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_18312);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e18324){if((e18324 instanceof Object)){
var ex__17806__auto__ = e18324;
var statearr_18325_18478 = state_18312;
(statearr_18325_18478[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_18312);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e18324;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__18479 = state_18312;
state_18312 = G__18479;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__ = function(state_18312){
switch(arguments.length){
case 0:
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1.call(this,state_18312);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0;
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1;
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__;
})()
;})(__18468,switch__17802__auto__,c__17914__auto___18471,G__18299_18469,n__7131__auto___18467,jobs,results,process,async))
})();
var state__17916__auto__ = (function (){var statearr_18326 = f__17915__auto__.call(null);
(statearr_18326[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___18471);

return statearr_18326;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(__18468,c__17914__auto___18471,G__18299_18469,n__7131__auto___18467,jobs,results,process,async))
);


break;
case "async":
var c__17914__auto___18480 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (__18468,c__17914__auto___18480,G__18299_18469,n__7131__auto___18467,jobs,results,process,async){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (__18468,c__17914__auto___18480,G__18299_18469,n__7131__auto___18467,jobs,results,process,async){
return (function (state_18339){
var state_val_18340 = (state_18339[(1)]);
if((state_val_18340 === (1))){
var state_18339__$1 = state_18339;
var statearr_18341_18481 = state_18339__$1;
(statearr_18341_18481[(2)] = null);

(statearr_18341_18481[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18340 === (2))){
var state_18339__$1 = state_18339;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_18339__$1,(4),jobs);
} else {
if((state_val_18340 === (3))){
var inst_18337 = (state_18339[(2)]);
var state_18339__$1 = state_18339;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_18339__$1,inst_18337);
} else {
if((state_val_18340 === (4))){
var inst_18329 = (state_18339[(2)]);
var inst_18330 = async.call(null,inst_18329);
var state_18339__$1 = state_18339;
if(cljs.core.truth_(inst_18330)){
var statearr_18342_18482 = state_18339__$1;
(statearr_18342_18482[(1)] = (5));

} else {
var statearr_18343_18483 = state_18339__$1;
(statearr_18343_18483[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18340 === (5))){
var state_18339__$1 = state_18339;
var statearr_18344_18484 = state_18339__$1;
(statearr_18344_18484[(2)] = null);

(statearr_18344_18484[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18340 === (6))){
var state_18339__$1 = state_18339;
var statearr_18345_18485 = state_18339__$1;
(statearr_18345_18485[(2)] = null);

(statearr_18345_18485[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18340 === (7))){
var inst_18335 = (state_18339[(2)]);
var state_18339__$1 = state_18339;
var statearr_18346_18486 = state_18339__$1;
(statearr_18346_18486[(2)] = inst_18335);

(statearr_18346_18486[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
});})(__18468,c__17914__auto___18480,G__18299_18469,n__7131__auto___18467,jobs,results,process,async))
;
return ((function (__18468,switch__17802__auto__,c__17914__auto___18480,G__18299_18469,n__7131__auto___18467,jobs,results,process,async){
return (function() {
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__ = null;
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0 = (function (){
var statearr_18350 = [null,null,null,null,null,null,null];
(statearr_18350[(0)] = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__);

(statearr_18350[(1)] = (1));

return statearr_18350;
});
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1 = (function (state_18339){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_18339);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e18351){if((e18351 instanceof Object)){
var ex__17806__auto__ = e18351;
var statearr_18352_18487 = state_18339;
(statearr_18352_18487[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_18339);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e18351;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__18488 = state_18339;
state_18339 = G__18488;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__ = function(state_18339){
switch(arguments.length){
case 0:
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1.call(this,state_18339);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0;
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1;
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__;
})()
;})(__18468,switch__17802__auto__,c__17914__auto___18480,G__18299_18469,n__7131__auto___18467,jobs,results,process,async))
})();
var state__17916__auto__ = (function (){var statearr_18353 = f__17915__auto__.call(null);
(statearr_18353[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___18480);

return statearr_18353;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(__18468,c__17914__auto___18480,G__18299_18469,n__7131__auto___18467,jobs,results,process,async))
);


break;
default:
throw (new Error([cljs.core.str("No matching clause: "),cljs.core.str(type)].join('')));

}

var G__18489 = (__18468 + (1));
__18468 = G__18489;
continue;
} else {
}
break;
}

var c__17914__auto___18490 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___18490,jobs,results,process,async){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___18490,jobs,results,process,async){
return (function (state_18375){
var state_val_18376 = (state_18375[(1)]);
if((state_val_18376 === (1))){
var state_18375__$1 = state_18375;
var statearr_18377_18491 = state_18375__$1;
(statearr_18377_18491[(2)] = null);

(statearr_18377_18491[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18376 === (2))){
var state_18375__$1 = state_18375;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_18375__$1,(4),from);
} else {
if((state_val_18376 === (3))){
var inst_18373 = (state_18375[(2)]);
var state_18375__$1 = state_18375;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_18375__$1,inst_18373);
} else {
if((state_val_18376 === (4))){
var inst_18356 = (state_18375[(7)]);
var inst_18356__$1 = (state_18375[(2)]);
var inst_18357 = (inst_18356__$1 == null);
var state_18375__$1 = (function (){var statearr_18378 = state_18375;
(statearr_18378[(7)] = inst_18356__$1);

return statearr_18378;
})();
if(cljs.core.truth_(inst_18357)){
var statearr_18379_18492 = state_18375__$1;
(statearr_18379_18492[(1)] = (5));

} else {
var statearr_18380_18493 = state_18375__$1;
(statearr_18380_18493[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18376 === (5))){
var inst_18359 = cljs.core.async.close_BANG_.call(null,jobs);
var state_18375__$1 = state_18375;
var statearr_18381_18494 = state_18375__$1;
(statearr_18381_18494[(2)] = inst_18359);

(statearr_18381_18494[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18376 === (6))){
var inst_18361 = (state_18375[(8)]);
var inst_18356 = (state_18375[(7)]);
var inst_18361__$1 = cljs.core.async.chan.call(null,(1));
var inst_18362 = cljs.core.PersistentVector.EMPTY_NODE;
var inst_18363 = [inst_18356,inst_18361__$1];
var inst_18364 = (new cljs.core.PersistentVector(null,2,(5),inst_18362,inst_18363,null));
var state_18375__$1 = (function (){var statearr_18382 = state_18375;
(statearr_18382[(8)] = inst_18361__$1);

return statearr_18382;
})();
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_18375__$1,(8),jobs,inst_18364);
} else {
if((state_val_18376 === (7))){
var inst_18371 = (state_18375[(2)]);
var state_18375__$1 = state_18375;
var statearr_18383_18495 = state_18375__$1;
(statearr_18383_18495[(2)] = inst_18371);

(statearr_18383_18495[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18376 === (8))){
var inst_18361 = (state_18375[(8)]);
var inst_18366 = (state_18375[(2)]);
var state_18375__$1 = (function (){var statearr_18384 = state_18375;
(statearr_18384[(9)] = inst_18366);

return statearr_18384;
})();
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_18375__$1,(9),results,inst_18361);
} else {
if((state_val_18376 === (9))){
var inst_18368 = (state_18375[(2)]);
var state_18375__$1 = (function (){var statearr_18385 = state_18375;
(statearr_18385[(10)] = inst_18368);

return statearr_18385;
})();
var statearr_18386_18496 = state_18375__$1;
(statearr_18386_18496[(2)] = null);

(statearr_18386_18496[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___18490,jobs,results,process,async))
;
return ((function (switch__17802__auto__,c__17914__auto___18490,jobs,results,process,async){
return (function() {
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__ = null;
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0 = (function (){
var statearr_18390 = [null,null,null,null,null,null,null,null,null,null,null];
(statearr_18390[(0)] = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__);

(statearr_18390[(1)] = (1));

return statearr_18390;
});
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1 = (function (state_18375){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_18375);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e18391){if((e18391 instanceof Object)){
var ex__17806__auto__ = e18391;
var statearr_18392_18497 = state_18375;
(statearr_18392_18497[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_18375);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e18391;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__18498 = state_18375;
state_18375 = G__18498;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__ = function(state_18375){
switch(arguments.length){
case 0:
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1.call(this,state_18375);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0;
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1;
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___18490,jobs,results,process,async))
})();
var state__17916__auto__ = (function (){var statearr_18393 = f__17915__auto__.call(null);
(statearr_18393[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___18490);

return statearr_18393;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___18490,jobs,results,process,async))
);


var c__17914__auto__ = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto__,jobs,results,process,async){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto__,jobs,results,process,async){
return (function (state_18431){
var state_val_18432 = (state_18431[(1)]);
if((state_val_18432 === (7))){
var inst_18427 = (state_18431[(2)]);
var state_18431__$1 = state_18431;
var statearr_18433_18499 = state_18431__$1;
(statearr_18433_18499[(2)] = inst_18427);

(statearr_18433_18499[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (20))){
var state_18431__$1 = state_18431;
var statearr_18434_18500 = state_18431__$1;
(statearr_18434_18500[(2)] = null);

(statearr_18434_18500[(1)] = (21));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (1))){
var state_18431__$1 = state_18431;
var statearr_18435_18501 = state_18431__$1;
(statearr_18435_18501[(2)] = null);

(statearr_18435_18501[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (4))){
var inst_18396 = (state_18431[(7)]);
var inst_18396__$1 = (state_18431[(2)]);
var inst_18397 = (inst_18396__$1 == null);
var state_18431__$1 = (function (){var statearr_18436 = state_18431;
(statearr_18436[(7)] = inst_18396__$1);

return statearr_18436;
})();
if(cljs.core.truth_(inst_18397)){
var statearr_18437_18502 = state_18431__$1;
(statearr_18437_18502[(1)] = (5));

} else {
var statearr_18438_18503 = state_18431__$1;
(statearr_18438_18503[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (15))){
var inst_18409 = (state_18431[(8)]);
var state_18431__$1 = state_18431;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_18431__$1,(18),to,inst_18409);
} else {
if((state_val_18432 === (21))){
var inst_18422 = (state_18431[(2)]);
var state_18431__$1 = state_18431;
var statearr_18439_18504 = state_18431__$1;
(statearr_18439_18504[(2)] = inst_18422);

(statearr_18439_18504[(1)] = (13));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (13))){
var inst_18424 = (state_18431[(2)]);
var state_18431__$1 = (function (){var statearr_18440 = state_18431;
(statearr_18440[(9)] = inst_18424);

return statearr_18440;
})();
var statearr_18441_18505 = state_18431__$1;
(statearr_18441_18505[(2)] = null);

(statearr_18441_18505[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (6))){
var inst_18396 = (state_18431[(7)]);
var state_18431__$1 = state_18431;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_18431__$1,(11),inst_18396);
} else {
if((state_val_18432 === (17))){
var inst_18417 = (state_18431[(2)]);
var state_18431__$1 = state_18431;
if(cljs.core.truth_(inst_18417)){
var statearr_18442_18506 = state_18431__$1;
(statearr_18442_18506[(1)] = (19));

} else {
var statearr_18443_18507 = state_18431__$1;
(statearr_18443_18507[(1)] = (20));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (3))){
var inst_18429 = (state_18431[(2)]);
var state_18431__$1 = state_18431;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_18431__$1,inst_18429);
} else {
if((state_val_18432 === (12))){
var inst_18406 = (state_18431[(10)]);
var state_18431__$1 = state_18431;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_18431__$1,(14),inst_18406);
} else {
if((state_val_18432 === (2))){
var state_18431__$1 = state_18431;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_18431__$1,(4),results);
} else {
if((state_val_18432 === (19))){
var state_18431__$1 = state_18431;
var statearr_18444_18508 = state_18431__$1;
(statearr_18444_18508[(2)] = null);

(statearr_18444_18508[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (11))){
var inst_18406 = (state_18431[(2)]);
var state_18431__$1 = (function (){var statearr_18445 = state_18431;
(statearr_18445[(10)] = inst_18406);

return statearr_18445;
})();
var statearr_18446_18509 = state_18431__$1;
(statearr_18446_18509[(2)] = null);

(statearr_18446_18509[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (9))){
var state_18431__$1 = state_18431;
var statearr_18447_18510 = state_18431__$1;
(statearr_18447_18510[(2)] = null);

(statearr_18447_18510[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (5))){
var state_18431__$1 = state_18431;
if(cljs.core.truth_(close_QMARK_)){
var statearr_18448_18511 = state_18431__$1;
(statearr_18448_18511[(1)] = (8));

} else {
var statearr_18449_18512 = state_18431__$1;
(statearr_18449_18512[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (14))){
var inst_18411 = (state_18431[(11)]);
var inst_18409 = (state_18431[(8)]);
var inst_18409__$1 = (state_18431[(2)]);
var inst_18410 = (inst_18409__$1 == null);
var inst_18411__$1 = cljs.core.not.call(null,inst_18410);
var state_18431__$1 = (function (){var statearr_18450 = state_18431;
(statearr_18450[(11)] = inst_18411__$1);

(statearr_18450[(8)] = inst_18409__$1);

return statearr_18450;
})();
if(inst_18411__$1){
var statearr_18451_18513 = state_18431__$1;
(statearr_18451_18513[(1)] = (15));

} else {
var statearr_18452_18514 = state_18431__$1;
(statearr_18452_18514[(1)] = (16));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (16))){
var inst_18411 = (state_18431[(11)]);
var state_18431__$1 = state_18431;
var statearr_18453_18515 = state_18431__$1;
(statearr_18453_18515[(2)] = inst_18411);

(statearr_18453_18515[(1)] = (17));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (10))){
var inst_18403 = (state_18431[(2)]);
var state_18431__$1 = state_18431;
var statearr_18454_18516 = state_18431__$1;
(statearr_18454_18516[(2)] = inst_18403);

(statearr_18454_18516[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (18))){
var inst_18414 = (state_18431[(2)]);
var state_18431__$1 = state_18431;
var statearr_18455_18517 = state_18431__$1;
(statearr_18455_18517[(2)] = inst_18414);

(statearr_18455_18517[(1)] = (17));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18432 === (8))){
var inst_18400 = cljs.core.async.close_BANG_.call(null,to);
var state_18431__$1 = state_18431;
var statearr_18456_18518 = state_18431__$1;
(statearr_18456_18518[(2)] = inst_18400);

(statearr_18456_18518[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto__,jobs,results,process,async))
;
return ((function (switch__17802__auto__,c__17914__auto__,jobs,results,process,async){
return (function() {
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__ = null;
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0 = (function (){
var statearr_18460 = [null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_18460[(0)] = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__);

(statearr_18460[(1)] = (1));

return statearr_18460;
});
var cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1 = (function (state_18431){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_18431);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e18461){if((e18461 instanceof Object)){
var ex__17806__auto__ = e18461;
var statearr_18462_18519 = state_18431;
(statearr_18462_18519[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_18431);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e18461;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__18520 = state_18431;
state_18431 = G__18520;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__ = function(state_18431){
switch(arguments.length){
case 0:
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1.call(this,state_18431);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____0;
cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__17803__auto____1;
return cljs$core$async$pipeline_STAR__$_state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto__,jobs,results,process,async))
})();
var state__17916__auto__ = (function (){var statearr_18463 = f__17915__auto__.call(null);
(statearr_18463[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto__);

return statearr_18463;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto__,jobs,results,process,async))
);

return c__17914__auto__;
});
/**
 * Takes elements from the from channel and supplies them to the to
 *   channel, subject to the async function af, with parallelism n. af
 *   must be a function of two arguments, the first an input value and
 *   the second a channel on which to place the result(s). af must close!
 *   the channel before returning.  The presumption is that af will
 *   return immediately, having launched some asynchronous operation
 *   whose completion/callback will manipulate the result channel. Outputs
 *   will be returned in order relative to  the inputs. By default, the to
 *   channel will be closed when the from channel closes, but can be
 *   determined by the close?  parameter. Will stop consuming the from
 *   channel if the to channel closes.
 */
cljs.core.async.pipeline_async = (function cljs$core$async$pipeline_async(var_args){
var args18521 = [];
var len__7291__auto___18524 = arguments.length;
var i__7292__auto___18525 = (0);
while(true){
if((i__7292__auto___18525 < len__7291__auto___18524)){
args18521.push((arguments[i__7292__auto___18525]));

var G__18526 = (i__7292__auto___18525 + (1));
i__7292__auto___18525 = G__18526;
continue;
} else {
}
break;
}

var G__18523 = args18521.length;
switch (G__18523) {
case 4:
return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args18521.length)].join('')));

}
});

cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = (function (n,to,af,from){
return cljs.core.async.pipeline_async.call(null,n,to,af,from,true);
});

cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = (function (n,to,af,from,close_QMARK_){
return cljs.core.async.pipeline_STAR_.call(null,n,to,af,from,close_QMARK_,null,new cljs.core.Keyword(null,"async","async",1050769601));
});

cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5;
/**
 * Takes elements from the from channel and supplies them to the to
 *   channel, subject to the transducer xf, with parallelism n. Because
 *   it is parallel, the transducer will be applied independently to each
 *   element, not across elements, and may produce zero or more outputs
 *   per input.  Outputs will be returned in order relative to the
 *   inputs. By default, the to channel will be closed when the from
 *   channel closes, but can be determined by the close?  parameter. Will
 *   stop consuming the from channel if the to channel closes.
 * 
 *   Note this is supplied for API compatibility with the Clojure version.
 *   Values of N > 1 will not result in actual concurrency in a
 *   single-threaded runtime.
 */
cljs.core.async.pipeline = (function cljs$core$async$pipeline(var_args){
var args18528 = [];
var len__7291__auto___18531 = arguments.length;
var i__7292__auto___18532 = (0);
while(true){
if((i__7292__auto___18532 < len__7291__auto___18531)){
args18528.push((arguments[i__7292__auto___18532]));

var G__18533 = (i__7292__auto___18532 + (1));
i__7292__auto___18532 = G__18533;
continue;
} else {
}
break;
}

var G__18530 = args18528.length;
switch (G__18530) {
case 4:
return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 6:
return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args18528.length)].join('')));

}
});

cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = (function (n,to,xf,from){
return cljs.core.async.pipeline.call(null,n,to,xf,from,true);
});

cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = (function (n,to,xf,from,close_QMARK_){
return cljs.core.async.pipeline.call(null,n,to,xf,from,close_QMARK_,null);
});

cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = (function (n,to,xf,from,close_QMARK_,ex_handler){
return cljs.core.async.pipeline_STAR_.call(null,n,to,xf,from,close_QMARK_,ex_handler,new cljs.core.Keyword(null,"compute","compute",1555393130));
});

cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6;
/**
 * Takes a predicate and a source channel and returns a vector of two
 *   channels, the first of which will contain the values for which the
 *   predicate returned true, the second those for which it returned
 *   false.
 * 
 *   The out channels will be unbuffered by default, or two buf-or-ns can
 *   be supplied. The channels will close after the source channel has
 *   closed.
 */
cljs.core.async.split = (function cljs$core$async$split(var_args){
var args18535 = [];
var len__7291__auto___18588 = arguments.length;
var i__7292__auto___18589 = (0);
while(true){
if((i__7292__auto___18589 < len__7291__auto___18588)){
args18535.push((arguments[i__7292__auto___18589]));

var G__18590 = (i__7292__auto___18589 + (1));
i__7292__auto___18589 = G__18590;
continue;
} else {
}
break;
}

var G__18537 = args18535.length;
switch (G__18537) {
case 2:
return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 4:
return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args18535.length)].join('')));

}
});

cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = (function (p,ch){
return cljs.core.async.split.call(null,p,ch,null,null);
});

cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = (function (p,ch,t_buf_or_n,f_buf_or_n){
var tc = cljs.core.async.chan.call(null,t_buf_or_n);
var fc = cljs.core.async.chan.call(null,f_buf_or_n);
var c__17914__auto___18592 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___18592,tc,fc){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___18592,tc,fc){
return (function (state_18563){
var state_val_18564 = (state_18563[(1)]);
if((state_val_18564 === (7))){
var inst_18559 = (state_18563[(2)]);
var state_18563__$1 = state_18563;
var statearr_18565_18593 = state_18563__$1;
(statearr_18565_18593[(2)] = inst_18559);

(statearr_18565_18593[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18564 === (1))){
var state_18563__$1 = state_18563;
var statearr_18566_18594 = state_18563__$1;
(statearr_18566_18594[(2)] = null);

(statearr_18566_18594[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18564 === (4))){
var inst_18540 = (state_18563[(7)]);
var inst_18540__$1 = (state_18563[(2)]);
var inst_18541 = (inst_18540__$1 == null);
var state_18563__$1 = (function (){var statearr_18567 = state_18563;
(statearr_18567[(7)] = inst_18540__$1);

return statearr_18567;
})();
if(cljs.core.truth_(inst_18541)){
var statearr_18568_18595 = state_18563__$1;
(statearr_18568_18595[(1)] = (5));

} else {
var statearr_18569_18596 = state_18563__$1;
(statearr_18569_18596[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18564 === (13))){
var state_18563__$1 = state_18563;
var statearr_18570_18597 = state_18563__$1;
(statearr_18570_18597[(2)] = null);

(statearr_18570_18597[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18564 === (6))){
var inst_18540 = (state_18563[(7)]);
var inst_18546 = p.call(null,inst_18540);
var state_18563__$1 = state_18563;
if(cljs.core.truth_(inst_18546)){
var statearr_18571_18598 = state_18563__$1;
(statearr_18571_18598[(1)] = (9));

} else {
var statearr_18572_18599 = state_18563__$1;
(statearr_18572_18599[(1)] = (10));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18564 === (3))){
var inst_18561 = (state_18563[(2)]);
var state_18563__$1 = state_18563;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_18563__$1,inst_18561);
} else {
if((state_val_18564 === (12))){
var state_18563__$1 = state_18563;
var statearr_18573_18600 = state_18563__$1;
(statearr_18573_18600[(2)] = null);

(statearr_18573_18600[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18564 === (2))){
var state_18563__$1 = state_18563;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_18563__$1,(4),ch);
} else {
if((state_val_18564 === (11))){
var inst_18540 = (state_18563[(7)]);
var inst_18550 = (state_18563[(2)]);
var state_18563__$1 = state_18563;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_18563__$1,(8),inst_18550,inst_18540);
} else {
if((state_val_18564 === (9))){
var state_18563__$1 = state_18563;
var statearr_18574_18601 = state_18563__$1;
(statearr_18574_18601[(2)] = tc);

(statearr_18574_18601[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18564 === (5))){
var inst_18543 = cljs.core.async.close_BANG_.call(null,tc);
var inst_18544 = cljs.core.async.close_BANG_.call(null,fc);
var state_18563__$1 = (function (){var statearr_18575 = state_18563;
(statearr_18575[(8)] = inst_18543);

return statearr_18575;
})();
var statearr_18576_18602 = state_18563__$1;
(statearr_18576_18602[(2)] = inst_18544);

(statearr_18576_18602[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18564 === (14))){
var inst_18557 = (state_18563[(2)]);
var state_18563__$1 = state_18563;
var statearr_18577_18603 = state_18563__$1;
(statearr_18577_18603[(2)] = inst_18557);

(statearr_18577_18603[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18564 === (10))){
var state_18563__$1 = state_18563;
var statearr_18578_18604 = state_18563__$1;
(statearr_18578_18604[(2)] = fc);

(statearr_18578_18604[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18564 === (8))){
var inst_18552 = (state_18563[(2)]);
var state_18563__$1 = state_18563;
if(cljs.core.truth_(inst_18552)){
var statearr_18579_18605 = state_18563__$1;
(statearr_18579_18605[(1)] = (12));

} else {
var statearr_18580_18606 = state_18563__$1;
(statearr_18580_18606[(1)] = (13));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___18592,tc,fc))
;
return ((function (switch__17802__auto__,c__17914__auto___18592,tc,fc){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_18584 = [null,null,null,null,null,null,null,null,null];
(statearr_18584[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_18584[(1)] = (1));

return statearr_18584;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_18563){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_18563);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e18585){if((e18585 instanceof Object)){
var ex__17806__auto__ = e18585;
var statearr_18586_18607 = state_18563;
(statearr_18586_18607[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_18563);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e18585;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__18608 = state_18563;
state_18563 = G__18608;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_18563){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_18563);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___18592,tc,fc))
})();
var state__17916__auto__ = (function (){var statearr_18587 = f__17915__auto__.call(null);
(statearr_18587[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___18592);

return statearr_18587;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___18592,tc,fc))
);


return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc,fc], null);
});

cljs.core.async.split.cljs$lang$maxFixedArity = 4;
/**
 * f should be a function of 2 arguments. Returns a channel containing
 *   the single result of applying f to init and the first item from the
 *   channel, then applying f to that result and the 2nd item, etc. If
 *   the channel closes without yielding items, returns init and f is not
 *   called. ch must close before reduce produces a result.
 */
cljs.core.async.reduce = (function cljs$core$async$reduce(f,init,ch){
var c__17914__auto__ = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto__){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto__){
return (function (state_18672){
var state_val_18673 = (state_18672[(1)]);
if((state_val_18673 === (7))){
var inst_18668 = (state_18672[(2)]);
var state_18672__$1 = state_18672;
var statearr_18674_18695 = state_18672__$1;
(statearr_18674_18695[(2)] = inst_18668);

(statearr_18674_18695[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18673 === (1))){
var inst_18652 = init;
var state_18672__$1 = (function (){var statearr_18675 = state_18672;
(statearr_18675[(7)] = inst_18652);

return statearr_18675;
})();
var statearr_18676_18696 = state_18672__$1;
(statearr_18676_18696[(2)] = null);

(statearr_18676_18696[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18673 === (4))){
var inst_18655 = (state_18672[(8)]);
var inst_18655__$1 = (state_18672[(2)]);
var inst_18656 = (inst_18655__$1 == null);
var state_18672__$1 = (function (){var statearr_18677 = state_18672;
(statearr_18677[(8)] = inst_18655__$1);

return statearr_18677;
})();
if(cljs.core.truth_(inst_18656)){
var statearr_18678_18697 = state_18672__$1;
(statearr_18678_18697[(1)] = (5));

} else {
var statearr_18679_18698 = state_18672__$1;
(statearr_18679_18698[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18673 === (6))){
var inst_18652 = (state_18672[(7)]);
var inst_18655 = (state_18672[(8)]);
var inst_18659 = (state_18672[(9)]);
var inst_18659__$1 = f.call(null,inst_18652,inst_18655);
var inst_18660 = cljs.core.reduced_QMARK_.call(null,inst_18659__$1);
var state_18672__$1 = (function (){var statearr_18680 = state_18672;
(statearr_18680[(9)] = inst_18659__$1);

return statearr_18680;
})();
if(inst_18660){
var statearr_18681_18699 = state_18672__$1;
(statearr_18681_18699[(1)] = (8));

} else {
var statearr_18682_18700 = state_18672__$1;
(statearr_18682_18700[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18673 === (3))){
var inst_18670 = (state_18672[(2)]);
var state_18672__$1 = state_18672;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_18672__$1,inst_18670);
} else {
if((state_val_18673 === (2))){
var state_18672__$1 = state_18672;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_18672__$1,(4),ch);
} else {
if((state_val_18673 === (9))){
var inst_18659 = (state_18672[(9)]);
var inst_18652 = inst_18659;
var state_18672__$1 = (function (){var statearr_18683 = state_18672;
(statearr_18683[(7)] = inst_18652);

return statearr_18683;
})();
var statearr_18684_18701 = state_18672__$1;
(statearr_18684_18701[(2)] = null);

(statearr_18684_18701[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18673 === (5))){
var inst_18652 = (state_18672[(7)]);
var state_18672__$1 = state_18672;
var statearr_18685_18702 = state_18672__$1;
(statearr_18685_18702[(2)] = inst_18652);

(statearr_18685_18702[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18673 === (10))){
var inst_18666 = (state_18672[(2)]);
var state_18672__$1 = state_18672;
var statearr_18686_18703 = state_18672__$1;
(statearr_18686_18703[(2)] = inst_18666);

(statearr_18686_18703[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18673 === (8))){
var inst_18659 = (state_18672[(9)]);
var inst_18662 = cljs.core.deref.call(null,inst_18659);
var state_18672__$1 = state_18672;
var statearr_18687_18704 = state_18672__$1;
(statearr_18687_18704[(2)] = inst_18662);

(statearr_18687_18704[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto__))
;
return ((function (switch__17802__auto__,c__17914__auto__){
return (function() {
var cljs$core$async$reduce_$_state_machine__17803__auto__ = null;
var cljs$core$async$reduce_$_state_machine__17803__auto____0 = (function (){
var statearr_18691 = [null,null,null,null,null,null,null,null,null,null];
(statearr_18691[(0)] = cljs$core$async$reduce_$_state_machine__17803__auto__);

(statearr_18691[(1)] = (1));

return statearr_18691;
});
var cljs$core$async$reduce_$_state_machine__17803__auto____1 = (function (state_18672){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_18672);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e18692){if((e18692 instanceof Object)){
var ex__17806__auto__ = e18692;
var statearr_18693_18705 = state_18672;
(statearr_18693_18705[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_18672);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e18692;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__18706 = state_18672;
state_18672 = G__18706;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$reduce_$_state_machine__17803__auto__ = function(state_18672){
switch(arguments.length){
case 0:
return cljs$core$async$reduce_$_state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$reduce_$_state_machine__17803__auto____1.call(this,state_18672);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$reduce_$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__17803__auto____0;
cljs$core$async$reduce_$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__17803__auto____1;
return cljs$core$async$reduce_$_state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto__))
})();
var state__17916__auto__ = (function (){var statearr_18694 = f__17915__auto__.call(null);
(statearr_18694[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto__);

return statearr_18694;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto__))
);

return c__17914__auto__;
});
/**
 * Puts the contents of coll into the supplied channel.
 * 
 *   By default the channel will be closed after the items are copied,
 *   but can be determined by the close? parameter.
 * 
 *   Returns a channel which will close after the items are copied.
 */
cljs.core.async.onto_chan = (function cljs$core$async$onto_chan(var_args){
var args18707 = [];
var len__7291__auto___18759 = arguments.length;
var i__7292__auto___18760 = (0);
while(true){
if((i__7292__auto___18760 < len__7291__auto___18759)){
args18707.push((arguments[i__7292__auto___18760]));

var G__18761 = (i__7292__auto___18760 + (1));
i__7292__auto___18760 = G__18761;
continue;
} else {
}
break;
}

var G__18709 = args18707.length;
switch (G__18709) {
case 2:
return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args18707.length)].join('')));

}
});

cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = (function (ch,coll){
return cljs.core.async.onto_chan.call(null,ch,coll,true);
});

cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = (function (ch,coll,close_QMARK_){
var c__17914__auto__ = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto__){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto__){
return (function (state_18734){
var state_val_18735 = (state_18734[(1)]);
if((state_val_18735 === (7))){
var inst_18716 = (state_18734[(2)]);
var state_18734__$1 = state_18734;
var statearr_18736_18763 = state_18734__$1;
(statearr_18736_18763[(2)] = inst_18716);

(statearr_18736_18763[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18735 === (1))){
var inst_18710 = cljs.core.seq.call(null,coll);
var inst_18711 = inst_18710;
var state_18734__$1 = (function (){var statearr_18737 = state_18734;
(statearr_18737[(7)] = inst_18711);

return statearr_18737;
})();
var statearr_18738_18764 = state_18734__$1;
(statearr_18738_18764[(2)] = null);

(statearr_18738_18764[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18735 === (4))){
var inst_18711 = (state_18734[(7)]);
var inst_18714 = cljs.core.first.call(null,inst_18711);
var state_18734__$1 = state_18734;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_18734__$1,(7),ch,inst_18714);
} else {
if((state_val_18735 === (13))){
var inst_18728 = (state_18734[(2)]);
var state_18734__$1 = state_18734;
var statearr_18739_18765 = state_18734__$1;
(statearr_18739_18765[(2)] = inst_18728);

(statearr_18739_18765[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18735 === (6))){
var inst_18719 = (state_18734[(2)]);
var state_18734__$1 = state_18734;
if(cljs.core.truth_(inst_18719)){
var statearr_18740_18766 = state_18734__$1;
(statearr_18740_18766[(1)] = (8));

} else {
var statearr_18741_18767 = state_18734__$1;
(statearr_18741_18767[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18735 === (3))){
var inst_18732 = (state_18734[(2)]);
var state_18734__$1 = state_18734;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_18734__$1,inst_18732);
} else {
if((state_val_18735 === (12))){
var state_18734__$1 = state_18734;
var statearr_18742_18768 = state_18734__$1;
(statearr_18742_18768[(2)] = null);

(statearr_18742_18768[(1)] = (13));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18735 === (2))){
var inst_18711 = (state_18734[(7)]);
var state_18734__$1 = state_18734;
if(cljs.core.truth_(inst_18711)){
var statearr_18743_18769 = state_18734__$1;
(statearr_18743_18769[(1)] = (4));

} else {
var statearr_18744_18770 = state_18734__$1;
(statearr_18744_18770[(1)] = (5));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18735 === (11))){
var inst_18725 = cljs.core.async.close_BANG_.call(null,ch);
var state_18734__$1 = state_18734;
var statearr_18745_18771 = state_18734__$1;
(statearr_18745_18771[(2)] = inst_18725);

(statearr_18745_18771[(1)] = (13));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18735 === (9))){
var state_18734__$1 = state_18734;
if(cljs.core.truth_(close_QMARK_)){
var statearr_18746_18772 = state_18734__$1;
(statearr_18746_18772[(1)] = (11));

} else {
var statearr_18747_18773 = state_18734__$1;
(statearr_18747_18773[(1)] = (12));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18735 === (5))){
var inst_18711 = (state_18734[(7)]);
var state_18734__$1 = state_18734;
var statearr_18748_18774 = state_18734__$1;
(statearr_18748_18774[(2)] = inst_18711);

(statearr_18748_18774[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18735 === (10))){
var inst_18730 = (state_18734[(2)]);
var state_18734__$1 = state_18734;
var statearr_18749_18775 = state_18734__$1;
(statearr_18749_18775[(2)] = inst_18730);

(statearr_18749_18775[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_18735 === (8))){
var inst_18711 = (state_18734[(7)]);
var inst_18721 = cljs.core.next.call(null,inst_18711);
var inst_18711__$1 = inst_18721;
var state_18734__$1 = (function (){var statearr_18750 = state_18734;
(statearr_18750[(7)] = inst_18711__$1);

return statearr_18750;
})();
var statearr_18751_18776 = state_18734__$1;
(statearr_18751_18776[(2)] = null);

(statearr_18751_18776[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto__))
;
return ((function (switch__17802__auto__,c__17914__auto__){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_18755 = [null,null,null,null,null,null,null,null];
(statearr_18755[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_18755[(1)] = (1));

return statearr_18755;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_18734){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_18734);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e18756){if((e18756 instanceof Object)){
var ex__17806__auto__ = e18756;
var statearr_18757_18777 = state_18734;
(statearr_18757_18777[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_18734);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e18756;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__18778 = state_18734;
state_18734 = G__18778;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_18734){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_18734);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto__))
})();
var state__17916__auto__ = (function (){var statearr_18758 = f__17915__auto__.call(null);
(statearr_18758[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto__);

return statearr_18758;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto__))
);

return c__17914__auto__;
});

cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3;
/**
 * Creates and returns a channel which contains the contents of coll,
 *   closing when exhausted.
 */
cljs.core.async.to_chan = (function cljs$core$async$to_chan(coll){
var ch = cljs.core.async.chan.call(null,cljs.core.bounded_count.call(null,(100),coll));
cljs.core.async.onto_chan.call(null,ch,coll);

return ch;
});

/**
 * @interface
 */
cljs.core.async.Mux = function(){};

cljs.core.async.muxch_STAR_ = (function cljs$core$async$muxch_STAR_(_){
if((!((_ == null))) && (!((_.cljs$core$async$Mux$muxch_STAR_$arity$1 == null)))){
return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
} else {
var x__6879__auto__ = (((_ == null))?null:_);
var m__6880__auto__ = (cljs.core.async.muxch_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,_);
} else {
var m__6880__auto____$1 = (cljs.core.async.muxch_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,_);
} else {
throw cljs.core.missing_protocol.call(null,"Mux.muxch*",_);
}
}
}
});


/**
 * @interface
 */
cljs.core.async.Mult = function(){};

cljs.core.async.tap_STAR_ = (function cljs$core$async$tap_STAR_(m,ch,close_QMARK_){
if((!((m == null))) && (!((m.cljs$core$async$Mult$tap_STAR_$arity$3 == null)))){
return m.cljs$core$async$Mult$tap_STAR_$arity$3(m,ch,close_QMARK_);
} else {
var x__6879__auto__ = (((m == null))?null:m);
var m__6880__auto__ = (cljs.core.async.tap_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,m,ch,close_QMARK_);
} else {
var m__6880__auto____$1 = (cljs.core.async.tap_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,m,ch,close_QMARK_);
} else {
throw cljs.core.missing_protocol.call(null,"Mult.tap*",m);
}
}
}
});

cljs.core.async.untap_STAR_ = (function cljs$core$async$untap_STAR_(m,ch){
if((!((m == null))) && (!((m.cljs$core$async$Mult$untap_STAR_$arity$2 == null)))){
return m.cljs$core$async$Mult$untap_STAR_$arity$2(m,ch);
} else {
var x__6879__auto__ = (((m == null))?null:m);
var m__6880__auto__ = (cljs.core.async.untap_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,m,ch);
} else {
var m__6880__auto____$1 = (cljs.core.async.untap_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,m,ch);
} else {
throw cljs.core.missing_protocol.call(null,"Mult.untap*",m);
}
}
}
});

cljs.core.async.untap_all_STAR_ = (function cljs$core$async$untap_all_STAR_(m){
if((!((m == null))) && (!((m.cljs$core$async$Mult$untap_all_STAR_$arity$1 == null)))){
return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
} else {
var x__6879__auto__ = (((m == null))?null:m);
var m__6880__auto__ = (cljs.core.async.untap_all_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,m);
} else {
var m__6880__auto____$1 = (cljs.core.async.untap_all_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,m);
} else {
throw cljs.core.missing_protocol.call(null,"Mult.untap-all*",m);
}
}
}
});

/**
 * Creates and returns a mult(iple) of the supplied channel. Channels
 *   containing copies of the channel can be created with 'tap', and
 *   detached with 'untap'.
 * 
 *   Each item is distributed to all taps in parallel and synchronously,
 *   i.e. each tap must accept before the next item is distributed. Use
 *   buffering/windowing to prevent slow taps from holding up the mult.
 * 
 *   Items received when there are no taps get dropped.
 * 
 *   If a tap puts to a closed channel, it will be removed from the mult.
 */
cljs.core.async.mult = (function cljs$core$async$mult(ch){
var cs = cljs.core.atom.call(null,cljs.core.PersistentArrayMap.EMPTY);
var m = (function (){
if(typeof cljs.core.async.t_cljs$core$async19000 !== 'undefined'){
} else {

/**
* @constructor
 * @implements {cljs.core.async.Mult}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.async.Mux}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async19000 = (function (mult,ch,cs,meta19001){
this.mult = mult;
this.ch = ch;
this.cs = cs;
this.meta19001 = meta19001;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
cljs.core.async.t_cljs$core$async19000.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = ((function (cs){
return (function (_19002,meta19001__$1){
var self__ = this;
var _19002__$1 = this;
return (new cljs.core.async.t_cljs$core$async19000(self__.mult,self__.ch,self__.cs,meta19001__$1));
});})(cs))
;

cljs.core.async.t_cljs$core$async19000.prototype.cljs$core$IMeta$_meta$arity$1 = ((function (cs){
return (function (_19002){
var self__ = this;
var _19002__$1 = this;
return self__.meta19001;
});})(cs))
;

cljs.core.async.t_cljs$core$async19000.prototype.cljs$core$async$Mux$ = true;

cljs.core.async.t_cljs$core$async19000.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = ((function (cs){
return (function (_){
var self__ = this;
var ___$1 = this;
return self__.ch;
});})(cs))
;

cljs.core.async.t_cljs$core$async19000.prototype.cljs$core$async$Mult$ = true;

cljs.core.async.t_cljs$core$async19000.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = ((function (cs){
return (function (_,ch__$1,close_QMARK_){
var self__ = this;
var ___$1 = this;
cljs.core.swap_BANG_.call(null,self__.cs,cljs.core.assoc,ch__$1,close_QMARK_);

return null;
});})(cs))
;

cljs.core.async.t_cljs$core$async19000.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = ((function (cs){
return (function (_,ch__$1){
var self__ = this;
var ___$1 = this;
cljs.core.swap_BANG_.call(null,self__.cs,cljs.core.dissoc,ch__$1);

return null;
});})(cs))
;

cljs.core.async.t_cljs$core$async19000.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = ((function (cs){
return (function (_){
var self__ = this;
var ___$1 = this;
cljs.core.reset_BANG_.call(null,self__.cs,cljs.core.PersistentArrayMap.EMPTY);

return null;
});})(cs))
;

cljs.core.async.t_cljs$core$async19000.getBasis = ((function (cs){
return (function (){
return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,"mult","mult",-1187640995,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"ch","ch",1085813622,null)], null))),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates and returns a mult(iple) of the supplied channel. Channels\n  containing copies of the channel can be created with 'tap', and\n  detached with 'untap'.\n\n  Each item is distributed to all taps in parallel and synchronously,\n  i.e. each tap must accept before the next item is distributed. Use\n  buffering/windowing to prevent slow taps from holding up the mult.\n\n  Items received when there are no taps get dropped.\n\n  If a tap puts to a closed channel, it will be removed from the mult."], null)),new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"cs","cs",-117024463,null),new cljs.core.Symbol(null,"meta19001","meta19001",-1140562183,null)], null);
});})(cs))
;

cljs.core.async.t_cljs$core$async19000.cljs$lang$type = true;

cljs.core.async.t_cljs$core$async19000.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async19000";

cljs.core.async.t_cljs$core$async19000.cljs$lang$ctorPrWriter = ((function (cs){
return (function (this__6822__auto__,writer__6823__auto__,opt__6824__auto__){
return cljs.core._write.call(null,writer__6823__auto__,"cljs.core.async/t_cljs$core$async19000");
});})(cs))
;

cljs.core.async.__GT_t_cljs$core$async19000 = ((function (cs){
return (function cljs$core$async$mult_$___GT_t_cljs$core$async19000(mult__$1,ch__$1,cs__$1,meta19001){
return (new cljs.core.async.t_cljs$core$async19000(mult__$1,ch__$1,cs__$1,meta19001));
});})(cs))
;

}

return (new cljs.core.async.t_cljs$core$async19000(cljs$core$async$mult,ch,cs,cljs.core.PersistentArrayMap.EMPTY));
})()
;
var dchan = cljs.core.async.chan.call(null,(1));
var dctr = cljs.core.atom.call(null,null);
var done = ((function (cs,m,dchan,dctr){
return (function (_){
if((cljs.core.swap_BANG_.call(null,dctr,cljs.core.dec) === (0))){
return cljs.core.async.put_BANG_.call(null,dchan,true);
} else {
return null;
}
});})(cs,m,dchan,dctr))
;
var c__17914__auto___19221 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___19221,cs,m,dchan,dctr,done){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___19221,cs,m,dchan,dctr,done){
return (function (state_19133){
var state_val_19134 = (state_19133[(1)]);
if((state_val_19134 === (7))){
var inst_19129 = (state_19133[(2)]);
var state_19133__$1 = state_19133;
var statearr_19135_19222 = state_19133__$1;
(statearr_19135_19222[(2)] = inst_19129);

(statearr_19135_19222[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (20))){
var inst_19034 = (state_19133[(7)]);
var inst_19044 = cljs.core.first.call(null,inst_19034);
var inst_19045 = cljs.core.nth.call(null,inst_19044,(0),null);
var inst_19046 = cljs.core.nth.call(null,inst_19044,(1),null);
var state_19133__$1 = (function (){var statearr_19136 = state_19133;
(statearr_19136[(8)] = inst_19045);

return statearr_19136;
})();
if(cljs.core.truth_(inst_19046)){
var statearr_19137_19223 = state_19133__$1;
(statearr_19137_19223[(1)] = (22));

} else {
var statearr_19138_19224 = state_19133__$1;
(statearr_19138_19224[(1)] = (23));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (27))){
var inst_19005 = (state_19133[(9)]);
var inst_19081 = (state_19133[(10)]);
var inst_19074 = (state_19133[(11)]);
var inst_19076 = (state_19133[(12)]);
var inst_19081__$1 = cljs.core._nth.call(null,inst_19074,inst_19076);
var inst_19082 = cljs.core.async.put_BANG_.call(null,inst_19081__$1,inst_19005,done);
var state_19133__$1 = (function (){var statearr_19139 = state_19133;
(statearr_19139[(10)] = inst_19081__$1);

return statearr_19139;
})();
if(cljs.core.truth_(inst_19082)){
var statearr_19140_19225 = state_19133__$1;
(statearr_19140_19225[(1)] = (30));

} else {
var statearr_19141_19226 = state_19133__$1;
(statearr_19141_19226[(1)] = (31));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (1))){
var state_19133__$1 = state_19133;
var statearr_19142_19227 = state_19133__$1;
(statearr_19142_19227[(2)] = null);

(statearr_19142_19227[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (24))){
var inst_19034 = (state_19133[(7)]);
var inst_19051 = (state_19133[(2)]);
var inst_19052 = cljs.core.next.call(null,inst_19034);
var inst_19014 = inst_19052;
var inst_19015 = null;
var inst_19016 = (0);
var inst_19017 = (0);
var state_19133__$1 = (function (){var statearr_19143 = state_19133;
(statearr_19143[(13)] = inst_19017);

(statearr_19143[(14)] = inst_19016);

(statearr_19143[(15)] = inst_19015);

(statearr_19143[(16)] = inst_19051);

(statearr_19143[(17)] = inst_19014);

return statearr_19143;
})();
var statearr_19144_19228 = state_19133__$1;
(statearr_19144_19228[(2)] = null);

(statearr_19144_19228[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (39))){
var state_19133__$1 = state_19133;
var statearr_19148_19229 = state_19133__$1;
(statearr_19148_19229[(2)] = null);

(statearr_19148_19229[(1)] = (41));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (4))){
var inst_19005 = (state_19133[(9)]);
var inst_19005__$1 = (state_19133[(2)]);
var inst_19006 = (inst_19005__$1 == null);
var state_19133__$1 = (function (){var statearr_19149 = state_19133;
(statearr_19149[(9)] = inst_19005__$1);

return statearr_19149;
})();
if(cljs.core.truth_(inst_19006)){
var statearr_19150_19230 = state_19133__$1;
(statearr_19150_19230[(1)] = (5));

} else {
var statearr_19151_19231 = state_19133__$1;
(statearr_19151_19231[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (15))){
var inst_19017 = (state_19133[(13)]);
var inst_19016 = (state_19133[(14)]);
var inst_19015 = (state_19133[(15)]);
var inst_19014 = (state_19133[(17)]);
var inst_19030 = (state_19133[(2)]);
var inst_19031 = (inst_19017 + (1));
var tmp19145 = inst_19016;
var tmp19146 = inst_19015;
var tmp19147 = inst_19014;
var inst_19014__$1 = tmp19147;
var inst_19015__$1 = tmp19146;
var inst_19016__$1 = tmp19145;
var inst_19017__$1 = inst_19031;
var state_19133__$1 = (function (){var statearr_19152 = state_19133;
(statearr_19152[(13)] = inst_19017__$1);

(statearr_19152[(14)] = inst_19016__$1);

(statearr_19152[(15)] = inst_19015__$1);

(statearr_19152[(17)] = inst_19014__$1);

(statearr_19152[(18)] = inst_19030);

return statearr_19152;
})();
var statearr_19153_19232 = state_19133__$1;
(statearr_19153_19232[(2)] = null);

(statearr_19153_19232[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (21))){
var inst_19055 = (state_19133[(2)]);
var state_19133__$1 = state_19133;
var statearr_19157_19233 = state_19133__$1;
(statearr_19157_19233[(2)] = inst_19055);

(statearr_19157_19233[(1)] = (18));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (31))){
var inst_19081 = (state_19133[(10)]);
var inst_19085 = done.call(null,null);
var inst_19086 = cljs.core.async.untap_STAR_.call(null,m,inst_19081);
var state_19133__$1 = (function (){var statearr_19158 = state_19133;
(statearr_19158[(19)] = inst_19085);

return statearr_19158;
})();
var statearr_19159_19234 = state_19133__$1;
(statearr_19159_19234[(2)] = inst_19086);

(statearr_19159_19234[(1)] = (32));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (32))){
var inst_19075 = (state_19133[(20)]);
var inst_19073 = (state_19133[(21)]);
var inst_19074 = (state_19133[(11)]);
var inst_19076 = (state_19133[(12)]);
var inst_19088 = (state_19133[(2)]);
var inst_19089 = (inst_19076 + (1));
var tmp19154 = inst_19075;
var tmp19155 = inst_19073;
var tmp19156 = inst_19074;
var inst_19073__$1 = tmp19155;
var inst_19074__$1 = tmp19156;
var inst_19075__$1 = tmp19154;
var inst_19076__$1 = inst_19089;
var state_19133__$1 = (function (){var statearr_19160 = state_19133;
(statearr_19160[(20)] = inst_19075__$1);

(statearr_19160[(21)] = inst_19073__$1);

(statearr_19160[(22)] = inst_19088);

(statearr_19160[(11)] = inst_19074__$1);

(statearr_19160[(12)] = inst_19076__$1);

return statearr_19160;
})();
var statearr_19161_19235 = state_19133__$1;
(statearr_19161_19235[(2)] = null);

(statearr_19161_19235[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (40))){
var inst_19101 = (state_19133[(23)]);
var inst_19105 = done.call(null,null);
var inst_19106 = cljs.core.async.untap_STAR_.call(null,m,inst_19101);
var state_19133__$1 = (function (){var statearr_19162 = state_19133;
(statearr_19162[(24)] = inst_19105);

return statearr_19162;
})();
var statearr_19163_19236 = state_19133__$1;
(statearr_19163_19236[(2)] = inst_19106);

(statearr_19163_19236[(1)] = (41));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (33))){
var inst_19092 = (state_19133[(25)]);
var inst_19094 = cljs.core.chunked_seq_QMARK_.call(null,inst_19092);
var state_19133__$1 = state_19133;
if(inst_19094){
var statearr_19164_19237 = state_19133__$1;
(statearr_19164_19237[(1)] = (36));

} else {
var statearr_19165_19238 = state_19133__$1;
(statearr_19165_19238[(1)] = (37));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (13))){
var inst_19024 = (state_19133[(26)]);
var inst_19027 = cljs.core.async.close_BANG_.call(null,inst_19024);
var state_19133__$1 = state_19133;
var statearr_19166_19239 = state_19133__$1;
(statearr_19166_19239[(2)] = inst_19027);

(statearr_19166_19239[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (22))){
var inst_19045 = (state_19133[(8)]);
var inst_19048 = cljs.core.async.close_BANG_.call(null,inst_19045);
var state_19133__$1 = state_19133;
var statearr_19167_19240 = state_19133__$1;
(statearr_19167_19240[(2)] = inst_19048);

(statearr_19167_19240[(1)] = (24));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (36))){
var inst_19092 = (state_19133[(25)]);
var inst_19096 = cljs.core.chunk_first.call(null,inst_19092);
var inst_19097 = cljs.core.chunk_rest.call(null,inst_19092);
var inst_19098 = cljs.core.count.call(null,inst_19096);
var inst_19073 = inst_19097;
var inst_19074 = inst_19096;
var inst_19075 = inst_19098;
var inst_19076 = (0);
var state_19133__$1 = (function (){var statearr_19168 = state_19133;
(statearr_19168[(20)] = inst_19075);

(statearr_19168[(21)] = inst_19073);

(statearr_19168[(11)] = inst_19074);

(statearr_19168[(12)] = inst_19076);

return statearr_19168;
})();
var statearr_19169_19241 = state_19133__$1;
(statearr_19169_19241[(2)] = null);

(statearr_19169_19241[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (41))){
var inst_19092 = (state_19133[(25)]);
var inst_19108 = (state_19133[(2)]);
var inst_19109 = cljs.core.next.call(null,inst_19092);
var inst_19073 = inst_19109;
var inst_19074 = null;
var inst_19075 = (0);
var inst_19076 = (0);
var state_19133__$1 = (function (){var statearr_19170 = state_19133;
(statearr_19170[(20)] = inst_19075);

(statearr_19170[(27)] = inst_19108);

(statearr_19170[(21)] = inst_19073);

(statearr_19170[(11)] = inst_19074);

(statearr_19170[(12)] = inst_19076);

return statearr_19170;
})();
var statearr_19171_19242 = state_19133__$1;
(statearr_19171_19242[(2)] = null);

(statearr_19171_19242[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (43))){
var state_19133__$1 = state_19133;
var statearr_19172_19243 = state_19133__$1;
(statearr_19172_19243[(2)] = null);

(statearr_19172_19243[(1)] = (44));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (29))){
var inst_19117 = (state_19133[(2)]);
var state_19133__$1 = state_19133;
var statearr_19173_19244 = state_19133__$1;
(statearr_19173_19244[(2)] = inst_19117);

(statearr_19173_19244[(1)] = (26));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (44))){
var inst_19126 = (state_19133[(2)]);
var state_19133__$1 = (function (){var statearr_19174 = state_19133;
(statearr_19174[(28)] = inst_19126);

return statearr_19174;
})();
var statearr_19175_19245 = state_19133__$1;
(statearr_19175_19245[(2)] = null);

(statearr_19175_19245[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (6))){
var inst_19065 = (state_19133[(29)]);
var inst_19064 = cljs.core.deref.call(null,cs);
var inst_19065__$1 = cljs.core.keys.call(null,inst_19064);
var inst_19066 = cljs.core.count.call(null,inst_19065__$1);
var inst_19067 = cljs.core.reset_BANG_.call(null,dctr,inst_19066);
var inst_19072 = cljs.core.seq.call(null,inst_19065__$1);
var inst_19073 = inst_19072;
var inst_19074 = null;
var inst_19075 = (0);
var inst_19076 = (0);
var state_19133__$1 = (function (){var statearr_19176 = state_19133;
(statearr_19176[(29)] = inst_19065__$1);

(statearr_19176[(20)] = inst_19075);

(statearr_19176[(21)] = inst_19073);

(statearr_19176[(30)] = inst_19067);

(statearr_19176[(11)] = inst_19074);

(statearr_19176[(12)] = inst_19076);

return statearr_19176;
})();
var statearr_19177_19246 = state_19133__$1;
(statearr_19177_19246[(2)] = null);

(statearr_19177_19246[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (28))){
var inst_19092 = (state_19133[(25)]);
var inst_19073 = (state_19133[(21)]);
var inst_19092__$1 = cljs.core.seq.call(null,inst_19073);
var state_19133__$1 = (function (){var statearr_19178 = state_19133;
(statearr_19178[(25)] = inst_19092__$1);

return statearr_19178;
})();
if(inst_19092__$1){
var statearr_19179_19247 = state_19133__$1;
(statearr_19179_19247[(1)] = (33));

} else {
var statearr_19180_19248 = state_19133__$1;
(statearr_19180_19248[(1)] = (34));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (25))){
var inst_19075 = (state_19133[(20)]);
var inst_19076 = (state_19133[(12)]);
var inst_19078 = (inst_19076 < inst_19075);
var inst_19079 = inst_19078;
var state_19133__$1 = state_19133;
if(cljs.core.truth_(inst_19079)){
var statearr_19181_19249 = state_19133__$1;
(statearr_19181_19249[(1)] = (27));

} else {
var statearr_19182_19250 = state_19133__$1;
(statearr_19182_19250[(1)] = (28));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (34))){
var state_19133__$1 = state_19133;
var statearr_19183_19251 = state_19133__$1;
(statearr_19183_19251[(2)] = null);

(statearr_19183_19251[(1)] = (35));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (17))){
var state_19133__$1 = state_19133;
var statearr_19184_19252 = state_19133__$1;
(statearr_19184_19252[(2)] = null);

(statearr_19184_19252[(1)] = (18));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (3))){
var inst_19131 = (state_19133[(2)]);
var state_19133__$1 = state_19133;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_19133__$1,inst_19131);
} else {
if((state_val_19134 === (12))){
var inst_19060 = (state_19133[(2)]);
var state_19133__$1 = state_19133;
var statearr_19185_19253 = state_19133__$1;
(statearr_19185_19253[(2)] = inst_19060);

(statearr_19185_19253[(1)] = (9));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (2))){
var state_19133__$1 = state_19133;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_19133__$1,(4),ch);
} else {
if((state_val_19134 === (23))){
var state_19133__$1 = state_19133;
var statearr_19186_19254 = state_19133__$1;
(statearr_19186_19254[(2)] = null);

(statearr_19186_19254[(1)] = (24));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (35))){
var inst_19115 = (state_19133[(2)]);
var state_19133__$1 = state_19133;
var statearr_19187_19255 = state_19133__$1;
(statearr_19187_19255[(2)] = inst_19115);

(statearr_19187_19255[(1)] = (29));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (19))){
var inst_19034 = (state_19133[(7)]);
var inst_19038 = cljs.core.chunk_first.call(null,inst_19034);
var inst_19039 = cljs.core.chunk_rest.call(null,inst_19034);
var inst_19040 = cljs.core.count.call(null,inst_19038);
var inst_19014 = inst_19039;
var inst_19015 = inst_19038;
var inst_19016 = inst_19040;
var inst_19017 = (0);
var state_19133__$1 = (function (){var statearr_19188 = state_19133;
(statearr_19188[(13)] = inst_19017);

(statearr_19188[(14)] = inst_19016);

(statearr_19188[(15)] = inst_19015);

(statearr_19188[(17)] = inst_19014);

return statearr_19188;
})();
var statearr_19189_19256 = state_19133__$1;
(statearr_19189_19256[(2)] = null);

(statearr_19189_19256[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (11))){
var inst_19034 = (state_19133[(7)]);
var inst_19014 = (state_19133[(17)]);
var inst_19034__$1 = cljs.core.seq.call(null,inst_19014);
var state_19133__$1 = (function (){var statearr_19190 = state_19133;
(statearr_19190[(7)] = inst_19034__$1);

return statearr_19190;
})();
if(inst_19034__$1){
var statearr_19191_19257 = state_19133__$1;
(statearr_19191_19257[(1)] = (16));

} else {
var statearr_19192_19258 = state_19133__$1;
(statearr_19192_19258[(1)] = (17));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (9))){
var inst_19062 = (state_19133[(2)]);
var state_19133__$1 = state_19133;
var statearr_19193_19259 = state_19133__$1;
(statearr_19193_19259[(2)] = inst_19062);

(statearr_19193_19259[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (5))){
var inst_19012 = cljs.core.deref.call(null,cs);
var inst_19013 = cljs.core.seq.call(null,inst_19012);
var inst_19014 = inst_19013;
var inst_19015 = null;
var inst_19016 = (0);
var inst_19017 = (0);
var state_19133__$1 = (function (){var statearr_19194 = state_19133;
(statearr_19194[(13)] = inst_19017);

(statearr_19194[(14)] = inst_19016);

(statearr_19194[(15)] = inst_19015);

(statearr_19194[(17)] = inst_19014);

return statearr_19194;
})();
var statearr_19195_19260 = state_19133__$1;
(statearr_19195_19260[(2)] = null);

(statearr_19195_19260[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (14))){
var state_19133__$1 = state_19133;
var statearr_19196_19261 = state_19133__$1;
(statearr_19196_19261[(2)] = null);

(statearr_19196_19261[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (45))){
var inst_19123 = (state_19133[(2)]);
var state_19133__$1 = state_19133;
var statearr_19197_19262 = state_19133__$1;
(statearr_19197_19262[(2)] = inst_19123);

(statearr_19197_19262[(1)] = (44));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (26))){
var inst_19065 = (state_19133[(29)]);
var inst_19119 = (state_19133[(2)]);
var inst_19120 = cljs.core.seq.call(null,inst_19065);
var state_19133__$1 = (function (){var statearr_19198 = state_19133;
(statearr_19198[(31)] = inst_19119);

return statearr_19198;
})();
if(inst_19120){
var statearr_19199_19263 = state_19133__$1;
(statearr_19199_19263[(1)] = (42));

} else {
var statearr_19200_19264 = state_19133__$1;
(statearr_19200_19264[(1)] = (43));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (16))){
var inst_19034 = (state_19133[(7)]);
var inst_19036 = cljs.core.chunked_seq_QMARK_.call(null,inst_19034);
var state_19133__$1 = state_19133;
if(inst_19036){
var statearr_19201_19265 = state_19133__$1;
(statearr_19201_19265[(1)] = (19));

} else {
var statearr_19202_19266 = state_19133__$1;
(statearr_19202_19266[(1)] = (20));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (38))){
var inst_19112 = (state_19133[(2)]);
var state_19133__$1 = state_19133;
var statearr_19203_19267 = state_19133__$1;
(statearr_19203_19267[(2)] = inst_19112);

(statearr_19203_19267[(1)] = (35));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (30))){
var state_19133__$1 = state_19133;
var statearr_19204_19268 = state_19133__$1;
(statearr_19204_19268[(2)] = null);

(statearr_19204_19268[(1)] = (32));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (10))){
var inst_19017 = (state_19133[(13)]);
var inst_19015 = (state_19133[(15)]);
var inst_19023 = cljs.core._nth.call(null,inst_19015,inst_19017);
var inst_19024 = cljs.core.nth.call(null,inst_19023,(0),null);
var inst_19025 = cljs.core.nth.call(null,inst_19023,(1),null);
var state_19133__$1 = (function (){var statearr_19205 = state_19133;
(statearr_19205[(26)] = inst_19024);

return statearr_19205;
})();
if(cljs.core.truth_(inst_19025)){
var statearr_19206_19269 = state_19133__$1;
(statearr_19206_19269[(1)] = (13));

} else {
var statearr_19207_19270 = state_19133__$1;
(statearr_19207_19270[(1)] = (14));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (18))){
var inst_19058 = (state_19133[(2)]);
var state_19133__$1 = state_19133;
var statearr_19208_19271 = state_19133__$1;
(statearr_19208_19271[(2)] = inst_19058);

(statearr_19208_19271[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (42))){
var state_19133__$1 = state_19133;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_19133__$1,(45),dchan);
} else {
if((state_val_19134 === (37))){
var inst_19005 = (state_19133[(9)]);
var inst_19092 = (state_19133[(25)]);
var inst_19101 = (state_19133[(23)]);
var inst_19101__$1 = cljs.core.first.call(null,inst_19092);
var inst_19102 = cljs.core.async.put_BANG_.call(null,inst_19101__$1,inst_19005,done);
var state_19133__$1 = (function (){var statearr_19209 = state_19133;
(statearr_19209[(23)] = inst_19101__$1);

return statearr_19209;
})();
if(cljs.core.truth_(inst_19102)){
var statearr_19210_19272 = state_19133__$1;
(statearr_19210_19272[(1)] = (39));

} else {
var statearr_19211_19273 = state_19133__$1;
(statearr_19211_19273[(1)] = (40));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19134 === (8))){
var inst_19017 = (state_19133[(13)]);
var inst_19016 = (state_19133[(14)]);
var inst_19019 = (inst_19017 < inst_19016);
var inst_19020 = inst_19019;
var state_19133__$1 = state_19133;
if(cljs.core.truth_(inst_19020)){
var statearr_19212_19274 = state_19133__$1;
(statearr_19212_19274[(1)] = (10));

} else {
var statearr_19213_19275 = state_19133__$1;
(statearr_19213_19275[(1)] = (11));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___19221,cs,m,dchan,dctr,done))
;
return ((function (switch__17802__auto__,c__17914__auto___19221,cs,m,dchan,dctr,done){
return (function() {
var cljs$core$async$mult_$_state_machine__17803__auto__ = null;
var cljs$core$async$mult_$_state_machine__17803__auto____0 = (function (){
var statearr_19217 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_19217[(0)] = cljs$core$async$mult_$_state_machine__17803__auto__);

(statearr_19217[(1)] = (1));

return statearr_19217;
});
var cljs$core$async$mult_$_state_machine__17803__auto____1 = (function (state_19133){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_19133);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e19218){if((e19218 instanceof Object)){
var ex__17806__auto__ = e19218;
var statearr_19219_19276 = state_19133;
(statearr_19219_19276[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_19133);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e19218;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__19277 = state_19133;
state_19133 = G__19277;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$mult_$_state_machine__17803__auto__ = function(state_19133){
switch(arguments.length){
case 0:
return cljs$core$async$mult_$_state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$mult_$_state_machine__17803__auto____1.call(this,state_19133);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$mult_$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__17803__auto____0;
cljs$core$async$mult_$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__17803__auto____1;
return cljs$core$async$mult_$_state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___19221,cs,m,dchan,dctr,done))
})();
var state__17916__auto__ = (function (){var statearr_19220 = f__17915__auto__.call(null);
(statearr_19220[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___19221);

return statearr_19220;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___19221,cs,m,dchan,dctr,done))
);


return m;
});
/**
 * Copies the mult source onto the supplied channel.
 * 
 *   By default the channel will be closed when the source closes,
 *   but can be determined by the close? parameter.
 */
cljs.core.async.tap = (function cljs$core$async$tap(var_args){
var args19278 = [];
var len__7291__auto___19281 = arguments.length;
var i__7292__auto___19282 = (0);
while(true){
if((i__7292__auto___19282 < len__7291__auto___19281)){
args19278.push((arguments[i__7292__auto___19282]));

var G__19283 = (i__7292__auto___19282 + (1));
i__7292__auto___19282 = G__19283;
continue;
} else {
}
break;
}

var G__19280 = args19278.length;
switch (G__19280) {
case 2:
return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args19278.length)].join('')));

}
});

cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = (function (mult,ch){
return cljs.core.async.tap.call(null,mult,ch,true);
});

cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = (function (mult,ch,close_QMARK_){
cljs.core.async.tap_STAR_.call(null,mult,ch,close_QMARK_);

return ch;
});

cljs.core.async.tap.cljs$lang$maxFixedArity = 3;
/**
 * Disconnects a target channel from a mult
 */
cljs.core.async.untap = (function cljs$core$async$untap(mult,ch){
return cljs.core.async.untap_STAR_.call(null,mult,ch);
});
/**
 * Disconnects all target channels from a mult
 */
cljs.core.async.untap_all = (function cljs$core$async$untap_all(mult){
return cljs.core.async.untap_all_STAR_.call(null,mult);
});

/**
 * @interface
 */
cljs.core.async.Mix = function(){};

cljs.core.async.admix_STAR_ = (function cljs$core$async$admix_STAR_(m,ch){
if((!((m == null))) && (!((m.cljs$core$async$Mix$admix_STAR_$arity$2 == null)))){
return m.cljs$core$async$Mix$admix_STAR_$arity$2(m,ch);
} else {
var x__6879__auto__ = (((m == null))?null:m);
var m__6880__auto__ = (cljs.core.async.admix_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,m,ch);
} else {
var m__6880__auto____$1 = (cljs.core.async.admix_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,m,ch);
} else {
throw cljs.core.missing_protocol.call(null,"Mix.admix*",m);
}
}
}
});

cljs.core.async.unmix_STAR_ = (function cljs$core$async$unmix_STAR_(m,ch){
if((!((m == null))) && (!((m.cljs$core$async$Mix$unmix_STAR_$arity$2 == null)))){
return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m,ch);
} else {
var x__6879__auto__ = (((m == null))?null:m);
var m__6880__auto__ = (cljs.core.async.unmix_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,m,ch);
} else {
var m__6880__auto____$1 = (cljs.core.async.unmix_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,m,ch);
} else {
throw cljs.core.missing_protocol.call(null,"Mix.unmix*",m);
}
}
}
});

cljs.core.async.unmix_all_STAR_ = (function cljs$core$async$unmix_all_STAR_(m){
if((!((m == null))) && (!((m.cljs$core$async$Mix$unmix_all_STAR_$arity$1 == null)))){
return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
} else {
var x__6879__auto__ = (((m == null))?null:m);
var m__6880__auto__ = (cljs.core.async.unmix_all_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,m);
} else {
var m__6880__auto____$1 = (cljs.core.async.unmix_all_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,m);
} else {
throw cljs.core.missing_protocol.call(null,"Mix.unmix-all*",m);
}
}
}
});

cljs.core.async.toggle_STAR_ = (function cljs$core$async$toggle_STAR_(m,state_map){
if((!((m == null))) && (!((m.cljs$core$async$Mix$toggle_STAR_$arity$2 == null)))){
return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m,state_map);
} else {
var x__6879__auto__ = (((m == null))?null:m);
var m__6880__auto__ = (cljs.core.async.toggle_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,m,state_map);
} else {
var m__6880__auto____$1 = (cljs.core.async.toggle_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,m,state_map);
} else {
throw cljs.core.missing_protocol.call(null,"Mix.toggle*",m);
}
}
}
});

cljs.core.async.solo_mode_STAR_ = (function cljs$core$async$solo_mode_STAR_(m,mode){
if((!((m == null))) && (!((m.cljs$core$async$Mix$solo_mode_STAR_$arity$2 == null)))){
return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m,mode);
} else {
var x__6879__auto__ = (((m == null))?null:m);
var m__6880__auto__ = (cljs.core.async.solo_mode_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,m,mode);
} else {
var m__6880__auto____$1 = (cljs.core.async.solo_mode_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,m,mode);
} else {
throw cljs.core.missing_protocol.call(null,"Mix.solo-mode*",m);
}
}
}
});

cljs.core.async.ioc_alts_BANG_ = (function cljs$core$async$ioc_alts_BANG_(var_args){
var args__7298__auto__ = [];
var len__7291__auto___19295 = arguments.length;
var i__7292__auto___19296 = (0);
while(true){
if((i__7292__auto___19296 < len__7291__auto___19295)){
args__7298__auto__.push((arguments[i__7292__auto___19296]));

var G__19297 = (i__7292__auto___19296 + (1));
i__7292__auto___19296 = G__19297;
continue;
} else {
}
break;
}

var argseq__7299__auto__ = ((((3) < args__7298__auto__.length))?(new cljs.core.IndexedSeq(args__7298__auto__.slice((3)),(0),null)):null);
return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__7299__auto__);
});

cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (state,cont_block,ports,p__19289){
var map__19290 = p__19289;
var map__19290__$1 = ((((!((map__19290 == null)))?((((map__19290.cljs$lang$protocol_mask$partition0$ & (64))) || (map__19290.cljs$core$ISeq$))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__19290):map__19290);
var opts = map__19290__$1;
var statearr_19292_19298 = state;
(statearr_19292_19298[cljs.core.async.impl.ioc_helpers.STATE_IDX] = cont_block);


var temp__4657__auto__ = cljs.core.async.do_alts.call(null,((function (map__19290,map__19290__$1,opts){
return (function (val){
var statearr_19293_19299 = state;
(statearr_19293_19299[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = val);


return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state);
});})(map__19290,map__19290__$1,opts))
,ports,opts);
if(cljs.core.truth_(temp__4657__auto__)){
var cb = temp__4657__auto__;
var statearr_19294_19300 = state;
(statearr_19294_19300[cljs.core.async.impl.ioc_helpers.VALUE_IDX] = cljs.core.deref.call(null,cb));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
});

cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = (3);

cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = (function (seq19285){
var G__19286 = cljs.core.first.call(null,seq19285);
var seq19285__$1 = cljs.core.next.call(null,seq19285);
var G__19287 = cljs.core.first.call(null,seq19285__$1);
var seq19285__$2 = cljs.core.next.call(null,seq19285__$1);
var G__19288 = cljs.core.first.call(null,seq19285__$2);
var seq19285__$3 = cljs.core.next.call(null,seq19285__$2);
return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__19286,G__19287,G__19288,seq19285__$3);
});
/**
 * Creates and returns a mix of one or more input channels which will
 *   be put on the supplied out channel. Input sources can be added to
 *   the mix with 'admix', and removed with 'unmix'. A mix supports
 *   soloing, muting and pausing multiple inputs atomically using
 *   'toggle', and can solo using either muting or pausing as determined
 *   by 'solo-mode'.
 * 
 *   Each channel can have zero or more boolean modes set via 'toggle':
 * 
 *   :solo - when true, only this (ond other soloed) channel(s) will appear
 *        in the mix output channel. :mute and :pause states of soloed
 *        channels are ignored. If solo-mode is :mute, non-soloed
 *        channels are muted, if :pause, non-soloed channels are
 *        paused.
 * 
 *   :mute - muted channels will have their contents consumed but not included in the mix
 *   :pause - paused channels will not have their contents consumed (and thus also not included in the mix)
 */
cljs.core.async.mix = (function cljs$core$async$mix(out){
var cs = cljs.core.atom.call(null,cljs.core.PersistentArrayMap.EMPTY);
var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"pause","pause",-2095325672),null,new cljs.core.Keyword(null,"mute","mute",1151223646),null], null), null);
var attrs = cljs.core.conj.call(null,solo_modes,new cljs.core.Keyword(null,"solo","solo",-316350075));
var solo_mode = cljs.core.atom.call(null,new cljs.core.Keyword(null,"mute","mute",1151223646));
var change = cljs.core.async.chan.call(null);
var changed = ((function (cs,solo_modes,attrs,solo_mode,change){
return (function (){
return cljs.core.async.put_BANG_.call(null,change,true);
});})(cs,solo_modes,attrs,solo_mode,change))
;
var pick = ((function (cs,solo_modes,attrs,solo_mode,change,changed){
return (function (attr,chs){
return cljs.core.reduce_kv.call(null,((function (cs,solo_modes,attrs,solo_mode,change,changed){
return (function (ret,c,v){
if(cljs.core.truth_(attr.call(null,v))){
return cljs.core.conj.call(null,ret,c);
} else {
return ret;
}
});})(cs,solo_modes,attrs,solo_mode,change,changed))
,cljs.core.PersistentHashSet.EMPTY,chs);
});})(cs,solo_modes,attrs,solo_mode,change,changed))
;
var calc_state = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick){
return (function (){
var chs = cljs.core.deref.call(null,cs);
var mode = cljs.core.deref.call(null,solo_mode);
var solos = pick.call(null,new cljs.core.Keyword(null,"solo","solo",-316350075),chs);
var pauses = pick.call(null,new cljs.core.Keyword(null,"pause","pause",-2095325672),chs);
return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"solos","solos",1441458643),solos,new cljs.core.Keyword(null,"mutes","mutes",1068806309),pick.call(null,new cljs.core.Keyword(null,"mute","mute",1151223646),chs),new cljs.core.Keyword(null,"reads","reads",-1215067361),cljs.core.conj.call(null,(((cljs.core._EQ_.call(null,mode,new cljs.core.Keyword(null,"pause","pause",-2095325672))) && (!(cljs.core.empty_QMARK_.call(null,solos))))?cljs.core.vec.call(null,solos):cljs.core.vec.call(null,cljs.core.remove.call(null,pauses,cljs.core.keys.call(null,chs)))),change)], null);
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick))
;
var m = (function (){
if(typeof cljs.core.async.t_cljs$core$async19464 !== 'undefined'){
} else {

/**
* @constructor
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.async.Mix}
 * @implements {cljs.core.async.Mux}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async19464 = (function (change,mix,solo_mode,pick,cs,calc_state,out,changed,solo_modes,attrs,meta19465){
this.change = change;
this.mix = mix;
this.solo_mode = solo_mode;
this.pick = pick;
this.cs = cs;
this.calc_state = calc_state;
this.out = out;
this.changed = changed;
this.solo_modes = solo_modes;
this.attrs = attrs;
this.meta19465 = meta19465;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
cljs.core.async.t_cljs$core$async19464.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function (_19466,meta19465__$1){
var self__ = this;
var _19466__$1 = this;
return (new cljs.core.async.t_cljs$core$async19464(self__.change,self__.mix,self__.solo_mode,self__.pick,self__.cs,self__.calc_state,self__.out,self__.changed,self__.solo_modes,self__.attrs,meta19465__$1));
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

cljs.core.async.t_cljs$core$async19464.prototype.cljs$core$IMeta$_meta$arity$1 = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function (_19466){
var self__ = this;
var _19466__$1 = this;
return self__.meta19465;
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

cljs.core.async.t_cljs$core$async19464.prototype.cljs$core$async$Mux$ = true;

cljs.core.async.t_cljs$core$async19464.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function (_){
var self__ = this;
var ___$1 = this;
return self__.out;
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

cljs.core.async.t_cljs$core$async19464.prototype.cljs$core$async$Mix$ = true;

cljs.core.async.t_cljs$core$async19464.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function (_,ch){
var self__ = this;
var ___$1 = this;
cljs.core.swap_BANG_.call(null,self__.cs,cljs.core.assoc,ch,cljs.core.PersistentArrayMap.EMPTY);

return self__.changed.call(null);
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

cljs.core.async.t_cljs$core$async19464.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function (_,ch){
var self__ = this;
var ___$1 = this;
cljs.core.swap_BANG_.call(null,self__.cs,cljs.core.dissoc,ch);

return self__.changed.call(null);
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

cljs.core.async.t_cljs$core$async19464.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function (_){
var self__ = this;
var ___$1 = this;
cljs.core.reset_BANG_.call(null,self__.cs,cljs.core.PersistentArrayMap.EMPTY);

return self__.changed.call(null);
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

cljs.core.async.t_cljs$core$async19464.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function (_,state_map){
var self__ = this;
var ___$1 = this;
cljs.core.swap_BANG_.call(null,self__.cs,cljs.core.partial.call(null,cljs.core.merge_with,cljs.core.merge),state_map);

return self__.changed.call(null);
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

cljs.core.async.t_cljs$core$async19464.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function (_,mode){
var self__ = this;
var ___$1 = this;
if(cljs.core.truth_(self__.solo_modes.call(null,mode))){
} else {
throw (new Error([cljs.core.str("Assert failed: "),cljs.core.str([cljs.core.str("mode must be one of: "),cljs.core.str(self__.solo_modes)].join('')),cljs.core.str("\n"),cljs.core.str("(solo-modes mode)")].join('')));
}

cljs.core.reset_BANG_.call(null,self__.solo_mode,mode);

return self__.changed.call(null);
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

cljs.core.async.t_cljs$core$async19464.getBasis = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function (){
return new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"change","change",477485025,null),cljs.core.with_meta(new cljs.core.Symbol(null,"mix","mix",2121373763,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"out","out",729986010,null)], null))),new cljs.core.Keyword(null,"doc","doc",1913296891),"Creates and returns a mix of one or more input channels which will\n  be put on the supplied out channel. Input sources can be added to\n  the mix with 'admix', and removed with 'unmix'. A mix supports\n  soloing, muting and pausing multiple inputs atomically using\n  'toggle', and can solo using either muting or pausing as determined\n  by 'solo-mode'.\n\n  Each channel can have zero or more boolean modes set via 'toggle':\n\n  :solo - when true, only this (ond other soloed) channel(s) will appear\n          in the mix output channel. :mute and :pause states of soloed\n          channels are ignored. If solo-mode is :mute, non-soloed\n          channels are muted, if :pause, non-soloed channels are\n          paused.\n\n  :mute - muted channels will have their contents consumed but not included in the mix\n  :pause - paused channels will not have their contents consumed (and thus also not included in the mix)\n"], null)),new cljs.core.Symbol(null,"solo-mode","solo-mode",2031788074,null),new cljs.core.Symbol(null,"pick","pick",1300068175,null),new cljs.core.Symbol(null,"cs","cs",-117024463,null),new cljs.core.Symbol(null,"calc-state","calc-state",-349968968,null),new cljs.core.Symbol(null,"out","out",729986010,null),new cljs.core.Symbol(null,"changed","changed",-2083710852,null),new cljs.core.Symbol(null,"solo-modes","solo-modes",882180540,null),new cljs.core.Symbol(null,"attrs","attrs",-450137186,null),new cljs.core.Symbol(null,"meta19465","meta19465",537698019,null)], null);
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

cljs.core.async.t_cljs$core$async19464.cljs$lang$type = true;

cljs.core.async.t_cljs$core$async19464.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async19464";

cljs.core.async.t_cljs$core$async19464.cljs$lang$ctorPrWriter = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function (this__6822__auto__,writer__6823__auto__,opt__6824__auto__){
return cljs.core._write.call(null,writer__6823__auto__,"cljs.core.async/t_cljs$core$async19464");
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

cljs.core.async.__GT_t_cljs$core$async19464 = ((function (cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state){
return (function cljs$core$async$mix_$___GT_t_cljs$core$async19464(change__$1,mix__$1,solo_mode__$1,pick__$1,cs__$1,calc_state__$1,out__$1,changed__$1,solo_modes__$1,attrs__$1,meta19465){
return (new cljs.core.async.t_cljs$core$async19464(change__$1,mix__$1,solo_mode__$1,pick__$1,cs__$1,calc_state__$1,out__$1,changed__$1,solo_modes__$1,attrs__$1,meta19465));
});})(cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state))
;

}

return (new cljs.core.async.t_cljs$core$async19464(change,cljs$core$async$mix,solo_mode,pick,cs,calc_state,out,changed,solo_modes,attrs,cljs.core.PersistentArrayMap.EMPTY));
})()
;
var c__17914__auto___19627 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___19627,cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state,m){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___19627,cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state,m){
return (function (state_19564){
var state_val_19565 = (state_19564[(1)]);
if((state_val_19565 === (7))){
var inst_19482 = (state_19564[(2)]);
var state_19564__$1 = state_19564;
var statearr_19566_19628 = state_19564__$1;
(statearr_19566_19628[(2)] = inst_19482);

(statearr_19566_19628[(1)] = (4));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (20))){
var inst_19494 = (state_19564[(7)]);
var state_19564__$1 = state_19564;
var statearr_19567_19629 = state_19564__$1;
(statearr_19567_19629[(2)] = inst_19494);

(statearr_19567_19629[(1)] = (21));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (27))){
var state_19564__$1 = state_19564;
var statearr_19568_19630 = state_19564__$1;
(statearr_19568_19630[(2)] = null);

(statearr_19568_19630[(1)] = (28));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (1))){
var inst_19470 = (state_19564[(8)]);
var inst_19470__$1 = calc_state.call(null);
var inst_19472 = (inst_19470__$1 == null);
var inst_19473 = cljs.core.not.call(null,inst_19472);
var state_19564__$1 = (function (){var statearr_19569 = state_19564;
(statearr_19569[(8)] = inst_19470__$1);

return statearr_19569;
})();
if(inst_19473){
var statearr_19570_19631 = state_19564__$1;
(statearr_19570_19631[(1)] = (2));

} else {
var statearr_19571_19632 = state_19564__$1;
(statearr_19571_19632[(1)] = (3));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (24))){
var inst_19538 = (state_19564[(9)]);
var inst_19524 = (state_19564[(10)]);
var inst_19517 = (state_19564[(11)]);
var inst_19538__$1 = inst_19517.call(null,inst_19524);
var state_19564__$1 = (function (){var statearr_19572 = state_19564;
(statearr_19572[(9)] = inst_19538__$1);

return statearr_19572;
})();
if(cljs.core.truth_(inst_19538__$1)){
var statearr_19573_19633 = state_19564__$1;
(statearr_19573_19633[(1)] = (29));

} else {
var statearr_19574_19634 = state_19564__$1;
(statearr_19574_19634[(1)] = (30));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (4))){
var inst_19485 = (state_19564[(2)]);
var state_19564__$1 = state_19564;
if(cljs.core.truth_(inst_19485)){
var statearr_19575_19635 = state_19564__$1;
(statearr_19575_19635[(1)] = (8));

} else {
var statearr_19576_19636 = state_19564__$1;
(statearr_19576_19636[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (15))){
var inst_19511 = (state_19564[(2)]);
var state_19564__$1 = state_19564;
if(cljs.core.truth_(inst_19511)){
var statearr_19577_19637 = state_19564__$1;
(statearr_19577_19637[(1)] = (19));

} else {
var statearr_19578_19638 = state_19564__$1;
(statearr_19578_19638[(1)] = (20));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (21))){
var inst_19516 = (state_19564[(12)]);
var inst_19516__$1 = (state_19564[(2)]);
var inst_19517 = cljs.core.get.call(null,inst_19516__$1,new cljs.core.Keyword(null,"solos","solos",1441458643));
var inst_19518 = cljs.core.get.call(null,inst_19516__$1,new cljs.core.Keyword(null,"mutes","mutes",1068806309));
var inst_19519 = cljs.core.get.call(null,inst_19516__$1,new cljs.core.Keyword(null,"reads","reads",-1215067361));
var state_19564__$1 = (function (){var statearr_19579 = state_19564;
(statearr_19579[(12)] = inst_19516__$1);

(statearr_19579[(13)] = inst_19518);

(statearr_19579[(11)] = inst_19517);

return statearr_19579;
})();
return cljs.core.async.ioc_alts_BANG_.call(null,state_19564__$1,(22),inst_19519);
} else {
if((state_val_19565 === (31))){
var inst_19546 = (state_19564[(2)]);
var state_19564__$1 = state_19564;
if(cljs.core.truth_(inst_19546)){
var statearr_19580_19639 = state_19564__$1;
(statearr_19580_19639[(1)] = (32));

} else {
var statearr_19581_19640 = state_19564__$1;
(statearr_19581_19640[(1)] = (33));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (32))){
var inst_19523 = (state_19564[(14)]);
var state_19564__$1 = state_19564;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_19564__$1,(35),out,inst_19523);
} else {
if((state_val_19565 === (33))){
var inst_19516 = (state_19564[(12)]);
var inst_19494 = inst_19516;
var state_19564__$1 = (function (){var statearr_19582 = state_19564;
(statearr_19582[(7)] = inst_19494);

return statearr_19582;
})();
var statearr_19583_19641 = state_19564__$1;
(statearr_19583_19641[(2)] = null);

(statearr_19583_19641[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (13))){
var inst_19494 = (state_19564[(7)]);
var inst_19501 = inst_19494.cljs$lang$protocol_mask$partition0$;
var inst_19502 = (inst_19501 & (64));
var inst_19503 = inst_19494.cljs$core$ISeq$;
var inst_19504 = (inst_19502) || (inst_19503);
var state_19564__$1 = state_19564;
if(cljs.core.truth_(inst_19504)){
var statearr_19584_19642 = state_19564__$1;
(statearr_19584_19642[(1)] = (16));

} else {
var statearr_19585_19643 = state_19564__$1;
(statearr_19585_19643[(1)] = (17));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (22))){
var inst_19523 = (state_19564[(14)]);
var inst_19524 = (state_19564[(10)]);
var inst_19522 = (state_19564[(2)]);
var inst_19523__$1 = cljs.core.nth.call(null,inst_19522,(0),null);
var inst_19524__$1 = cljs.core.nth.call(null,inst_19522,(1),null);
var inst_19525 = (inst_19523__$1 == null);
var inst_19526 = cljs.core._EQ_.call(null,inst_19524__$1,change);
var inst_19527 = (inst_19525) || (inst_19526);
var state_19564__$1 = (function (){var statearr_19586 = state_19564;
(statearr_19586[(14)] = inst_19523__$1);

(statearr_19586[(10)] = inst_19524__$1);

return statearr_19586;
})();
if(cljs.core.truth_(inst_19527)){
var statearr_19587_19644 = state_19564__$1;
(statearr_19587_19644[(1)] = (23));

} else {
var statearr_19588_19645 = state_19564__$1;
(statearr_19588_19645[(1)] = (24));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (36))){
var inst_19516 = (state_19564[(12)]);
var inst_19494 = inst_19516;
var state_19564__$1 = (function (){var statearr_19589 = state_19564;
(statearr_19589[(7)] = inst_19494);

return statearr_19589;
})();
var statearr_19590_19646 = state_19564__$1;
(statearr_19590_19646[(2)] = null);

(statearr_19590_19646[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (29))){
var inst_19538 = (state_19564[(9)]);
var state_19564__$1 = state_19564;
var statearr_19591_19647 = state_19564__$1;
(statearr_19591_19647[(2)] = inst_19538);

(statearr_19591_19647[(1)] = (31));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (6))){
var state_19564__$1 = state_19564;
var statearr_19592_19648 = state_19564__$1;
(statearr_19592_19648[(2)] = false);

(statearr_19592_19648[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (28))){
var inst_19534 = (state_19564[(2)]);
var inst_19535 = calc_state.call(null);
var inst_19494 = inst_19535;
var state_19564__$1 = (function (){var statearr_19593 = state_19564;
(statearr_19593[(15)] = inst_19534);

(statearr_19593[(7)] = inst_19494);

return statearr_19593;
})();
var statearr_19594_19649 = state_19564__$1;
(statearr_19594_19649[(2)] = null);

(statearr_19594_19649[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (25))){
var inst_19560 = (state_19564[(2)]);
var state_19564__$1 = state_19564;
var statearr_19595_19650 = state_19564__$1;
(statearr_19595_19650[(2)] = inst_19560);

(statearr_19595_19650[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (34))){
var inst_19558 = (state_19564[(2)]);
var state_19564__$1 = state_19564;
var statearr_19596_19651 = state_19564__$1;
(statearr_19596_19651[(2)] = inst_19558);

(statearr_19596_19651[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (17))){
var state_19564__$1 = state_19564;
var statearr_19597_19652 = state_19564__$1;
(statearr_19597_19652[(2)] = false);

(statearr_19597_19652[(1)] = (18));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (3))){
var state_19564__$1 = state_19564;
var statearr_19598_19653 = state_19564__$1;
(statearr_19598_19653[(2)] = false);

(statearr_19598_19653[(1)] = (4));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (12))){
var inst_19562 = (state_19564[(2)]);
var state_19564__$1 = state_19564;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_19564__$1,inst_19562);
} else {
if((state_val_19565 === (2))){
var inst_19470 = (state_19564[(8)]);
var inst_19475 = inst_19470.cljs$lang$protocol_mask$partition0$;
var inst_19476 = (inst_19475 & (64));
var inst_19477 = inst_19470.cljs$core$ISeq$;
var inst_19478 = (inst_19476) || (inst_19477);
var state_19564__$1 = state_19564;
if(cljs.core.truth_(inst_19478)){
var statearr_19599_19654 = state_19564__$1;
(statearr_19599_19654[(1)] = (5));

} else {
var statearr_19600_19655 = state_19564__$1;
(statearr_19600_19655[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (23))){
var inst_19523 = (state_19564[(14)]);
var inst_19529 = (inst_19523 == null);
var state_19564__$1 = state_19564;
if(cljs.core.truth_(inst_19529)){
var statearr_19601_19656 = state_19564__$1;
(statearr_19601_19656[(1)] = (26));

} else {
var statearr_19602_19657 = state_19564__$1;
(statearr_19602_19657[(1)] = (27));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (35))){
var inst_19549 = (state_19564[(2)]);
var state_19564__$1 = state_19564;
if(cljs.core.truth_(inst_19549)){
var statearr_19603_19658 = state_19564__$1;
(statearr_19603_19658[(1)] = (36));

} else {
var statearr_19604_19659 = state_19564__$1;
(statearr_19604_19659[(1)] = (37));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (19))){
var inst_19494 = (state_19564[(7)]);
var inst_19513 = cljs.core.apply.call(null,cljs.core.hash_map,inst_19494);
var state_19564__$1 = state_19564;
var statearr_19605_19660 = state_19564__$1;
(statearr_19605_19660[(2)] = inst_19513);

(statearr_19605_19660[(1)] = (21));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (11))){
var inst_19494 = (state_19564[(7)]);
var inst_19498 = (inst_19494 == null);
var inst_19499 = cljs.core.not.call(null,inst_19498);
var state_19564__$1 = state_19564;
if(inst_19499){
var statearr_19606_19661 = state_19564__$1;
(statearr_19606_19661[(1)] = (13));

} else {
var statearr_19607_19662 = state_19564__$1;
(statearr_19607_19662[(1)] = (14));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (9))){
var inst_19470 = (state_19564[(8)]);
var state_19564__$1 = state_19564;
var statearr_19608_19663 = state_19564__$1;
(statearr_19608_19663[(2)] = inst_19470);

(statearr_19608_19663[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (5))){
var state_19564__$1 = state_19564;
var statearr_19609_19664 = state_19564__$1;
(statearr_19609_19664[(2)] = true);

(statearr_19609_19664[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (14))){
var state_19564__$1 = state_19564;
var statearr_19610_19665 = state_19564__$1;
(statearr_19610_19665[(2)] = false);

(statearr_19610_19665[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (26))){
var inst_19524 = (state_19564[(10)]);
var inst_19531 = cljs.core.swap_BANG_.call(null,cs,cljs.core.dissoc,inst_19524);
var state_19564__$1 = state_19564;
var statearr_19611_19666 = state_19564__$1;
(statearr_19611_19666[(2)] = inst_19531);

(statearr_19611_19666[(1)] = (28));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (16))){
var state_19564__$1 = state_19564;
var statearr_19612_19667 = state_19564__$1;
(statearr_19612_19667[(2)] = true);

(statearr_19612_19667[(1)] = (18));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (38))){
var inst_19554 = (state_19564[(2)]);
var state_19564__$1 = state_19564;
var statearr_19613_19668 = state_19564__$1;
(statearr_19613_19668[(2)] = inst_19554);

(statearr_19613_19668[(1)] = (34));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (30))){
var inst_19524 = (state_19564[(10)]);
var inst_19518 = (state_19564[(13)]);
var inst_19517 = (state_19564[(11)]);
var inst_19541 = cljs.core.empty_QMARK_.call(null,inst_19517);
var inst_19542 = inst_19518.call(null,inst_19524);
var inst_19543 = cljs.core.not.call(null,inst_19542);
var inst_19544 = (inst_19541) && (inst_19543);
var state_19564__$1 = state_19564;
var statearr_19614_19669 = state_19564__$1;
(statearr_19614_19669[(2)] = inst_19544);

(statearr_19614_19669[(1)] = (31));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (10))){
var inst_19470 = (state_19564[(8)]);
var inst_19490 = (state_19564[(2)]);
var inst_19491 = cljs.core.get.call(null,inst_19490,new cljs.core.Keyword(null,"solos","solos",1441458643));
var inst_19492 = cljs.core.get.call(null,inst_19490,new cljs.core.Keyword(null,"mutes","mutes",1068806309));
var inst_19493 = cljs.core.get.call(null,inst_19490,new cljs.core.Keyword(null,"reads","reads",-1215067361));
var inst_19494 = inst_19470;
var state_19564__$1 = (function (){var statearr_19615 = state_19564;
(statearr_19615[(16)] = inst_19492);

(statearr_19615[(17)] = inst_19493);

(statearr_19615[(7)] = inst_19494);

(statearr_19615[(18)] = inst_19491);

return statearr_19615;
})();
var statearr_19616_19670 = state_19564__$1;
(statearr_19616_19670[(2)] = null);

(statearr_19616_19670[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (18))){
var inst_19508 = (state_19564[(2)]);
var state_19564__$1 = state_19564;
var statearr_19617_19671 = state_19564__$1;
(statearr_19617_19671[(2)] = inst_19508);

(statearr_19617_19671[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (37))){
var state_19564__$1 = state_19564;
var statearr_19618_19672 = state_19564__$1;
(statearr_19618_19672[(2)] = null);

(statearr_19618_19672[(1)] = (38));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19565 === (8))){
var inst_19470 = (state_19564[(8)]);
var inst_19487 = cljs.core.apply.call(null,cljs.core.hash_map,inst_19470);
var state_19564__$1 = state_19564;
var statearr_19619_19673 = state_19564__$1;
(statearr_19619_19673[(2)] = inst_19487);

(statearr_19619_19673[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___19627,cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state,m))
;
return ((function (switch__17802__auto__,c__17914__auto___19627,cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state,m){
return (function() {
var cljs$core$async$mix_$_state_machine__17803__auto__ = null;
var cljs$core$async$mix_$_state_machine__17803__auto____0 = (function (){
var statearr_19623 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_19623[(0)] = cljs$core$async$mix_$_state_machine__17803__auto__);

(statearr_19623[(1)] = (1));

return statearr_19623;
});
var cljs$core$async$mix_$_state_machine__17803__auto____1 = (function (state_19564){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_19564);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e19624){if((e19624 instanceof Object)){
var ex__17806__auto__ = e19624;
var statearr_19625_19674 = state_19564;
(statearr_19625_19674[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_19564);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e19624;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__19675 = state_19564;
state_19564 = G__19675;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$mix_$_state_machine__17803__auto__ = function(state_19564){
switch(arguments.length){
case 0:
return cljs$core$async$mix_$_state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$mix_$_state_machine__17803__auto____1.call(this,state_19564);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$mix_$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__17803__auto____0;
cljs$core$async$mix_$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__17803__auto____1;
return cljs$core$async$mix_$_state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___19627,cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state,m))
})();
var state__17916__auto__ = (function (){var statearr_19626 = f__17915__auto__.call(null);
(statearr_19626[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___19627);

return statearr_19626;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___19627,cs,solo_modes,attrs,solo_mode,change,changed,pick,calc_state,m))
);


return m;
});
/**
 * Adds ch as an input to the mix
 */
cljs.core.async.admix = (function cljs$core$async$admix(mix,ch){
return cljs.core.async.admix_STAR_.call(null,mix,ch);
});
/**
 * Removes ch as an input to the mix
 */
cljs.core.async.unmix = (function cljs$core$async$unmix(mix,ch){
return cljs.core.async.unmix_STAR_.call(null,mix,ch);
});
/**
 * removes all inputs from the mix
 */
cljs.core.async.unmix_all = (function cljs$core$async$unmix_all(mix){
return cljs.core.async.unmix_all_STAR_.call(null,mix);
});
/**
 * Atomically sets the state(s) of one or more channels in a mix. The
 *   state map is a map of channels -> channel-state-map. A
 *   channel-state-map is a map of attrs -> boolean, where attr is one or
 *   more of :mute, :pause or :solo. Any states supplied are merged with
 *   the current state.
 * 
 *   Note that channels can be added to a mix via toggle, which can be
 *   used to add channels in a particular (e.g. paused) state.
 */
cljs.core.async.toggle = (function cljs$core$async$toggle(mix,state_map){
return cljs.core.async.toggle_STAR_.call(null,mix,state_map);
});
/**
 * Sets the solo mode of the mix. mode must be one of :mute or :pause
 */
cljs.core.async.solo_mode = (function cljs$core$async$solo_mode(mix,mode){
return cljs.core.async.solo_mode_STAR_.call(null,mix,mode);
});

/**
 * @interface
 */
cljs.core.async.Pub = function(){};

cljs.core.async.sub_STAR_ = (function cljs$core$async$sub_STAR_(p,v,ch,close_QMARK_){
if((!((p == null))) && (!((p.cljs$core$async$Pub$sub_STAR_$arity$4 == null)))){
return p.cljs$core$async$Pub$sub_STAR_$arity$4(p,v,ch,close_QMARK_);
} else {
var x__6879__auto__ = (((p == null))?null:p);
var m__6880__auto__ = (cljs.core.async.sub_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,p,v,ch,close_QMARK_);
} else {
var m__6880__auto____$1 = (cljs.core.async.sub_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,p,v,ch,close_QMARK_);
} else {
throw cljs.core.missing_protocol.call(null,"Pub.sub*",p);
}
}
}
});

cljs.core.async.unsub_STAR_ = (function cljs$core$async$unsub_STAR_(p,v,ch){
if((!((p == null))) && (!((p.cljs$core$async$Pub$unsub_STAR_$arity$3 == null)))){
return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p,v,ch);
} else {
var x__6879__auto__ = (((p == null))?null:p);
var m__6880__auto__ = (cljs.core.async.unsub_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,p,v,ch);
} else {
var m__6880__auto____$1 = (cljs.core.async.unsub_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,p,v,ch);
} else {
throw cljs.core.missing_protocol.call(null,"Pub.unsub*",p);
}
}
}
});

cljs.core.async.unsub_all_STAR_ = (function cljs$core$async$unsub_all_STAR_(var_args){
var args19676 = [];
var len__7291__auto___19679 = arguments.length;
var i__7292__auto___19680 = (0);
while(true){
if((i__7292__auto___19680 < len__7291__auto___19679)){
args19676.push((arguments[i__7292__auto___19680]));

var G__19681 = (i__7292__auto___19680 + (1));
i__7292__auto___19680 = G__19681;
continue;
} else {
}
break;
}

var G__19678 = args19676.length;
switch (G__19678) {
case 1:
return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args19676.length)].join('')));

}
});

cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (p){
if((!((p == null))) && (!((p.cljs$core$async$Pub$unsub_all_STAR_$arity$1 == null)))){
return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
} else {
var x__6879__auto__ = (((p == null))?null:p);
var m__6880__auto__ = (cljs.core.async.unsub_all_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,p);
} else {
var m__6880__auto____$1 = (cljs.core.async.unsub_all_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,p);
} else {
throw cljs.core.missing_protocol.call(null,"Pub.unsub-all*",p);
}
}
}
});

cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (p,v){
if((!((p == null))) && (!((p.cljs$core$async$Pub$unsub_all_STAR_$arity$2 == null)))){
return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p,v);
} else {
var x__6879__auto__ = (((p == null))?null:p);
var m__6880__auto__ = (cljs.core.async.unsub_all_STAR_[goog.typeOf(x__6879__auto__)]);
if(!((m__6880__auto__ == null))){
return m__6880__auto__.call(null,p,v);
} else {
var m__6880__auto____$1 = (cljs.core.async.unsub_all_STAR_["_"]);
if(!((m__6880__auto____$1 == null))){
return m__6880__auto____$1.call(null,p,v);
} else {
throw cljs.core.missing_protocol.call(null,"Pub.unsub-all*",p);
}
}
}
});

cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2;

/**
 * Creates and returns a pub(lication) of the supplied channel,
 *   partitioned into topics by the topic-fn. topic-fn will be applied to
 *   each value on the channel and the result will determine the 'topic'
 *   on which that value will be put. Channels can be subscribed to
 *   receive copies of topics using 'sub', and unsubscribed using
 *   'unsub'. Each topic will be handled by an internal mult on a
 *   dedicated channel. By default these internal channels are
 *   unbuffered, but a buf-fn can be supplied which, given a topic,
 *   creates a buffer with desired properties.
 * 
 *   Each item is distributed to all subs in parallel and synchronously,
 *   i.e. each sub must accept before the next item is distributed. Use
 *   buffering/windowing to prevent slow subs from holding up the pub.
 * 
 *   Items received when there are no matching subs get dropped.
 * 
 *   Note that if buf-fns are used then each topic is handled
 *   asynchronously, i.e. if a channel is subscribed to more than one
 *   topic it should not expect them to be interleaved identically with
 *   the source.
 */
cljs.core.async.pub = (function cljs$core$async$pub(var_args){
var args19684 = [];
var len__7291__auto___19809 = arguments.length;
var i__7292__auto___19810 = (0);
while(true){
if((i__7292__auto___19810 < len__7291__auto___19809)){
args19684.push((arguments[i__7292__auto___19810]));

var G__19811 = (i__7292__auto___19810 + (1));
i__7292__auto___19810 = G__19811;
continue;
} else {
}
break;
}

var G__19686 = args19684.length;
switch (G__19686) {
case 2:
return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args19684.length)].join('')));

}
});

cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = (function (ch,topic_fn){
return cljs.core.async.pub.call(null,ch,topic_fn,cljs.core.constantly.call(null,null));
});

cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = (function (ch,topic_fn,buf_fn){
var mults = cljs.core.atom.call(null,cljs.core.PersistentArrayMap.EMPTY);
var ensure_mult = ((function (mults){
return (function (topic){
var or__6216__auto__ = cljs.core.get.call(null,cljs.core.deref.call(null,mults),topic);
if(cljs.core.truth_(or__6216__auto__)){
return or__6216__auto__;
} else {
return cljs.core.get.call(null,cljs.core.swap_BANG_.call(null,mults,((function (or__6216__auto__,mults){
return (function (p1__19683_SHARP_){
if(cljs.core.truth_(p1__19683_SHARP_.call(null,topic))){
return p1__19683_SHARP_;
} else {
return cljs.core.assoc.call(null,p1__19683_SHARP_,topic,cljs.core.async.mult.call(null,cljs.core.async.chan.call(null,buf_fn.call(null,topic))));
}
});})(or__6216__auto__,mults))
),topic);
}
});})(mults))
;
var p = (function (){
if(typeof cljs.core.async.t_cljs$core$async19687 !== 'undefined'){
} else {

/**
* @constructor
 * @implements {cljs.core.async.Pub}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.async.Mux}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async19687 = (function (ch,topic_fn,buf_fn,mults,ensure_mult,meta19688){
this.ch = ch;
this.topic_fn = topic_fn;
this.buf_fn = buf_fn;
this.mults = mults;
this.ensure_mult = ensure_mult;
this.meta19688 = meta19688;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
cljs.core.async.t_cljs$core$async19687.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = ((function (mults,ensure_mult){
return (function (_19689,meta19688__$1){
var self__ = this;
var _19689__$1 = this;
return (new cljs.core.async.t_cljs$core$async19687(self__.ch,self__.topic_fn,self__.buf_fn,self__.mults,self__.ensure_mult,meta19688__$1));
});})(mults,ensure_mult))
;

cljs.core.async.t_cljs$core$async19687.prototype.cljs$core$IMeta$_meta$arity$1 = ((function (mults,ensure_mult){
return (function (_19689){
var self__ = this;
var _19689__$1 = this;
return self__.meta19688;
});})(mults,ensure_mult))
;

cljs.core.async.t_cljs$core$async19687.prototype.cljs$core$async$Mux$ = true;

cljs.core.async.t_cljs$core$async19687.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = ((function (mults,ensure_mult){
return (function (_){
var self__ = this;
var ___$1 = this;
return self__.ch;
});})(mults,ensure_mult))
;

cljs.core.async.t_cljs$core$async19687.prototype.cljs$core$async$Pub$ = true;

cljs.core.async.t_cljs$core$async19687.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = ((function (mults,ensure_mult){
return (function (p,topic,ch__$1,close_QMARK_){
var self__ = this;
var p__$1 = this;
var m = self__.ensure_mult.call(null,topic);
return cljs.core.async.tap.call(null,m,ch__$1,close_QMARK_);
});})(mults,ensure_mult))
;

cljs.core.async.t_cljs$core$async19687.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = ((function (mults,ensure_mult){
return (function (p,topic,ch__$1){
var self__ = this;
var p__$1 = this;
var temp__4657__auto__ = cljs.core.get.call(null,cljs.core.deref.call(null,self__.mults),topic);
if(cljs.core.truth_(temp__4657__auto__)){
var m = temp__4657__auto__;
return cljs.core.async.untap.call(null,m,ch__$1);
} else {
return null;
}
});})(mults,ensure_mult))
;

cljs.core.async.t_cljs$core$async19687.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = ((function (mults,ensure_mult){
return (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.reset_BANG_.call(null,self__.mults,cljs.core.PersistentArrayMap.EMPTY);
});})(mults,ensure_mult))
;

cljs.core.async.t_cljs$core$async19687.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = ((function (mults,ensure_mult){
return (function (_,topic){
var self__ = this;
var ___$1 = this;
return cljs.core.swap_BANG_.call(null,self__.mults,cljs.core.dissoc,topic);
});})(mults,ensure_mult))
;

cljs.core.async.t_cljs$core$async19687.getBasis = ((function (mults,ensure_mult){
return (function (){
return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"topic-fn","topic-fn",-862449736,null),new cljs.core.Symbol(null,"buf-fn","buf-fn",-1200281591,null),new cljs.core.Symbol(null,"mults","mults",-461114485,null),new cljs.core.Symbol(null,"ensure-mult","ensure-mult",1796584816,null),new cljs.core.Symbol(null,"meta19688","meta19688",2141879974,null)], null);
});})(mults,ensure_mult))
;

cljs.core.async.t_cljs$core$async19687.cljs$lang$type = true;

cljs.core.async.t_cljs$core$async19687.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async19687";

cljs.core.async.t_cljs$core$async19687.cljs$lang$ctorPrWriter = ((function (mults,ensure_mult){
return (function (this__6822__auto__,writer__6823__auto__,opt__6824__auto__){
return cljs.core._write.call(null,writer__6823__auto__,"cljs.core.async/t_cljs$core$async19687");
});})(mults,ensure_mult))
;

cljs.core.async.__GT_t_cljs$core$async19687 = ((function (mults,ensure_mult){
return (function cljs$core$async$__GT_t_cljs$core$async19687(ch__$1,topic_fn__$1,buf_fn__$1,mults__$1,ensure_mult__$1,meta19688){
return (new cljs.core.async.t_cljs$core$async19687(ch__$1,topic_fn__$1,buf_fn__$1,mults__$1,ensure_mult__$1,meta19688));
});})(mults,ensure_mult))
;

}

return (new cljs.core.async.t_cljs$core$async19687(ch,topic_fn,buf_fn,mults,ensure_mult,cljs.core.PersistentArrayMap.EMPTY));
})()
;
var c__17914__auto___19813 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___19813,mults,ensure_mult,p){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___19813,mults,ensure_mult,p){
return (function (state_19761){
var state_val_19762 = (state_19761[(1)]);
if((state_val_19762 === (7))){
var inst_19757 = (state_19761[(2)]);
var state_19761__$1 = state_19761;
var statearr_19763_19814 = state_19761__$1;
(statearr_19763_19814[(2)] = inst_19757);

(statearr_19763_19814[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (20))){
var state_19761__$1 = state_19761;
var statearr_19764_19815 = state_19761__$1;
(statearr_19764_19815[(2)] = null);

(statearr_19764_19815[(1)] = (21));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (1))){
var state_19761__$1 = state_19761;
var statearr_19765_19816 = state_19761__$1;
(statearr_19765_19816[(2)] = null);

(statearr_19765_19816[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (24))){
var inst_19740 = (state_19761[(7)]);
var inst_19749 = cljs.core.swap_BANG_.call(null,mults,cljs.core.dissoc,inst_19740);
var state_19761__$1 = state_19761;
var statearr_19766_19817 = state_19761__$1;
(statearr_19766_19817[(2)] = inst_19749);

(statearr_19766_19817[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (4))){
var inst_19692 = (state_19761[(8)]);
var inst_19692__$1 = (state_19761[(2)]);
var inst_19693 = (inst_19692__$1 == null);
var state_19761__$1 = (function (){var statearr_19767 = state_19761;
(statearr_19767[(8)] = inst_19692__$1);

return statearr_19767;
})();
if(cljs.core.truth_(inst_19693)){
var statearr_19768_19818 = state_19761__$1;
(statearr_19768_19818[(1)] = (5));

} else {
var statearr_19769_19819 = state_19761__$1;
(statearr_19769_19819[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (15))){
var inst_19734 = (state_19761[(2)]);
var state_19761__$1 = state_19761;
var statearr_19770_19820 = state_19761__$1;
(statearr_19770_19820[(2)] = inst_19734);

(statearr_19770_19820[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (21))){
var inst_19754 = (state_19761[(2)]);
var state_19761__$1 = (function (){var statearr_19771 = state_19761;
(statearr_19771[(9)] = inst_19754);

return statearr_19771;
})();
var statearr_19772_19821 = state_19761__$1;
(statearr_19772_19821[(2)] = null);

(statearr_19772_19821[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (13))){
var inst_19716 = (state_19761[(10)]);
var inst_19718 = cljs.core.chunked_seq_QMARK_.call(null,inst_19716);
var state_19761__$1 = state_19761;
if(inst_19718){
var statearr_19773_19822 = state_19761__$1;
(statearr_19773_19822[(1)] = (16));

} else {
var statearr_19774_19823 = state_19761__$1;
(statearr_19774_19823[(1)] = (17));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (22))){
var inst_19746 = (state_19761[(2)]);
var state_19761__$1 = state_19761;
if(cljs.core.truth_(inst_19746)){
var statearr_19775_19824 = state_19761__$1;
(statearr_19775_19824[(1)] = (23));

} else {
var statearr_19776_19825 = state_19761__$1;
(statearr_19776_19825[(1)] = (24));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (6))){
var inst_19692 = (state_19761[(8)]);
var inst_19740 = (state_19761[(7)]);
var inst_19742 = (state_19761[(11)]);
var inst_19740__$1 = topic_fn.call(null,inst_19692);
var inst_19741 = cljs.core.deref.call(null,mults);
var inst_19742__$1 = cljs.core.get.call(null,inst_19741,inst_19740__$1);
var state_19761__$1 = (function (){var statearr_19777 = state_19761;
(statearr_19777[(7)] = inst_19740__$1);

(statearr_19777[(11)] = inst_19742__$1);

return statearr_19777;
})();
if(cljs.core.truth_(inst_19742__$1)){
var statearr_19778_19826 = state_19761__$1;
(statearr_19778_19826[(1)] = (19));

} else {
var statearr_19779_19827 = state_19761__$1;
(statearr_19779_19827[(1)] = (20));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (25))){
var inst_19751 = (state_19761[(2)]);
var state_19761__$1 = state_19761;
var statearr_19780_19828 = state_19761__$1;
(statearr_19780_19828[(2)] = inst_19751);

(statearr_19780_19828[(1)] = (21));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (17))){
var inst_19716 = (state_19761[(10)]);
var inst_19725 = cljs.core.first.call(null,inst_19716);
var inst_19726 = cljs.core.async.muxch_STAR_.call(null,inst_19725);
var inst_19727 = cljs.core.async.close_BANG_.call(null,inst_19726);
var inst_19728 = cljs.core.next.call(null,inst_19716);
var inst_19702 = inst_19728;
var inst_19703 = null;
var inst_19704 = (0);
var inst_19705 = (0);
var state_19761__$1 = (function (){var statearr_19781 = state_19761;
(statearr_19781[(12)] = inst_19727);

(statearr_19781[(13)] = inst_19703);

(statearr_19781[(14)] = inst_19705);

(statearr_19781[(15)] = inst_19702);

(statearr_19781[(16)] = inst_19704);

return statearr_19781;
})();
var statearr_19782_19829 = state_19761__$1;
(statearr_19782_19829[(2)] = null);

(statearr_19782_19829[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (3))){
var inst_19759 = (state_19761[(2)]);
var state_19761__$1 = state_19761;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_19761__$1,inst_19759);
} else {
if((state_val_19762 === (12))){
var inst_19736 = (state_19761[(2)]);
var state_19761__$1 = state_19761;
var statearr_19783_19830 = state_19761__$1;
(statearr_19783_19830[(2)] = inst_19736);

(statearr_19783_19830[(1)] = (9));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (2))){
var state_19761__$1 = state_19761;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_19761__$1,(4),ch);
} else {
if((state_val_19762 === (23))){
var state_19761__$1 = state_19761;
var statearr_19784_19831 = state_19761__$1;
(statearr_19784_19831[(2)] = null);

(statearr_19784_19831[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (19))){
var inst_19692 = (state_19761[(8)]);
var inst_19742 = (state_19761[(11)]);
var inst_19744 = cljs.core.async.muxch_STAR_.call(null,inst_19742);
var state_19761__$1 = state_19761;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_19761__$1,(22),inst_19744,inst_19692);
} else {
if((state_val_19762 === (11))){
var inst_19702 = (state_19761[(15)]);
var inst_19716 = (state_19761[(10)]);
var inst_19716__$1 = cljs.core.seq.call(null,inst_19702);
var state_19761__$1 = (function (){var statearr_19785 = state_19761;
(statearr_19785[(10)] = inst_19716__$1);

return statearr_19785;
})();
if(inst_19716__$1){
var statearr_19786_19832 = state_19761__$1;
(statearr_19786_19832[(1)] = (13));

} else {
var statearr_19787_19833 = state_19761__$1;
(statearr_19787_19833[(1)] = (14));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (9))){
var inst_19738 = (state_19761[(2)]);
var state_19761__$1 = state_19761;
var statearr_19788_19834 = state_19761__$1;
(statearr_19788_19834[(2)] = inst_19738);

(statearr_19788_19834[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (5))){
var inst_19699 = cljs.core.deref.call(null,mults);
var inst_19700 = cljs.core.vals.call(null,inst_19699);
var inst_19701 = cljs.core.seq.call(null,inst_19700);
var inst_19702 = inst_19701;
var inst_19703 = null;
var inst_19704 = (0);
var inst_19705 = (0);
var state_19761__$1 = (function (){var statearr_19789 = state_19761;
(statearr_19789[(13)] = inst_19703);

(statearr_19789[(14)] = inst_19705);

(statearr_19789[(15)] = inst_19702);

(statearr_19789[(16)] = inst_19704);

return statearr_19789;
})();
var statearr_19790_19835 = state_19761__$1;
(statearr_19790_19835[(2)] = null);

(statearr_19790_19835[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (14))){
var state_19761__$1 = state_19761;
var statearr_19794_19836 = state_19761__$1;
(statearr_19794_19836[(2)] = null);

(statearr_19794_19836[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (16))){
var inst_19716 = (state_19761[(10)]);
var inst_19720 = cljs.core.chunk_first.call(null,inst_19716);
var inst_19721 = cljs.core.chunk_rest.call(null,inst_19716);
var inst_19722 = cljs.core.count.call(null,inst_19720);
var inst_19702 = inst_19721;
var inst_19703 = inst_19720;
var inst_19704 = inst_19722;
var inst_19705 = (0);
var state_19761__$1 = (function (){var statearr_19795 = state_19761;
(statearr_19795[(13)] = inst_19703);

(statearr_19795[(14)] = inst_19705);

(statearr_19795[(15)] = inst_19702);

(statearr_19795[(16)] = inst_19704);

return statearr_19795;
})();
var statearr_19796_19837 = state_19761__$1;
(statearr_19796_19837[(2)] = null);

(statearr_19796_19837[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (10))){
var inst_19703 = (state_19761[(13)]);
var inst_19705 = (state_19761[(14)]);
var inst_19702 = (state_19761[(15)]);
var inst_19704 = (state_19761[(16)]);
var inst_19710 = cljs.core._nth.call(null,inst_19703,inst_19705);
var inst_19711 = cljs.core.async.muxch_STAR_.call(null,inst_19710);
var inst_19712 = cljs.core.async.close_BANG_.call(null,inst_19711);
var inst_19713 = (inst_19705 + (1));
var tmp19791 = inst_19703;
var tmp19792 = inst_19702;
var tmp19793 = inst_19704;
var inst_19702__$1 = tmp19792;
var inst_19703__$1 = tmp19791;
var inst_19704__$1 = tmp19793;
var inst_19705__$1 = inst_19713;
var state_19761__$1 = (function (){var statearr_19797 = state_19761;
(statearr_19797[(13)] = inst_19703__$1);

(statearr_19797[(14)] = inst_19705__$1);

(statearr_19797[(17)] = inst_19712);

(statearr_19797[(15)] = inst_19702__$1);

(statearr_19797[(16)] = inst_19704__$1);

return statearr_19797;
})();
var statearr_19798_19838 = state_19761__$1;
(statearr_19798_19838[(2)] = null);

(statearr_19798_19838[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (18))){
var inst_19731 = (state_19761[(2)]);
var state_19761__$1 = state_19761;
var statearr_19799_19839 = state_19761__$1;
(statearr_19799_19839[(2)] = inst_19731);

(statearr_19799_19839[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19762 === (8))){
var inst_19705 = (state_19761[(14)]);
var inst_19704 = (state_19761[(16)]);
var inst_19707 = (inst_19705 < inst_19704);
var inst_19708 = inst_19707;
var state_19761__$1 = state_19761;
if(cljs.core.truth_(inst_19708)){
var statearr_19800_19840 = state_19761__$1;
(statearr_19800_19840[(1)] = (10));

} else {
var statearr_19801_19841 = state_19761__$1;
(statearr_19801_19841[(1)] = (11));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___19813,mults,ensure_mult,p))
;
return ((function (switch__17802__auto__,c__17914__auto___19813,mults,ensure_mult,p){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_19805 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_19805[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_19805[(1)] = (1));

return statearr_19805;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_19761){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_19761);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e19806){if((e19806 instanceof Object)){
var ex__17806__auto__ = e19806;
var statearr_19807_19842 = state_19761;
(statearr_19807_19842[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_19761);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e19806;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__19843 = state_19761;
state_19761 = G__19843;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_19761){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_19761);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___19813,mults,ensure_mult,p))
})();
var state__17916__auto__ = (function (){var statearr_19808 = f__17915__auto__.call(null);
(statearr_19808[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___19813);

return statearr_19808;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___19813,mults,ensure_mult,p))
);


return p;
});

cljs.core.async.pub.cljs$lang$maxFixedArity = 3;
/**
 * Subscribes a channel to a topic of a pub.
 * 
 *   By default the channel will be closed when the source closes,
 *   but can be determined by the close? parameter.
 */
cljs.core.async.sub = (function cljs$core$async$sub(var_args){
var args19844 = [];
var len__7291__auto___19847 = arguments.length;
var i__7292__auto___19848 = (0);
while(true){
if((i__7292__auto___19848 < len__7291__auto___19847)){
args19844.push((arguments[i__7292__auto___19848]));

var G__19849 = (i__7292__auto___19848 + (1));
i__7292__auto___19848 = G__19849;
continue;
} else {
}
break;
}

var G__19846 = args19844.length;
switch (G__19846) {
case 3:
return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args19844.length)].join('')));

}
});

cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = (function (p,topic,ch){
return cljs.core.async.sub.call(null,p,topic,ch,true);
});

cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = (function (p,topic,ch,close_QMARK_){
return cljs.core.async.sub_STAR_.call(null,p,topic,ch,close_QMARK_);
});

cljs.core.async.sub.cljs$lang$maxFixedArity = 4;
/**
 * Unsubscribes a channel from a topic of a pub
 */
cljs.core.async.unsub = (function cljs$core$async$unsub(p,topic,ch){
return cljs.core.async.unsub_STAR_.call(null,p,topic,ch);
});
/**
 * Unsubscribes all channels from a pub, or a topic of a pub
 */
cljs.core.async.unsub_all = (function cljs$core$async$unsub_all(var_args){
var args19851 = [];
var len__7291__auto___19854 = arguments.length;
var i__7292__auto___19855 = (0);
while(true){
if((i__7292__auto___19855 < len__7291__auto___19854)){
args19851.push((arguments[i__7292__auto___19855]));

var G__19856 = (i__7292__auto___19855 + (1));
i__7292__auto___19855 = G__19856;
continue;
} else {
}
break;
}

var G__19853 = args19851.length;
switch (G__19853) {
case 1:
return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args19851.length)].join('')));

}
});

cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = (function (p){
return cljs.core.async.unsub_all_STAR_.call(null,p);
});

cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = (function (p,topic){
return cljs.core.async.unsub_all_STAR_.call(null,p,topic);
});

cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2;
/**
 * Takes a function and a collection of source channels, and returns a
 *   channel which contains the values produced by applying f to the set
 *   of first items taken from each source channel, followed by applying
 *   f to the set of second items from each channel, until any one of the
 *   channels is closed, at which point the output channel will be
 *   closed. The returned channel will be unbuffered by default, or a
 *   buf-or-n can be supplied
 */
cljs.core.async.map = (function cljs$core$async$map(var_args){
var args19858 = [];
var len__7291__auto___19929 = arguments.length;
var i__7292__auto___19930 = (0);
while(true){
if((i__7292__auto___19930 < len__7291__auto___19929)){
args19858.push((arguments[i__7292__auto___19930]));

var G__19931 = (i__7292__auto___19930 + (1));
i__7292__auto___19930 = G__19931;
continue;
} else {
}
break;
}

var G__19860 = args19858.length;
switch (G__19860) {
case 2:
return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args19858.length)].join('')));

}
});

cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = (function (f,chs){
return cljs.core.async.map.call(null,f,chs,null);
});

cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = (function (f,chs,buf_or_n){
var chs__$1 = cljs.core.vec.call(null,chs);
var out = cljs.core.async.chan.call(null,buf_or_n);
var cnt = cljs.core.count.call(null,chs__$1);
var rets = cljs.core.object_array.call(null,cnt);
var dchan = cljs.core.async.chan.call(null,(1));
var dctr = cljs.core.atom.call(null,null);
var done = cljs.core.mapv.call(null,((function (chs__$1,out,cnt,rets,dchan,dctr){
return (function (i){
return ((function (chs__$1,out,cnt,rets,dchan,dctr){
return (function (ret){
(rets[i] = ret);

if((cljs.core.swap_BANG_.call(null,dctr,cljs.core.dec) === (0))){
return cljs.core.async.put_BANG_.call(null,dchan,rets.slice((0)));
} else {
return null;
}
});
;})(chs__$1,out,cnt,rets,dchan,dctr))
});})(chs__$1,out,cnt,rets,dchan,dctr))
,cljs.core.range.call(null,cnt));
var c__17914__auto___19933 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___19933,chs__$1,out,cnt,rets,dchan,dctr,done){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___19933,chs__$1,out,cnt,rets,dchan,dctr,done){
return (function (state_19899){
var state_val_19900 = (state_19899[(1)]);
if((state_val_19900 === (7))){
var state_19899__$1 = state_19899;
var statearr_19901_19934 = state_19899__$1;
(statearr_19901_19934[(2)] = null);

(statearr_19901_19934[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (1))){
var state_19899__$1 = state_19899;
var statearr_19902_19935 = state_19899__$1;
(statearr_19902_19935[(2)] = null);

(statearr_19902_19935[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (4))){
var inst_19863 = (state_19899[(7)]);
var inst_19865 = (inst_19863 < cnt);
var state_19899__$1 = state_19899;
if(cljs.core.truth_(inst_19865)){
var statearr_19903_19936 = state_19899__$1;
(statearr_19903_19936[(1)] = (6));

} else {
var statearr_19904_19937 = state_19899__$1;
(statearr_19904_19937[(1)] = (7));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (15))){
var inst_19895 = (state_19899[(2)]);
var state_19899__$1 = state_19899;
var statearr_19905_19938 = state_19899__$1;
(statearr_19905_19938[(2)] = inst_19895);

(statearr_19905_19938[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (13))){
var inst_19888 = cljs.core.async.close_BANG_.call(null,out);
var state_19899__$1 = state_19899;
var statearr_19906_19939 = state_19899__$1;
(statearr_19906_19939[(2)] = inst_19888);

(statearr_19906_19939[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (6))){
var state_19899__$1 = state_19899;
var statearr_19907_19940 = state_19899__$1;
(statearr_19907_19940[(2)] = null);

(statearr_19907_19940[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (3))){
var inst_19897 = (state_19899[(2)]);
var state_19899__$1 = state_19899;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_19899__$1,inst_19897);
} else {
if((state_val_19900 === (12))){
var inst_19885 = (state_19899[(8)]);
var inst_19885__$1 = (state_19899[(2)]);
var inst_19886 = cljs.core.some.call(null,cljs.core.nil_QMARK_,inst_19885__$1);
var state_19899__$1 = (function (){var statearr_19908 = state_19899;
(statearr_19908[(8)] = inst_19885__$1);

return statearr_19908;
})();
if(cljs.core.truth_(inst_19886)){
var statearr_19909_19941 = state_19899__$1;
(statearr_19909_19941[(1)] = (13));

} else {
var statearr_19910_19942 = state_19899__$1;
(statearr_19910_19942[(1)] = (14));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (2))){
var inst_19862 = cljs.core.reset_BANG_.call(null,dctr,cnt);
var inst_19863 = (0);
var state_19899__$1 = (function (){var statearr_19911 = state_19899;
(statearr_19911[(9)] = inst_19862);

(statearr_19911[(7)] = inst_19863);

return statearr_19911;
})();
var statearr_19912_19943 = state_19899__$1;
(statearr_19912_19943[(2)] = null);

(statearr_19912_19943[(1)] = (4));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (11))){
var inst_19863 = (state_19899[(7)]);
var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null,state_19899,(10),Object,null,(9));
var inst_19872 = chs__$1.call(null,inst_19863);
var inst_19873 = done.call(null,inst_19863);
var inst_19874 = cljs.core.async.take_BANG_.call(null,inst_19872,inst_19873);
var state_19899__$1 = state_19899;
var statearr_19913_19944 = state_19899__$1;
(statearr_19913_19944[(2)] = inst_19874);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_19899__$1);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (9))){
var inst_19863 = (state_19899[(7)]);
var inst_19876 = (state_19899[(2)]);
var inst_19877 = (inst_19863 + (1));
var inst_19863__$1 = inst_19877;
var state_19899__$1 = (function (){var statearr_19914 = state_19899;
(statearr_19914[(10)] = inst_19876);

(statearr_19914[(7)] = inst_19863__$1);

return statearr_19914;
})();
var statearr_19915_19945 = state_19899__$1;
(statearr_19915_19945[(2)] = null);

(statearr_19915_19945[(1)] = (4));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (5))){
var inst_19883 = (state_19899[(2)]);
var state_19899__$1 = (function (){var statearr_19916 = state_19899;
(statearr_19916[(11)] = inst_19883);

return statearr_19916;
})();
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_19899__$1,(12),dchan);
} else {
if((state_val_19900 === (14))){
var inst_19885 = (state_19899[(8)]);
var inst_19890 = cljs.core.apply.call(null,f,inst_19885);
var state_19899__$1 = state_19899;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_19899__$1,(16),out,inst_19890);
} else {
if((state_val_19900 === (16))){
var inst_19892 = (state_19899[(2)]);
var state_19899__$1 = (function (){var statearr_19917 = state_19899;
(statearr_19917[(12)] = inst_19892);

return statearr_19917;
})();
var statearr_19918_19946 = state_19899__$1;
(statearr_19918_19946[(2)] = null);

(statearr_19918_19946[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (10))){
var inst_19867 = (state_19899[(2)]);
var inst_19868 = cljs.core.swap_BANG_.call(null,dctr,cljs.core.dec);
var state_19899__$1 = (function (){var statearr_19919 = state_19899;
(statearr_19919[(13)] = inst_19867);

return statearr_19919;
})();
var statearr_19920_19947 = state_19899__$1;
(statearr_19920_19947[(2)] = inst_19868);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_19899__$1);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19900 === (8))){
var inst_19881 = (state_19899[(2)]);
var state_19899__$1 = state_19899;
var statearr_19921_19948 = state_19899__$1;
(statearr_19921_19948[(2)] = inst_19881);

(statearr_19921_19948[(1)] = (5));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___19933,chs__$1,out,cnt,rets,dchan,dctr,done))
;
return ((function (switch__17802__auto__,c__17914__auto___19933,chs__$1,out,cnt,rets,dchan,dctr,done){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_19925 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_19925[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_19925[(1)] = (1));

return statearr_19925;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_19899){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_19899);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e19926){if((e19926 instanceof Object)){
var ex__17806__auto__ = e19926;
var statearr_19927_19949 = state_19899;
(statearr_19927_19949[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_19899);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e19926;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__19950 = state_19899;
state_19899 = G__19950;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_19899){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_19899);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___19933,chs__$1,out,cnt,rets,dchan,dctr,done))
})();
var state__17916__auto__ = (function (){var statearr_19928 = f__17915__auto__.call(null);
(statearr_19928[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___19933);

return statearr_19928;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___19933,chs__$1,out,cnt,rets,dchan,dctr,done))
);


return out;
});

cljs.core.async.map.cljs$lang$maxFixedArity = 3;
/**
 * Takes a collection of source channels and returns a channel which
 *   contains all values taken from them. The returned channel will be
 *   unbuffered by default, or a buf-or-n can be supplied. The channel
 *   will close after all the source channels have closed.
 */
cljs.core.async.merge = (function cljs$core$async$merge(var_args){
var args19952 = [];
var len__7291__auto___20008 = arguments.length;
var i__7292__auto___20009 = (0);
while(true){
if((i__7292__auto___20009 < len__7291__auto___20008)){
args19952.push((arguments[i__7292__auto___20009]));

var G__20010 = (i__7292__auto___20009 + (1));
i__7292__auto___20009 = G__20010;
continue;
} else {
}
break;
}

var G__19954 = args19952.length;
switch (G__19954) {
case 1:
return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args19952.length)].join('')));

}
});

cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = (function (chs){
return cljs.core.async.merge.call(null,chs,null);
});

cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = (function (chs,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__17914__auto___20012 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___20012,out){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___20012,out){
return (function (state_19984){
var state_val_19985 = (state_19984[(1)]);
if((state_val_19985 === (7))){
var inst_19964 = (state_19984[(7)]);
var inst_19963 = (state_19984[(8)]);
var inst_19963__$1 = (state_19984[(2)]);
var inst_19964__$1 = cljs.core.nth.call(null,inst_19963__$1,(0),null);
var inst_19965 = cljs.core.nth.call(null,inst_19963__$1,(1),null);
var inst_19966 = (inst_19964__$1 == null);
var state_19984__$1 = (function (){var statearr_19986 = state_19984;
(statearr_19986[(9)] = inst_19965);

(statearr_19986[(7)] = inst_19964__$1);

(statearr_19986[(8)] = inst_19963__$1);

return statearr_19986;
})();
if(cljs.core.truth_(inst_19966)){
var statearr_19987_20013 = state_19984__$1;
(statearr_19987_20013[(1)] = (8));

} else {
var statearr_19988_20014 = state_19984__$1;
(statearr_19988_20014[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19985 === (1))){
var inst_19955 = cljs.core.vec.call(null,chs);
var inst_19956 = inst_19955;
var state_19984__$1 = (function (){var statearr_19989 = state_19984;
(statearr_19989[(10)] = inst_19956);

return statearr_19989;
})();
var statearr_19990_20015 = state_19984__$1;
(statearr_19990_20015[(2)] = null);

(statearr_19990_20015[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19985 === (4))){
var inst_19956 = (state_19984[(10)]);
var state_19984__$1 = state_19984;
return cljs.core.async.ioc_alts_BANG_.call(null,state_19984__$1,(7),inst_19956);
} else {
if((state_val_19985 === (6))){
var inst_19980 = (state_19984[(2)]);
var state_19984__$1 = state_19984;
var statearr_19991_20016 = state_19984__$1;
(statearr_19991_20016[(2)] = inst_19980);

(statearr_19991_20016[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19985 === (3))){
var inst_19982 = (state_19984[(2)]);
var state_19984__$1 = state_19984;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_19984__$1,inst_19982);
} else {
if((state_val_19985 === (2))){
var inst_19956 = (state_19984[(10)]);
var inst_19958 = cljs.core.count.call(null,inst_19956);
var inst_19959 = (inst_19958 > (0));
var state_19984__$1 = state_19984;
if(cljs.core.truth_(inst_19959)){
var statearr_19993_20017 = state_19984__$1;
(statearr_19993_20017[(1)] = (4));

} else {
var statearr_19994_20018 = state_19984__$1;
(statearr_19994_20018[(1)] = (5));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19985 === (11))){
var inst_19956 = (state_19984[(10)]);
var inst_19973 = (state_19984[(2)]);
var tmp19992 = inst_19956;
var inst_19956__$1 = tmp19992;
var state_19984__$1 = (function (){var statearr_19995 = state_19984;
(statearr_19995[(10)] = inst_19956__$1);

(statearr_19995[(11)] = inst_19973);

return statearr_19995;
})();
var statearr_19996_20019 = state_19984__$1;
(statearr_19996_20019[(2)] = null);

(statearr_19996_20019[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19985 === (9))){
var inst_19964 = (state_19984[(7)]);
var state_19984__$1 = state_19984;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_19984__$1,(11),out,inst_19964);
} else {
if((state_val_19985 === (5))){
var inst_19978 = cljs.core.async.close_BANG_.call(null,out);
var state_19984__$1 = state_19984;
var statearr_19997_20020 = state_19984__$1;
(statearr_19997_20020[(2)] = inst_19978);

(statearr_19997_20020[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19985 === (10))){
var inst_19976 = (state_19984[(2)]);
var state_19984__$1 = state_19984;
var statearr_19998_20021 = state_19984__$1;
(statearr_19998_20021[(2)] = inst_19976);

(statearr_19998_20021[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_19985 === (8))){
var inst_19965 = (state_19984[(9)]);
var inst_19964 = (state_19984[(7)]);
var inst_19956 = (state_19984[(10)]);
var inst_19963 = (state_19984[(8)]);
var inst_19968 = (function (){var cs = inst_19956;
var vec__19961 = inst_19963;
var v = inst_19964;
var c = inst_19965;
return ((function (cs,vec__19961,v,c,inst_19965,inst_19964,inst_19956,inst_19963,state_val_19985,c__17914__auto___20012,out){
return (function (p1__19951_SHARP_){
return cljs.core.not_EQ_.call(null,c,p1__19951_SHARP_);
});
;})(cs,vec__19961,v,c,inst_19965,inst_19964,inst_19956,inst_19963,state_val_19985,c__17914__auto___20012,out))
})();
var inst_19969 = cljs.core.filterv.call(null,inst_19968,inst_19956);
var inst_19956__$1 = inst_19969;
var state_19984__$1 = (function (){var statearr_19999 = state_19984;
(statearr_19999[(10)] = inst_19956__$1);

return statearr_19999;
})();
var statearr_20000_20022 = state_19984__$1;
(statearr_20000_20022[(2)] = null);

(statearr_20000_20022[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___20012,out))
;
return ((function (switch__17802__auto__,c__17914__auto___20012,out){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_20004 = [null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_20004[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_20004[(1)] = (1));

return statearr_20004;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_19984){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_19984);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e20005){if((e20005 instanceof Object)){
var ex__17806__auto__ = e20005;
var statearr_20006_20023 = state_19984;
(statearr_20006_20023[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_19984);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e20005;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__20024 = state_19984;
state_19984 = G__20024;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_19984){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_19984);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___20012,out))
})();
var state__17916__auto__ = (function (){var statearr_20007 = f__17915__auto__.call(null);
(statearr_20007[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___20012);

return statearr_20007;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___20012,out))
);


return out;
});

cljs.core.async.merge.cljs$lang$maxFixedArity = 2;
/**
 * Returns a channel containing the single (collection) result of the
 *   items taken from the channel conjoined to the supplied
 *   collection. ch must close before into produces a result.
 */
cljs.core.async.into = (function cljs$core$async$into(coll,ch){
return cljs.core.async.reduce.call(null,cljs.core.conj,coll,ch);
});
/**
 * Returns a channel that will return, at most, n items from ch. After n items
 * have been returned, or ch has been closed, the return chanel will close.
 * 
 *   The output channel is unbuffered by default, unless buf-or-n is given.
 */
cljs.core.async.take = (function cljs$core$async$take(var_args){
var args20025 = [];
var len__7291__auto___20074 = arguments.length;
var i__7292__auto___20075 = (0);
while(true){
if((i__7292__auto___20075 < len__7291__auto___20074)){
args20025.push((arguments[i__7292__auto___20075]));

var G__20076 = (i__7292__auto___20075 + (1));
i__7292__auto___20075 = G__20076;
continue;
} else {
}
break;
}

var G__20027 = args20025.length;
switch (G__20027) {
case 2:
return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args20025.length)].join('')));

}
});

cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = (function (n,ch){
return cljs.core.async.take.call(null,n,ch,null);
});

cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = (function (n,ch,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__17914__auto___20078 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___20078,out){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___20078,out){
return (function (state_20051){
var state_val_20052 = (state_20051[(1)]);
if((state_val_20052 === (7))){
var inst_20033 = (state_20051[(7)]);
var inst_20033__$1 = (state_20051[(2)]);
var inst_20034 = (inst_20033__$1 == null);
var inst_20035 = cljs.core.not.call(null,inst_20034);
var state_20051__$1 = (function (){var statearr_20053 = state_20051;
(statearr_20053[(7)] = inst_20033__$1);

return statearr_20053;
})();
if(inst_20035){
var statearr_20054_20079 = state_20051__$1;
(statearr_20054_20079[(1)] = (8));

} else {
var statearr_20055_20080 = state_20051__$1;
(statearr_20055_20080[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20052 === (1))){
var inst_20028 = (0);
var state_20051__$1 = (function (){var statearr_20056 = state_20051;
(statearr_20056[(8)] = inst_20028);

return statearr_20056;
})();
var statearr_20057_20081 = state_20051__$1;
(statearr_20057_20081[(2)] = null);

(statearr_20057_20081[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20052 === (4))){
var state_20051__$1 = state_20051;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_20051__$1,(7),ch);
} else {
if((state_val_20052 === (6))){
var inst_20046 = (state_20051[(2)]);
var state_20051__$1 = state_20051;
var statearr_20058_20082 = state_20051__$1;
(statearr_20058_20082[(2)] = inst_20046);

(statearr_20058_20082[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20052 === (3))){
var inst_20048 = (state_20051[(2)]);
var inst_20049 = cljs.core.async.close_BANG_.call(null,out);
var state_20051__$1 = (function (){var statearr_20059 = state_20051;
(statearr_20059[(9)] = inst_20048);

return statearr_20059;
})();
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_20051__$1,inst_20049);
} else {
if((state_val_20052 === (2))){
var inst_20028 = (state_20051[(8)]);
var inst_20030 = (inst_20028 < n);
var state_20051__$1 = state_20051;
if(cljs.core.truth_(inst_20030)){
var statearr_20060_20083 = state_20051__$1;
(statearr_20060_20083[(1)] = (4));

} else {
var statearr_20061_20084 = state_20051__$1;
(statearr_20061_20084[(1)] = (5));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20052 === (11))){
var inst_20028 = (state_20051[(8)]);
var inst_20038 = (state_20051[(2)]);
var inst_20039 = (inst_20028 + (1));
var inst_20028__$1 = inst_20039;
var state_20051__$1 = (function (){var statearr_20062 = state_20051;
(statearr_20062[(8)] = inst_20028__$1);

(statearr_20062[(10)] = inst_20038);

return statearr_20062;
})();
var statearr_20063_20085 = state_20051__$1;
(statearr_20063_20085[(2)] = null);

(statearr_20063_20085[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20052 === (9))){
var state_20051__$1 = state_20051;
var statearr_20064_20086 = state_20051__$1;
(statearr_20064_20086[(2)] = null);

(statearr_20064_20086[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20052 === (5))){
var state_20051__$1 = state_20051;
var statearr_20065_20087 = state_20051__$1;
(statearr_20065_20087[(2)] = null);

(statearr_20065_20087[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20052 === (10))){
var inst_20043 = (state_20051[(2)]);
var state_20051__$1 = state_20051;
var statearr_20066_20088 = state_20051__$1;
(statearr_20066_20088[(2)] = inst_20043);

(statearr_20066_20088[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20052 === (8))){
var inst_20033 = (state_20051[(7)]);
var state_20051__$1 = state_20051;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_20051__$1,(11),out,inst_20033);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___20078,out))
;
return ((function (switch__17802__auto__,c__17914__auto___20078,out){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_20070 = [null,null,null,null,null,null,null,null,null,null,null];
(statearr_20070[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_20070[(1)] = (1));

return statearr_20070;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_20051){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_20051);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e20071){if((e20071 instanceof Object)){
var ex__17806__auto__ = e20071;
var statearr_20072_20089 = state_20051;
(statearr_20072_20089[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_20051);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e20071;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__20090 = state_20051;
state_20051 = G__20090;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_20051){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_20051);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___20078,out))
})();
var state__17916__auto__ = (function (){var statearr_20073 = f__17915__auto__.call(null);
(statearr_20073[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___20078);

return statearr_20073;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___20078,out))
);


return out;
});

cljs.core.async.take.cljs$lang$maxFixedArity = 3;
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.map_LT_ = (function cljs$core$async$map_LT_(f,ch){
if(typeof cljs.core.async.t_cljs$core$async20098 !== 'undefined'){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Channel}
 * @implements {cljs.core.async.impl.protocols.WritePort}
 * @implements {cljs.core.async.impl.protocols.ReadPort}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async20098 = (function (map_LT_,f,ch,meta20099){
this.map_LT_ = map_LT_;
this.f = f;
this.ch = ch;
this.meta20099 = meta20099;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
cljs.core.async.t_cljs$core$async20098.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_20100,meta20099__$1){
var self__ = this;
var _20100__$1 = this;
return (new cljs.core.async.t_cljs$core$async20098(self__.map_LT_,self__.f,self__.ch,meta20099__$1));
});

cljs.core.async.t_cljs$core$async20098.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_20100){
var self__ = this;
var _20100__$1 = this;
return self__.meta20099;
});

cljs.core.async.t_cljs$core$async20098.prototype.cljs$core$async$impl$protocols$Channel$ = true;

cljs.core.async.t_cljs$core$async20098.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.close_BANG_.call(null,self__.ch);
});

cljs.core.async.t_cljs$core$async20098.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.closed_QMARK_.call(null,self__.ch);
});

cljs.core.async.t_cljs$core$async20098.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;

cljs.core.async.t_cljs$core$async20098.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = (function (_,fn1){
var self__ = this;
var ___$1 = this;
var ret = cljs.core.async.impl.protocols.take_BANG_.call(null,self__.ch,(function (){
if(typeof cljs.core.async.t_cljs$core$async20101 !== 'undefined'){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Handler}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async20101 = (function (map_LT_,f,ch,meta20099,_,fn1,meta20102){
this.map_LT_ = map_LT_;
this.f = f;
this.ch = ch;
this.meta20099 = meta20099;
this._ = _;
this.fn1 = fn1;
this.meta20102 = meta20102;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
cljs.core.async.t_cljs$core$async20101.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = ((function (___$1){
return (function (_20103,meta20102__$1){
var self__ = this;
var _20103__$1 = this;
return (new cljs.core.async.t_cljs$core$async20101(self__.map_LT_,self__.f,self__.ch,self__.meta20099,self__._,self__.fn1,meta20102__$1));
});})(___$1))
;

cljs.core.async.t_cljs$core$async20101.prototype.cljs$core$IMeta$_meta$arity$1 = ((function (___$1){
return (function (_20103){
var self__ = this;
var _20103__$1 = this;
return self__.meta20102;
});})(___$1))
;

cljs.core.async.t_cljs$core$async20101.prototype.cljs$core$async$impl$protocols$Handler$ = true;

cljs.core.async.t_cljs$core$async20101.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = ((function (___$1){
return (function (___$1){
var self__ = this;
var ___$2 = this;
return cljs.core.async.impl.protocols.active_QMARK_.call(null,self__.fn1);
});})(___$1))
;

cljs.core.async.t_cljs$core$async20101.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = ((function (___$1){
return (function (___$1){
var self__ = this;
var ___$2 = this;
return true;
});})(___$1))
;

cljs.core.async.t_cljs$core$async20101.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = ((function (___$1){
return (function (___$1){
var self__ = this;
var ___$2 = this;
var f1 = cljs.core.async.impl.protocols.commit.call(null,self__.fn1);
return ((function (f1,___$2,___$1){
return (function (p1__20091_SHARP_){
return f1.call(null,(((p1__20091_SHARP_ == null))?null:self__.f.call(null,p1__20091_SHARP_)));
});
;})(f1,___$2,___$1))
});})(___$1))
;

cljs.core.async.t_cljs$core$async20101.getBasis = ((function (___$1){
return (function (){
return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,"map<","map<",-1235808357,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null)], null))),new cljs.core.Keyword(null,"doc","doc",1913296891),"Deprecated - this function will be removed. Use transducer instead"], null)),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"meta20099","meta20099",-1812443621,null),cljs.core.with_meta(new cljs.core.Symbol(null,"_","_",-1201019570,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"tag","tag",-1290361223),new cljs.core.Symbol("cljs.core.async","t_cljs$core$async20098","cljs.core.async/t_cljs$core$async20098",-1083395771,null)], null)),new cljs.core.Symbol(null,"fn1","fn1",895834444,null),new cljs.core.Symbol(null,"meta20102","meta20102",-1832393387,null)], null);
});})(___$1))
;

cljs.core.async.t_cljs$core$async20101.cljs$lang$type = true;

cljs.core.async.t_cljs$core$async20101.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async20101";

cljs.core.async.t_cljs$core$async20101.cljs$lang$ctorPrWriter = ((function (___$1){
return (function (this__6822__auto__,writer__6823__auto__,opt__6824__auto__){
return cljs.core._write.call(null,writer__6823__auto__,"cljs.core.async/t_cljs$core$async20101");
});})(___$1))
;

cljs.core.async.__GT_t_cljs$core$async20101 = ((function (___$1){
return (function cljs$core$async$map_LT__$___GT_t_cljs$core$async20101(map_LT___$1,f__$1,ch__$1,meta20099__$1,___$2,fn1__$1,meta20102){
return (new cljs.core.async.t_cljs$core$async20101(map_LT___$1,f__$1,ch__$1,meta20099__$1,___$2,fn1__$1,meta20102));
});})(___$1))
;

}

return (new cljs.core.async.t_cljs$core$async20101(self__.map_LT_,self__.f,self__.ch,self__.meta20099,___$1,fn1,cljs.core.PersistentArrayMap.EMPTY));
})()
);
if(cljs.core.truth_((function (){var and__6204__auto__ = ret;
if(cljs.core.truth_(and__6204__auto__)){
return !((cljs.core.deref.call(null,ret) == null));
} else {
return and__6204__auto__;
}
})())){
return cljs.core.async.impl.channels.box.call(null,self__.f.call(null,cljs.core.deref.call(null,ret)));
} else {
return ret;
}
});

cljs.core.async.t_cljs$core$async20098.prototype.cljs$core$async$impl$protocols$WritePort$ = true;

cljs.core.async.t_cljs$core$async20098.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = (function (_,val,fn1){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.put_BANG_.call(null,self__.ch,val,fn1);
});

cljs.core.async.t_cljs$core$async20098.getBasis = (function (){
return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,"map<","map<",-1235808357,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null)], null))),new cljs.core.Keyword(null,"doc","doc",1913296891),"Deprecated - this function will be removed. Use transducer instead"], null)),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"meta20099","meta20099",-1812443621,null)], null);
});

cljs.core.async.t_cljs$core$async20098.cljs$lang$type = true;

cljs.core.async.t_cljs$core$async20098.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async20098";

cljs.core.async.t_cljs$core$async20098.cljs$lang$ctorPrWriter = (function (this__6822__auto__,writer__6823__auto__,opt__6824__auto__){
return cljs.core._write.call(null,writer__6823__auto__,"cljs.core.async/t_cljs$core$async20098");
});

cljs.core.async.__GT_t_cljs$core$async20098 = (function cljs$core$async$map_LT__$___GT_t_cljs$core$async20098(map_LT___$1,f__$1,ch__$1,meta20099){
return (new cljs.core.async.t_cljs$core$async20098(map_LT___$1,f__$1,ch__$1,meta20099));
});

}

return (new cljs.core.async.t_cljs$core$async20098(cljs$core$async$map_LT_,f,ch,cljs.core.PersistentArrayMap.EMPTY));
});
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.map_GT_ = (function cljs$core$async$map_GT_(f,ch){
if(typeof cljs.core.async.t_cljs$core$async20107 !== 'undefined'){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Channel}
 * @implements {cljs.core.async.impl.protocols.WritePort}
 * @implements {cljs.core.async.impl.protocols.ReadPort}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async20107 = (function (map_GT_,f,ch,meta20108){
this.map_GT_ = map_GT_;
this.f = f;
this.ch = ch;
this.meta20108 = meta20108;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
cljs.core.async.t_cljs$core$async20107.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_20109,meta20108__$1){
var self__ = this;
var _20109__$1 = this;
return (new cljs.core.async.t_cljs$core$async20107(self__.map_GT_,self__.f,self__.ch,meta20108__$1));
});

cljs.core.async.t_cljs$core$async20107.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_20109){
var self__ = this;
var _20109__$1 = this;
return self__.meta20108;
});

cljs.core.async.t_cljs$core$async20107.prototype.cljs$core$async$impl$protocols$Channel$ = true;

cljs.core.async.t_cljs$core$async20107.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.close_BANG_.call(null,self__.ch);
});

cljs.core.async.t_cljs$core$async20107.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;

cljs.core.async.t_cljs$core$async20107.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = (function (_,fn1){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.take_BANG_.call(null,self__.ch,fn1);
});

cljs.core.async.t_cljs$core$async20107.prototype.cljs$core$async$impl$protocols$WritePort$ = true;

cljs.core.async.t_cljs$core$async20107.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = (function (_,val,fn1){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.put_BANG_.call(null,self__.ch,self__.f.call(null,val),fn1);
});

cljs.core.async.t_cljs$core$async20107.getBasis = (function (){
return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,"map>","map>",1676369295,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null)], null))),new cljs.core.Keyword(null,"doc","doc",1913296891),"Deprecated - this function will be removed. Use transducer instead"], null)),new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"meta20108","meta20108",-1409337042,null)], null);
});

cljs.core.async.t_cljs$core$async20107.cljs$lang$type = true;

cljs.core.async.t_cljs$core$async20107.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async20107";

cljs.core.async.t_cljs$core$async20107.cljs$lang$ctorPrWriter = (function (this__6822__auto__,writer__6823__auto__,opt__6824__auto__){
return cljs.core._write.call(null,writer__6823__auto__,"cljs.core.async/t_cljs$core$async20107");
});

cljs.core.async.__GT_t_cljs$core$async20107 = (function cljs$core$async$map_GT__$___GT_t_cljs$core$async20107(map_GT___$1,f__$1,ch__$1,meta20108){
return (new cljs.core.async.t_cljs$core$async20107(map_GT___$1,f__$1,ch__$1,meta20108));
});

}

return (new cljs.core.async.t_cljs$core$async20107(cljs$core$async$map_GT_,f,ch,cljs.core.PersistentArrayMap.EMPTY));
});
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.filter_GT_ = (function cljs$core$async$filter_GT_(p,ch){
if(typeof cljs.core.async.t_cljs$core$async20113 !== 'undefined'){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Channel}
 * @implements {cljs.core.async.impl.protocols.WritePort}
 * @implements {cljs.core.async.impl.protocols.ReadPort}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async20113 = (function (filter_GT_,p,ch,meta20114){
this.filter_GT_ = filter_GT_;
this.p = p;
this.ch = ch;
this.meta20114 = meta20114;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
})
cljs.core.async.t_cljs$core$async20113.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_20115,meta20114__$1){
var self__ = this;
var _20115__$1 = this;
return (new cljs.core.async.t_cljs$core$async20113(self__.filter_GT_,self__.p,self__.ch,meta20114__$1));
});

cljs.core.async.t_cljs$core$async20113.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_20115){
var self__ = this;
var _20115__$1 = this;
return self__.meta20114;
});

cljs.core.async.t_cljs$core$async20113.prototype.cljs$core$async$impl$protocols$Channel$ = true;

cljs.core.async.t_cljs$core$async20113.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.close_BANG_.call(null,self__.ch);
});

cljs.core.async.t_cljs$core$async20113.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.closed_QMARK_.call(null,self__.ch);
});

cljs.core.async.t_cljs$core$async20113.prototype.cljs$core$async$impl$protocols$ReadPort$ = true;

cljs.core.async.t_cljs$core$async20113.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = (function (_,fn1){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.take_BANG_.call(null,self__.ch,fn1);
});

cljs.core.async.t_cljs$core$async20113.prototype.cljs$core$async$impl$protocols$WritePort$ = true;

cljs.core.async.t_cljs$core$async20113.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = (function (_,val,fn1){
var self__ = this;
var ___$1 = this;
if(cljs.core.truth_(self__.p.call(null,val))){
return cljs.core.async.impl.protocols.put_BANG_.call(null,self__.ch,val,fn1);
} else {
return cljs.core.async.impl.channels.box.call(null,cljs.core.not.call(null,cljs.core.async.impl.protocols.closed_QMARK_.call(null,self__.ch)));
}
});

cljs.core.async.t_cljs$core$async20113.getBasis = (function (){
return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null,"filter>","filter>",-37644455,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"arglists","arglists",1661989754),cljs.core.list(new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"p","p",1791580836,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null)], null))),new cljs.core.Keyword(null,"doc","doc",1913296891),"Deprecated - this function will be removed. Use transducer instead"], null)),new cljs.core.Symbol(null,"p","p",1791580836,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"meta20114","meta20114",-1325380486,null)], null);
});

cljs.core.async.t_cljs$core$async20113.cljs$lang$type = true;

cljs.core.async.t_cljs$core$async20113.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async20113";

cljs.core.async.t_cljs$core$async20113.cljs$lang$ctorPrWriter = (function (this__6822__auto__,writer__6823__auto__,opt__6824__auto__){
return cljs.core._write.call(null,writer__6823__auto__,"cljs.core.async/t_cljs$core$async20113");
});

cljs.core.async.__GT_t_cljs$core$async20113 = (function cljs$core$async$filter_GT__$___GT_t_cljs$core$async20113(filter_GT___$1,p__$1,ch__$1,meta20114){
return (new cljs.core.async.t_cljs$core$async20113(filter_GT___$1,p__$1,ch__$1,meta20114));
});

}

return (new cljs.core.async.t_cljs$core$async20113(cljs$core$async$filter_GT_,p,ch,cljs.core.PersistentArrayMap.EMPTY));
});
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.remove_GT_ = (function cljs$core$async$remove_GT_(p,ch){
return cljs.core.async.filter_GT_.call(null,cljs.core.complement.call(null,p),ch);
});
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.filter_LT_ = (function cljs$core$async$filter_LT_(var_args){
var args20116 = [];
var len__7291__auto___20160 = arguments.length;
var i__7292__auto___20161 = (0);
while(true){
if((i__7292__auto___20161 < len__7291__auto___20160)){
args20116.push((arguments[i__7292__auto___20161]));

var G__20162 = (i__7292__auto___20161 + (1));
i__7292__auto___20161 = G__20162;
continue;
} else {
}
break;
}

var G__20118 = args20116.length;
switch (G__20118) {
case 2:
return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args20116.length)].join('')));

}
});

cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = (function (p,ch){
return cljs.core.async.filter_LT_.call(null,p,ch,null);
});

cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = (function (p,ch,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__17914__auto___20164 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___20164,out){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___20164,out){
return (function (state_20139){
var state_val_20140 = (state_20139[(1)]);
if((state_val_20140 === (7))){
var inst_20135 = (state_20139[(2)]);
var state_20139__$1 = state_20139;
var statearr_20141_20165 = state_20139__$1;
(statearr_20141_20165[(2)] = inst_20135);

(statearr_20141_20165[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20140 === (1))){
var state_20139__$1 = state_20139;
var statearr_20142_20166 = state_20139__$1;
(statearr_20142_20166[(2)] = null);

(statearr_20142_20166[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20140 === (4))){
var inst_20121 = (state_20139[(7)]);
var inst_20121__$1 = (state_20139[(2)]);
var inst_20122 = (inst_20121__$1 == null);
var state_20139__$1 = (function (){var statearr_20143 = state_20139;
(statearr_20143[(7)] = inst_20121__$1);

return statearr_20143;
})();
if(cljs.core.truth_(inst_20122)){
var statearr_20144_20167 = state_20139__$1;
(statearr_20144_20167[(1)] = (5));

} else {
var statearr_20145_20168 = state_20139__$1;
(statearr_20145_20168[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20140 === (6))){
var inst_20121 = (state_20139[(7)]);
var inst_20126 = p.call(null,inst_20121);
var state_20139__$1 = state_20139;
if(cljs.core.truth_(inst_20126)){
var statearr_20146_20169 = state_20139__$1;
(statearr_20146_20169[(1)] = (8));

} else {
var statearr_20147_20170 = state_20139__$1;
(statearr_20147_20170[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20140 === (3))){
var inst_20137 = (state_20139[(2)]);
var state_20139__$1 = state_20139;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_20139__$1,inst_20137);
} else {
if((state_val_20140 === (2))){
var state_20139__$1 = state_20139;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_20139__$1,(4),ch);
} else {
if((state_val_20140 === (11))){
var inst_20129 = (state_20139[(2)]);
var state_20139__$1 = state_20139;
var statearr_20148_20171 = state_20139__$1;
(statearr_20148_20171[(2)] = inst_20129);

(statearr_20148_20171[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20140 === (9))){
var state_20139__$1 = state_20139;
var statearr_20149_20172 = state_20139__$1;
(statearr_20149_20172[(2)] = null);

(statearr_20149_20172[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20140 === (5))){
var inst_20124 = cljs.core.async.close_BANG_.call(null,out);
var state_20139__$1 = state_20139;
var statearr_20150_20173 = state_20139__$1;
(statearr_20150_20173[(2)] = inst_20124);

(statearr_20150_20173[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20140 === (10))){
var inst_20132 = (state_20139[(2)]);
var state_20139__$1 = (function (){var statearr_20151 = state_20139;
(statearr_20151[(8)] = inst_20132);

return statearr_20151;
})();
var statearr_20152_20174 = state_20139__$1;
(statearr_20152_20174[(2)] = null);

(statearr_20152_20174[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20140 === (8))){
var inst_20121 = (state_20139[(7)]);
var state_20139__$1 = state_20139;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_20139__$1,(11),out,inst_20121);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___20164,out))
;
return ((function (switch__17802__auto__,c__17914__auto___20164,out){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_20156 = [null,null,null,null,null,null,null,null,null];
(statearr_20156[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_20156[(1)] = (1));

return statearr_20156;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_20139){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_20139);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e20157){if((e20157 instanceof Object)){
var ex__17806__auto__ = e20157;
var statearr_20158_20175 = state_20139;
(statearr_20158_20175[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_20139);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e20157;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__20176 = state_20139;
state_20139 = G__20176;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_20139){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_20139);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___20164,out))
})();
var state__17916__auto__ = (function (){var statearr_20159 = f__17915__auto__.call(null);
(statearr_20159[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___20164);

return statearr_20159;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___20164,out))
);


return out;
});

cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3;
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.remove_LT_ = (function cljs$core$async$remove_LT_(var_args){
var args20177 = [];
var len__7291__auto___20180 = arguments.length;
var i__7292__auto___20181 = (0);
while(true){
if((i__7292__auto___20181 < len__7291__auto___20180)){
args20177.push((arguments[i__7292__auto___20181]));

var G__20182 = (i__7292__auto___20181 + (1));
i__7292__auto___20181 = G__20182;
continue;
} else {
}
break;
}

var G__20179 = args20177.length;
switch (G__20179) {
case 2:
return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args20177.length)].join('')));

}
});

cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = (function (p,ch){
return cljs.core.async.remove_LT_.call(null,p,ch,null);
});

cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = (function (p,ch,buf_or_n){
return cljs.core.async.filter_LT_.call(null,cljs.core.complement.call(null,p),ch,buf_or_n);
});

cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3;
cljs.core.async.mapcat_STAR_ = (function cljs$core$async$mapcat_STAR_(f,in$,out){
var c__17914__auto__ = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto__){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto__){
return (function (state_20349){
var state_val_20350 = (state_20349[(1)]);
if((state_val_20350 === (7))){
var inst_20345 = (state_20349[(2)]);
var state_20349__$1 = state_20349;
var statearr_20351_20392 = state_20349__$1;
(statearr_20351_20392[(2)] = inst_20345);

(statearr_20351_20392[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (20))){
var inst_20315 = (state_20349[(7)]);
var inst_20326 = (state_20349[(2)]);
var inst_20327 = cljs.core.next.call(null,inst_20315);
var inst_20301 = inst_20327;
var inst_20302 = null;
var inst_20303 = (0);
var inst_20304 = (0);
var state_20349__$1 = (function (){var statearr_20352 = state_20349;
(statearr_20352[(8)] = inst_20302);

(statearr_20352[(9)] = inst_20303);

(statearr_20352[(10)] = inst_20326);

(statearr_20352[(11)] = inst_20301);

(statearr_20352[(12)] = inst_20304);

return statearr_20352;
})();
var statearr_20353_20393 = state_20349__$1;
(statearr_20353_20393[(2)] = null);

(statearr_20353_20393[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (1))){
var state_20349__$1 = state_20349;
var statearr_20354_20394 = state_20349__$1;
(statearr_20354_20394[(2)] = null);

(statearr_20354_20394[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (4))){
var inst_20290 = (state_20349[(13)]);
var inst_20290__$1 = (state_20349[(2)]);
var inst_20291 = (inst_20290__$1 == null);
var state_20349__$1 = (function (){var statearr_20355 = state_20349;
(statearr_20355[(13)] = inst_20290__$1);

return statearr_20355;
})();
if(cljs.core.truth_(inst_20291)){
var statearr_20356_20395 = state_20349__$1;
(statearr_20356_20395[(1)] = (5));

} else {
var statearr_20357_20396 = state_20349__$1;
(statearr_20357_20396[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (15))){
var state_20349__$1 = state_20349;
var statearr_20361_20397 = state_20349__$1;
(statearr_20361_20397[(2)] = null);

(statearr_20361_20397[(1)] = (16));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (21))){
var state_20349__$1 = state_20349;
var statearr_20362_20398 = state_20349__$1;
(statearr_20362_20398[(2)] = null);

(statearr_20362_20398[(1)] = (23));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (13))){
var inst_20302 = (state_20349[(8)]);
var inst_20303 = (state_20349[(9)]);
var inst_20301 = (state_20349[(11)]);
var inst_20304 = (state_20349[(12)]);
var inst_20311 = (state_20349[(2)]);
var inst_20312 = (inst_20304 + (1));
var tmp20358 = inst_20302;
var tmp20359 = inst_20303;
var tmp20360 = inst_20301;
var inst_20301__$1 = tmp20360;
var inst_20302__$1 = tmp20358;
var inst_20303__$1 = tmp20359;
var inst_20304__$1 = inst_20312;
var state_20349__$1 = (function (){var statearr_20363 = state_20349;
(statearr_20363[(8)] = inst_20302__$1);

(statearr_20363[(14)] = inst_20311);

(statearr_20363[(9)] = inst_20303__$1);

(statearr_20363[(11)] = inst_20301__$1);

(statearr_20363[(12)] = inst_20304__$1);

return statearr_20363;
})();
var statearr_20364_20399 = state_20349__$1;
(statearr_20364_20399[(2)] = null);

(statearr_20364_20399[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (22))){
var state_20349__$1 = state_20349;
var statearr_20365_20400 = state_20349__$1;
(statearr_20365_20400[(2)] = null);

(statearr_20365_20400[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (6))){
var inst_20290 = (state_20349[(13)]);
var inst_20299 = f.call(null,inst_20290);
var inst_20300 = cljs.core.seq.call(null,inst_20299);
var inst_20301 = inst_20300;
var inst_20302 = null;
var inst_20303 = (0);
var inst_20304 = (0);
var state_20349__$1 = (function (){var statearr_20366 = state_20349;
(statearr_20366[(8)] = inst_20302);

(statearr_20366[(9)] = inst_20303);

(statearr_20366[(11)] = inst_20301);

(statearr_20366[(12)] = inst_20304);

return statearr_20366;
})();
var statearr_20367_20401 = state_20349__$1;
(statearr_20367_20401[(2)] = null);

(statearr_20367_20401[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (17))){
var inst_20315 = (state_20349[(7)]);
var inst_20319 = cljs.core.chunk_first.call(null,inst_20315);
var inst_20320 = cljs.core.chunk_rest.call(null,inst_20315);
var inst_20321 = cljs.core.count.call(null,inst_20319);
var inst_20301 = inst_20320;
var inst_20302 = inst_20319;
var inst_20303 = inst_20321;
var inst_20304 = (0);
var state_20349__$1 = (function (){var statearr_20368 = state_20349;
(statearr_20368[(8)] = inst_20302);

(statearr_20368[(9)] = inst_20303);

(statearr_20368[(11)] = inst_20301);

(statearr_20368[(12)] = inst_20304);

return statearr_20368;
})();
var statearr_20369_20402 = state_20349__$1;
(statearr_20369_20402[(2)] = null);

(statearr_20369_20402[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (3))){
var inst_20347 = (state_20349[(2)]);
var state_20349__$1 = state_20349;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_20349__$1,inst_20347);
} else {
if((state_val_20350 === (12))){
var inst_20335 = (state_20349[(2)]);
var state_20349__$1 = state_20349;
var statearr_20370_20403 = state_20349__$1;
(statearr_20370_20403[(2)] = inst_20335);

(statearr_20370_20403[(1)] = (9));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (2))){
var state_20349__$1 = state_20349;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_20349__$1,(4),in$);
} else {
if((state_val_20350 === (23))){
var inst_20343 = (state_20349[(2)]);
var state_20349__$1 = state_20349;
var statearr_20371_20404 = state_20349__$1;
(statearr_20371_20404[(2)] = inst_20343);

(statearr_20371_20404[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (19))){
var inst_20330 = (state_20349[(2)]);
var state_20349__$1 = state_20349;
var statearr_20372_20405 = state_20349__$1;
(statearr_20372_20405[(2)] = inst_20330);

(statearr_20372_20405[(1)] = (16));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (11))){
var inst_20315 = (state_20349[(7)]);
var inst_20301 = (state_20349[(11)]);
var inst_20315__$1 = cljs.core.seq.call(null,inst_20301);
var state_20349__$1 = (function (){var statearr_20373 = state_20349;
(statearr_20373[(7)] = inst_20315__$1);

return statearr_20373;
})();
if(inst_20315__$1){
var statearr_20374_20406 = state_20349__$1;
(statearr_20374_20406[(1)] = (14));

} else {
var statearr_20375_20407 = state_20349__$1;
(statearr_20375_20407[(1)] = (15));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (9))){
var inst_20337 = (state_20349[(2)]);
var inst_20338 = cljs.core.async.impl.protocols.closed_QMARK_.call(null,out);
var state_20349__$1 = (function (){var statearr_20376 = state_20349;
(statearr_20376[(15)] = inst_20337);

return statearr_20376;
})();
if(cljs.core.truth_(inst_20338)){
var statearr_20377_20408 = state_20349__$1;
(statearr_20377_20408[(1)] = (21));

} else {
var statearr_20378_20409 = state_20349__$1;
(statearr_20378_20409[(1)] = (22));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (5))){
var inst_20293 = cljs.core.async.close_BANG_.call(null,out);
var state_20349__$1 = state_20349;
var statearr_20379_20410 = state_20349__$1;
(statearr_20379_20410[(2)] = inst_20293);

(statearr_20379_20410[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (14))){
var inst_20315 = (state_20349[(7)]);
var inst_20317 = cljs.core.chunked_seq_QMARK_.call(null,inst_20315);
var state_20349__$1 = state_20349;
if(inst_20317){
var statearr_20380_20411 = state_20349__$1;
(statearr_20380_20411[(1)] = (17));

} else {
var statearr_20381_20412 = state_20349__$1;
(statearr_20381_20412[(1)] = (18));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (16))){
var inst_20333 = (state_20349[(2)]);
var state_20349__$1 = state_20349;
var statearr_20382_20413 = state_20349__$1;
(statearr_20382_20413[(2)] = inst_20333);

(statearr_20382_20413[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20350 === (10))){
var inst_20302 = (state_20349[(8)]);
var inst_20304 = (state_20349[(12)]);
var inst_20309 = cljs.core._nth.call(null,inst_20302,inst_20304);
var state_20349__$1 = state_20349;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_20349__$1,(13),out,inst_20309);
} else {
if((state_val_20350 === (18))){
var inst_20315 = (state_20349[(7)]);
var inst_20324 = cljs.core.first.call(null,inst_20315);
var state_20349__$1 = state_20349;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_20349__$1,(20),out,inst_20324);
} else {
if((state_val_20350 === (8))){
var inst_20303 = (state_20349[(9)]);
var inst_20304 = (state_20349[(12)]);
var inst_20306 = (inst_20304 < inst_20303);
var inst_20307 = inst_20306;
var state_20349__$1 = state_20349;
if(cljs.core.truth_(inst_20307)){
var statearr_20383_20414 = state_20349__$1;
(statearr_20383_20414[(1)] = (10));

} else {
var statearr_20384_20415 = state_20349__$1;
(statearr_20384_20415[(1)] = (11));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto__))
;
return ((function (switch__17802__auto__,c__17914__auto__){
return (function() {
var cljs$core$async$mapcat_STAR__$_state_machine__17803__auto__ = null;
var cljs$core$async$mapcat_STAR__$_state_machine__17803__auto____0 = (function (){
var statearr_20388 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_20388[(0)] = cljs$core$async$mapcat_STAR__$_state_machine__17803__auto__);

(statearr_20388[(1)] = (1));

return statearr_20388;
});
var cljs$core$async$mapcat_STAR__$_state_machine__17803__auto____1 = (function (state_20349){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_20349);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e20389){if((e20389 instanceof Object)){
var ex__17806__auto__ = e20389;
var statearr_20390_20416 = state_20349;
(statearr_20390_20416[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_20349);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e20389;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__20417 = state_20349;
state_20349 = G__20417;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$mapcat_STAR__$_state_machine__17803__auto__ = function(state_20349){
switch(arguments.length){
case 0:
return cljs$core$async$mapcat_STAR__$_state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$mapcat_STAR__$_state_machine__17803__auto____1.call(this,state_20349);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$mapcat_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__17803__auto____0;
cljs$core$async$mapcat_STAR__$_state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__17803__auto____1;
return cljs$core$async$mapcat_STAR__$_state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto__))
})();
var state__17916__auto__ = (function (){var statearr_20391 = f__17915__auto__.call(null);
(statearr_20391[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto__);

return statearr_20391;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto__))
);

return c__17914__auto__;
});
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.mapcat_LT_ = (function cljs$core$async$mapcat_LT_(var_args){
var args20418 = [];
var len__7291__auto___20421 = arguments.length;
var i__7292__auto___20422 = (0);
while(true){
if((i__7292__auto___20422 < len__7291__auto___20421)){
args20418.push((arguments[i__7292__auto___20422]));

var G__20423 = (i__7292__auto___20422 + (1));
i__7292__auto___20422 = G__20423;
continue;
} else {
}
break;
}

var G__20420 = args20418.length;
switch (G__20420) {
case 2:
return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args20418.length)].join('')));

}
});

cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = (function (f,in$){
return cljs.core.async.mapcat_LT_.call(null,f,in$,null);
});

cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = (function (f,in$,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
cljs.core.async.mapcat_STAR_.call(null,f,in$,out);

return out;
});

cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3;
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.mapcat_GT_ = (function cljs$core$async$mapcat_GT_(var_args){
var args20425 = [];
var len__7291__auto___20428 = arguments.length;
var i__7292__auto___20429 = (0);
while(true){
if((i__7292__auto___20429 < len__7291__auto___20428)){
args20425.push((arguments[i__7292__auto___20429]));

var G__20430 = (i__7292__auto___20429 + (1));
i__7292__auto___20429 = G__20430;
continue;
} else {
}
break;
}

var G__20427 = args20425.length;
switch (G__20427) {
case 2:
return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args20425.length)].join('')));

}
});

cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = (function (f,out){
return cljs.core.async.mapcat_GT_.call(null,f,out,null);
});

cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = (function (f,out,buf_or_n){
var in$ = cljs.core.async.chan.call(null,buf_or_n);
cljs.core.async.mapcat_STAR_.call(null,f,in$,out);

return in$;
});

cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3;
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.unique = (function cljs$core$async$unique(var_args){
var args20432 = [];
var len__7291__auto___20483 = arguments.length;
var i__7292__auto___20484 = (0);
while(true){
if((i__7292__auto___20484 < len__7291__auto___20483)){
args20432.push((arguments[i__7292__auto___20484]));

var G__20485 = (i__7292__auto___20484 + (1));
i__7292__auto___20484 = G__20485;
continue;
} else {
}
break;
}

var G__20434 = args20432.length;
switch (G__20434) {
case 1:
return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args20432.length)].join('')));

}
});

cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = (function (ch){
return cljs.core.async.unique.call(null,ch,null);
});

cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = (function (ch,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__17914__auto___20487 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___20487,out){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___20487,out){
return (function (state_20458){
var state_val_20459 = (state_20458[(1)]);
if((state_val_20459 === (7))){
var inst_20453 = (state_20458[(2)]);
var state_20458__$1 = state_20458;
var statearr_20460_20488 = state_20458__$1;
(statearr_20460_20488[(2)] = inst_20453);

(statearr_20460_20488[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20459 === (1))){
var inst_20435 = null;
var state_20458__$1 = (function (){var statearr_20461 = state_20458;
(statearr_20461[(7)] = inst_20435);

return statearr_20461;
})();
var statearr_20462_20489 = state_20458__$1;
(statearr_20462_20489[(2)] = null);

(statearr_20462_20489[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20459 === (4))){
var inst_20438 = (state_20458[(8)]);
var inst_20438__$1 = (state_20458[(2)]);
var inst_20439 = (inst_20438__$1 == null);
var inst_20440 = cljs.core.not.call(null,inst_20439);
var state_20458__$1 = (function (){var statearr_20463 = state_20458;
(statearr_20463[(8)] = inst_20438__$1);

return statearr_20463;
})();
if(inst_20440){
var statearr_20464_20490 = state_20458__$1;
(statearr_20464_20490[(1)] = (5));

} else {
var statearr_20465_20491 = state_20458__$1;
(statearr_20465_20491[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20459 === (6))){
var state_20458__$1 = state_20458;
var statearr_20466_20492 = state_20458__$1;
(statearr_20466_20492[(2)] = null);

(statearr_20466_20492[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20459 === (3))){
var inst_20455 = (state_20458[(2)]);
var inst_20456 = cljs.core.async.close_BANG_.call(null,out);
var state_20458__$1 = (function (){var statearr_20467 = state_20458;
(statearr_20467[(9)] = inst_20455);

return statearr_20467;
})();
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_20458__$1,inst_20456);
} else {
if((state_val_20459 === (2))){
var state_20458__$1 = state_20458;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_20458__$1,(4),ch);
} else {
if((state_val_20459 === (11))){
var inst_20438 = (state_20458[(8)]);
var inst_20447 = (state_20458[(2)]);
var inst_20435 = inst_20438;
var state_20458__$1 = (function (){var statearr_20468 = state_20458;
(statearr_20468[(10)] = inst_20447);

(statearr_20468[(7)] = inst_20435);

return statearr_20468;
})();
var statearr_20469_20493 = state_20458__$1;
(statearr_20469_20493[(2)] = null);

(statearr_20469_20493[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20459 === (9))){
var inst_20438 = (state_20458[(8)]);
var state_20458__$1 = state_20458;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_20458__$1,(11),out,inst_20438);
} else {
if((state_val_20459 === (5))){
var inst_20438 = (state_20458[(8)]);
var inst_20435 = (state_20458[(7)]);
var inst_20442 = cljs.core._EQ_.call(null,inst_20438,inst_20435);
var state_20458__$1 = state_20458;
if(inst_20442){
var statearr_20471_20494 = state_20458__$1;
(statearr_20471_20494[(1)] = (8));

} else {
var statearr_20472_20495 = state_20458__$1;
(statearr_20472_20495[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20459 === (10))){
var inst_20450 = (state_20458[(2)]);
var state_20458__$1 = state_20458;
var statearr_20473_20496 = state_20458__$1;
(statearr_20473_20496[(2)] = inst_20450);

(statearr_20473_20496[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20459 === (8))){
var inst_20435 = (state_20458[(7)]);
var tmp20470 = inst_20435;
var inst_20435__$1 = tmp20470;
var state_20458__$1 = (function (){var statearr_20474 = state_20458;
(statearr_20474[(7)] = inst_20435__$1);

return statearr_20474;
})();
var statearr_20475_20497 = state_20458__$1;
(statearr_20475_20497[(2)] = null);

(statearr_20475_20497[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___20487,out))
;
return ((function (switch__17802__auto__,c__17914__auto___20487,out){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_20479 = [null,null,null,null,null,null,null,null,null,null,null];
(statearr_20479[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_20479[(1)] = (1));

return statearr_20479;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_20458){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_20458);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e20480){if((e20480 instanceof Object)){
var ex__17806__auto__ = e20480;
var statearr_20481_20498 = state_20458;
(statearr_20481_20498[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_20458);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e20480;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__20499 = state_20458;
state_20458 = G__20499;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_20458){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_20458);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___20487,out))
})();
var state__17916__auto__ = (function (){var statearr_20482 = f__17915__auto__.call(null);
(statearr_20482[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___20487);

return statearr_20482;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___20487,out))
);


return out;
});

cljs.core.async.unique.cljs$lang$maxFixedArity = 2;
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.partition = (function cljs$core$async$partition(var_args){
var args20500 = [];
var len__7291__auto___20570 = arguments.length;
var i__7292__auto___20571 = (0);
while(true){
if((i__7292__auto___20571 < len__7291__auto___20570)){
args20500.push((arguments[i__7292__auto___20571]));

var G__20572 = (i__7292__auto___20571 + (1));
i__7292__auto___20571 = G__20572;
continue;
} else {
}
break;
}

var G__20502 = args20500.length;
switch (G__20502) {
case 2:
return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args20500.length)].join('')));

}
});

cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = (function (n,ch){
return cljs.core.async.partition.call(null,n,ch,null);
});

cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = (function (n,ch,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__17914__auto___20574 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___20574,out){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___20574,out){
return (function (state_20540){
var state_val_20541 = (state_20540[(1)]);
if((state_val_20541 === (7))){
var inst_20536 = (state_20540[(2)]);
var state_20540__$1 = state_20540;
var statearr_20542_20575 = state_20540__$1;
(statearr_20542_20575[(2)] = inst_20536);

(statearr_20542_20575[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20541 === (1))){
var inst_20503 = (new Array(n));
var inst_20504 = inst_20503;
var inst_20505 = (0);
var state_20540__$1 = (function (){var statearr_20543 = state_20540;
(statearr_20543[(7)] = inst_20504);

(statearr_20543[(8)] = inst_20505);

return statearr_20543;
})();
var statearr_20544_20576 = state_20540__$1;
(statearr_20544_20576[(2)] = null);

(statearr_20544_20576[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20541 === (4))){
var inst_20508 = (state_20540[(9)]);
var inst_20508__$1 = (state_20540[(2)]);
var inst_20509 = (inst_20508__$1 == null);
var inst_20510 = cljs.core.not.call(null,inst_20509);
var state_20540__$1 = (function (){var statearr_20545 = state_20540;
(statearr_20545[(9)] = inst_20508__$1);

return statearr_20545;
})();
if(inst_20510){
var statearr_20546_20577 = state_20540__$1;
(statearr_20546_20577[(1)] = (5));

} else {
var statearr_20547_20578 = state_20540__$1;
(statearr_20547_20578[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20541 === (15))){
var inst_20530 = (state_20540[(2)]);
var state_20540__$1 = state_20540;
var statearr_20548_20579 = state_20540__$1;
(statearr_20548_20579[(2)] = inst_20530);

(statearr_20548_20579[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20541 === (13))){
var state_20540__$1 = state_20540;
var statearr_20549_20580 = state_20540__$1;
(statearr_20549_20580[(2)] = null);

(statearr_20549_20580[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20541 === (6))){
var inst_20505 = (state_20540[(8)]);
var inst_20526 = (inst_20505 > (0));
var state_20540__$1 = state_20540;
if(cljs.core.truth_(inst_20526)){
var statearr_20550_20581 = state_20540__$1;
(statearr_20550_20581[(1)] = (12));

} else {
var statearr_20551_20582 = state_20540__$1;
(statearr_20551_20582[(1)] = (13));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20541 === (3))){
var inst_20538 = (state_20540[(2)]);
var state_20540__$1 = state_20540;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_20540__$1,inst_20538);
} else {
if((state_val_20541 === (12))){
var inst_20504 = (state_20540[(7)]);
var inst_20528 = cljs.core.vec.call(null,inst_20504);
var state_20540__$1 = state_20540;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_20540__$1,(15),out,inst_20528);
} else {
if((state_val_20541 === (2))){
var state_20540__$1 = state_20540;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_20540__$1,(4),ch);
} else {
if((state_val_20541 === (11))){
var inst_20520 = (state_20540[(2)]);
var inst_20521 = (new Array(n));
var inst_20504 = inst_20521;
var inst_20505 = (0);
var state_20540__$1 = (function (){var statearr_20552 = state_20540;
(statearr_20552[(10)] = inst_20520);

(statearr_20552[(7)] = inst_20504);

(statearr_20552[(8)] = inst_20505);

return statearr_20552;
})();
var statearr_20553_20583 = state_20540__$1;
(statearr_20553_20583[(2)] = null);

(statearr_20553_20583[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20541 === (9))){
var inst_20504 = (state_20540[(7)]);
var inst_20518 = cljs.core.vec.call(null,inst_20504);
var state_20540__$1 = state_20540;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_20540__$1,(11),out,inst_20518);
} else {
if((state_val_20541 === (5))){
var inst_20513 = (state_20540[(11)]);
var inst_20504 = (state_20540[(7)]);
var inst_20505 = (state_20540[(8)]);
var inst_20508 = (state_20540[(9)]);
var inst_20512 = (inst_20504[inst_20505] = inst_20508);
var inst_20513__$1 = (inst_20505 + (1));
var inst_20514 = (inst_20513__$1 < n);
var state_20540__$1 = (function (){var statearr_20554 = state_20540;
(statearr_20554[(11)] = inst_20513__$1);

(statearr_20554[(12)] = inst_20512);

return statearr_20554;
})();
if(cljs.core.truth_(inst_20514)){
var statearr_20555_20584 = state_20540__$1;
(statearr_20555_20584[(1)] = (8));

} else {
var statearr_20556_20585 = state_20540__$1;
(statearr_20556_20585[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20541 === (14))){
var inst_20533 = (state_20540[(2)]);
var inst_20534 = cljs.core.async.close_BANG_.call(null,out);
var state_20540__$1 = (function (){var statearr_20558 = state_20540;
(statearr_20558[(13)] = inst_20533);

return statearr_20558;
})();
var statearr_20559_20586 = state_20540__$1;
(statearr_20559_20586[(2)] = inst_20534);

(statearr_20559_20586[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20541 === (10))){
var inst_20524 = (state_20540[(2)]);
var state_20540__$1 = state_20540;
var statearr_20560_20587 = state_20540__$1;
(statearr_20560_20587[(2)] = inst_20524);

(statearr_20560_20587[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20541 === (8))){
var inst_20513 = (state_20540[(11)]);
var inst_20504 = (state_20540[(7)]);
var tmp20557 = inst_20504;
var inst_20504__$1 = tmp20557;
var inst_20505 = inst_20513;
var state_20540__$1 = (function (){var statearr_20561 = state_20540;
(statearr_20561[(7)] = inst_20504__$1);

(statearr_20561[(8)] = inst_20505);

return statearr_20561;
})();
var statearr_20562_20588 = state_20540__$1;
(statearr_20562_20588[(2)] = null);

(statearr_20562_20588[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___20574,out))
;
return ((function (switch__17802__auto__,c__17914__auto___20574,out){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_20566 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_20566[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_20566[(1)] = (1));

return statearr_20566;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_20540){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_20540);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e20567){if((e20567 instanceof Object)){
var ex__17806__auto__ = e20567;
var statearr_20568_20589 = state_20540;
(statearr_20568_20589[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_20540);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e20567;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__20590 = state_20540;
state_20540 = G__20590;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_20540){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_20540);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___20574,out))
})();
var state__17916__auto__ = (function (){var statearr_20569 = f__17915__auto__.call(null);
(statearr_20569[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___20574);

return statearr_20569;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___20574,out))
);


return out;
});

cljs.core.async.partition.cljs$lang$maxFixedArity = 3;
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.partition_by = (function cljs$core$async$partition_by(var_args){
var args20591 = [];
var len__7291__auto___20665 = arguments.length;
var i__7292__auto___20666 = (0);
while(true){
if((i__7292__auto___20666 < len__7291__auto___20665)){
args20591.push((arguments[i__7292__auto___20666]));

var G__20667 = (i__7292__auto___20666 + (1));
i__7292__auto___20666 = G__20667;
continue;
} else {
}
break;
}

var G__20593 = args20591.length;
switch (G__20593) {
case 2:
return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error([cljs.core.str("Invalid arity: "),cljs.core.str(args20591.length)].join('')));

}
});

cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = (function (f,ch){
return cljs.core.async.partition_by.call(null,f,ch,null);
});

cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = (function (f,ch,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__17914__auto___20669 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (c__17914__auto___20669,out){
return (function (){
var f__17915__auto__ = (function (){var switch__17802__auto__ = ((function (c__17914__auto___20669,out){
return (function (state_20635){
var state_val_20636 = (state_20635[(1)]);
if((state_val_20636 === (7))){
var inst_20631 = (state_20635[(2)]);
var state_20635__$1 = state_20635;
var statearr_20637_20670 = state_20635__$1;
(statearr_20637_20670[(2)] = inst_20631);

(statearr_20637_20670[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20636 === (1))){
var inst_20594 = [];
var inst_20595 = inst_20594;
var inst_20596 = new cljs.core.Keyword("cljs.core.async","nothing","cljs.core.async/nothing",-69252123);
var state_20635__$1 = (function (){var statearr_20638 = state_20635;
(statearr_20638[(7)] = inst_20595);

(statearr_20638[(8)] = inst_20596);

return statearr_20638;
})();
var statearr_20639_20671 = state_20635__$1;
(statearr_20639_20671[(2)] = null);

(statearr_20639_20671[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20636 === (4))){
var inst_20599 = (state_20635[(9)]);
var inst_20599__$1 = (state_20635[(2)]);
var inst_20600 = (inst_20599__$1 == null);
var inst_20601 = cljs.core.not.call(null,inst_20600);
var state_20635__$1 = (function (){var statearr_20640 = state_20635;
(statearr_20640[(9)] = inst_20599__$1);

return statearr_20640;
})();
if(inst_20601){
var statearr_20641_20672 = state_20635__$1;
(statearr_20641_20672[(1)] = (5));

} else {
var statearr_20642_20673 = state_20635__$1;
(statearr_20642_20673[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20636 === (15))){
var inst_20625 = (state_20635[(2)]);
var state_20635__$1 = state_20635;
var statearr_20643_20674 = state_20635__$1;
(statearr_20643_20674[(2)] = inst_20625);

(statearr_20643_20674[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20636 === (13))){
var state_20635__$1 = state_20635;
var statearr_20644_20675 = state_20635__$1;
(statearr_20644_20675[(2)] = null);

(statearr_20644_20675[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20636 === (6))){
var inst_20595 = (state_20635[(7)]);
var inst_20620 = inst_20595.length;
var inst_20621 = (inst_20620 > (0));
var state_20635__$1 = state_20635;
if(cljs.core.truth_(inst_20621)){
var statearr_20645_20676 = state_20635__$1;
(statearr_20645_20676[(1)] = (12));

} else {
var statearr_20646_20677 = state_20635__$1;
(statearr_20646_20677[(1)] = (13));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20636 === (3))){
var inst_20633 = (state_20635[(2)]);
var state_20635__$1 = state_20635;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_20635__$1,inst_20633);
} else {
if((state_val_20636 === (12))){
var inst_20595 = (state_20635[(7)]);
var inst_20623 = cljs.core.vec.call(null,inst_20595);
var state_20635__$1 = state_20635;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_20635__$1,(15),out,inst_20623);
} else {
if((state_val_20636 === (2))){
var state_20635__$1 = state_20635;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_20635__$1,(4),ch);
} else {
if((state_val_20636 === (11))){
var inst_20599 = (state_20635[(9)]);
var inst_20603 = (state_20635[(10)]);
var inst_20613 = (state_20635[(2)]);
var inst_20614 = [];
var inst_20615 = inst_20614.push(inst_20599);
var inst_20595 = inst_20614;
var inst_20596 = inst_20603;
var state_20635__$1 = (function (){var statearr_20647 = state_20635;
(statearr_20647[(7)] = inst_20595);

(statearr_20647[(8)] = inst_20596);

(statearr_20647[(11)] = inst_20613);

(statearr_20647[(12)] = inst_20615);

return statearr_20647;
})();
var statearr_20648_20678 = state_20635__$1;
(statearr_20648_20678[(2)] = null);

(statearr_20648_20678[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20636 === (9))){
var inst_20595 = (state_20635[(7)]);
var inst_20611 = cljs.core.vec.call(null,inst_20595);
var state_20635__$1 = state_20635;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_20635__$1,(11),out,inst_20611);
} else {
if((state_val_20636 === (5))){
var inst_20599 = (state_20635[(9)]);
var inst_20603 = (state_20635[(10)]);
var inst_20596 = (state_20635[(8)]);
var inst_20603__$1 = f.call(null,inst_20599);
var inst_20604 = cljs.core._EQ_.call(null,inst_20603__$1,inst_20596);
var inst_20605 = cljs.core.keyword_identical_QMARK_.call(null,inst_20596,new cljs.core.Keyword("cljs.core.async","nothing","cljs.core.async/nothing",-69252123));
var inst_20606 = (inst_20604) || (inst_20605);
var state_20635__$1 = (function (){var statearr_20649 = state_20635;
(statearr_20649[(10)] = inst_20603__$1);

return statearr_20649;
})();
if(cljs.core.truth_(inst_20606)){
var statearr_20650_20679 = state_20635__$1;
(statearr_20650_20679[(1)] = (8));

} else {
var statearr_20651_20680 = state_20635__$1;
(statearr_20651_20680[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20636 === (14))){
var inst_20628 = (state_20635[(2)]);
var inst_20629 = cljs.core.async.close_BANG_.call(null,out);
var state_20635__$1 = (function (){var statearr_20653 = state_20635;
(statearr_20653[(13)] = inst_20628);

return statearr_20653;
})();
var statearr_20654_20681 = state_20635__$1;
(statearr_20654_20681[(2)] = inst_20629);

(statearr_20654_20681[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20636 === (10))){
var inst_20618 = (state_20635[(2)]);
var state_20635__$1 = state_20635;
var statearr_20655_20682 = state_20635__$1;
(statearr_20655_20682[(2)] = inst_20618);

(statearr_20655_20682[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_20636 === (8))){
var inst_20595 = (state_20635[(7)]);
var inst_20599 = (state_20635[(9)]);
var inst_20603 = (state_20635[(10)]);
var inst_20608 = inst_20595.push(inst_20599);
var tmp20652 = inst_20595;
var inst_20595__$1 = tmp20652;
var inst_20596 = inst_20603;
var state_20635__$1 = (function (){var statearr_20656 = state_20635;
(statearr_20656[(7)] = inst_20595__$1);

(statearr_20656[(8)] = inst_20596);

(statearr_20656[(14)] = inst_20608);

return statearr_20656;
})();
var statearr_20657_20683 = state_20635__$1;
(statearr_20657_20683[(2)] = null);

(statearr_20657_20683[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});})(c__17914__auto___20669,out))
;
return ((function (switch__17802__auto__,c__17914__auto___20669,out){
return (function() {
var cljs$core$async$state_machine__17803__auto__ = null;
var cljs$core$async$state_machine__17803__auto____0 = (function (){
var statearr_20661 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_20661[(0)] = cljs$core$async$state_machine__17803__auto__);

(statearr_20661[(1)] = (1));

return statearr_20661;
});
var cljs$core$async$state_machine__17803__auto____1 = (function (state_20635){
while(true){
var ret_value__17804__auto__ = (function (){try{while(true){
var result__17805__auto__ = switch__17802__auto__.call(null,state_20635);
if(cljs.core.keyword_identical_QMARK_.call(null,result__17805__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__17805__auto__;
}
break;
}
}catch (e20662){if((e20662 instanceof Object)){
var ex__17806__auto__ = e20662;
var statearr_20663_20684 = state_20635;
(statearr_20663_20684[(5)] = ex__17806__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_20635);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e20662;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__17804__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__20685 = state_20635;
state_20635 = G__20685;
continue;
} else {
return ret_value__17804__auto__;
}
break;
}
});
cljs$core$async$state_machine__17803__auto__ = function(state_20635){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__17803__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__17803__auto____1.call(this,state_20635);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__17803__auto____0;
cljs$core$async$state_machine__17803__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__17803__auto____1;
return cljs$core$async$state_machine__17803__auto__;
})()
;})(switch__17802__auto__,c__17914__auto___20669,out))
})();
var state__17916__auto__ = (function (){var statearr_20664 = f__17915__auto__.call(null);
(statearr_20664[cljs.core.async.impl.ioc_helpers.USER_START_IDX] = c__17914__auto___20669);

return statearr_20664;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__17916__auto__);
});})(c__17914__auto___20669,out))
);


return out;
});

cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3;

//# sourceMappingURL=async.js.map?rel=1475748721441