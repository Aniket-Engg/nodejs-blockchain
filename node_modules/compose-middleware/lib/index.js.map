{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";AAAA,IAAO,OAAO,WAAW,eAAe,CAAC,CAAA;AAYzC;IAAyB,kBAAsB;SAAtB,WAAsB,CAAtB,sBAAsB,CAAtB,IAAsB;QAAtB,iCAAsB;;IAC7C,IAAM,UAAU,GAAG,MAAM,eAAI,QAAQ,CAAC,CAAA;IAEtC,MAAM,CAAC,UAAU,GAAQ,EAAE,GAAQ,EAAE,IAAc;QACjD,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;IACzC,CAAC,CAAA;AACH,CAAC;AANe,eAAO,UAMtB,CAAA;AAKD;IAAwB,kBAAsB;SAAtB,WAAsB,CAAtB,sBAAsB,CAAtB,IAAsB;QAAtB,iCAAsB;;IAC5C,IAAM,KAAK,GAAG,OAAO,CAAa,QAAQ,CAAC,CAAA;IAE3C,GAAG,CAAC,CAAkB,UAAK,EAAL,eAAK,EAAL,mBAAK,EAAL,IAAK,CAAC;QAAvB,IAAM,OAAO,cAAA;QAChB,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC;YAClC,MAAM,IAAI,SAAS,CAAC,6BAA6B,CAAC,CAAA;QACpD,CAAC;KACF;IAED,MAAM,CAAC,oBAAqB,GAAQ,EAAE,GAAQ,EAAE,GAAQ,EAAE,IAAc;QACtE,IAAI,KAAK,GAAG,CAAC,CAAC,CAAA;QAEd,kBAAmB,GAAW,EAAE,GAAW;YACzC,EAAE,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC;gBACjB,MAAM,IAAI,SAAS,CAAC,gCAAgC,CAAC,CAAA;YACvD,CAAC;YAED,KAAK,GAAG,GAAG,CAAA;YAEX,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YAClB,CAAC;YAED,cAAe,GAAW;gBACxB,MAAM,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAA;YAC/B,CAAC;YAED,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;QAChD,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;IACzB,CAAC,CAAA;AACH,CAAC;AAhCe,cAAM,SAgCrB,CAAA;AAKD,gBAAiB,OAAgB,EAAE,GAAU,EAAE,GAAQ,EAAE,GAAQ,EAAE,IAAc;IAC/E,IAAI,CAAC;QACH,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,MAAM,CAAE,OAAwB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;YACvD,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAClB,CAAC;QAED,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACR,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAClB,CAAC;QAED,MAAM,CAAE,OAA0B,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;IACpD,CAAE;IAAA,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACb,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAClB,CAAC;AACH,CAAC","sourcesContent":["import flatten = require('array-flatten')\n\nexport type Callback = (err?: Error) => any\nexport type RequestHandler = (req?: any, res?: any, next?: Callback) => any\nexport type ErrorHandler = (err?: Error, req?: any, res?: any, next?: Callback) => any\nexport type Middleware = RequestHandler | ErrorHandler\n\nexport type Handler = Middleware | flatten.NestedArray<Middleware>\n\n/**\n * Compose an array of middleware handlers into a single handler.\n */\nexport function compose (...handlers: Handler[]): RequestHandler {\n  const middleware = errors(...handlers)\n\n  return function (req: any, res: any, done: Callback) {\n    return middleware(null, req, res, done)\n  }\n}\n\n/**\n * Wrap middleware handlers.\n */\nexport function errors (...handlers: Handler[]): ErrorHandler {\n  const stack = flatten<Middleware>(handlers)\n\n  for (const handler of stack) {\n    if (typeof handler !== 'function') {\n      throw new TypeError('Handlers must be a function')\n    }\n  }\n\n  return function middleware (err: any, req: any, res: any, done: Callback) {\n    let index = -1\n\n    function dispatch (pos: number, err?: Error): void {\n      if (pos <= index) {\n        throw new TypeError('`next()` called multiple times')\n      }\n\n      index = pos\n\n      if (index === stack.length) {\n        return done(err)\n      }\n\n      function next (err?: Error) {\n        return dispatch(pos + 1, err)\n      }\n\n      return handle(stack[pos], err, req, res, next)\n    }\n\n    return dispatch(0, err)\n  }\n}\n\n/**\n * Wrap middleware handling in a `try..catch` which forwards errors.\n */\nfunction handle (handler: Handler, err: Error, req: any, res: any, next: Callback) {\n  try {\n    if (handler.length === 4) {\n      if (err) {\n        return (handler as ErrorHandler)(err, req, res, next)\n      }\n\n      return next(err)\n    }\n\n    if (err) {\n      return next(err)\n    }\n\n    return (handler as RequestHandler)(req, res, next)\n  } catch (err) {\n    return next(err)\n  }\n}\n"]}