"use strict";
var flatten = require('array-flatten');
function compose() {
    var handlers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        handlers[_i - 0] = arguments[_i];
    }
    var middleware = errors.apply(void 0, handlers);
    return function (req, res, done) {
        return middleware(null, req, res, done);
    };
}
exports.compose = compose;
function errors() {
    var handlers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        handlers[_i - 0] = arguments[_i];
    }
    var stack = flatten(handlers);
    for (var _a = 0, stack_1 = stack; _a < stack_1.length; _a++) {
        var handler = stack_1[_a];
        if (typeof handler !== 'function') {
            throw new TypeError('Handlers must be a function');
        }
    }
    return function middleware(err, req, res, done) {
        var index = -1;
        function dispatch(pos, err) {
            if (pos <= index) {
                throw new TypeError('`next()` called multiple times');
            }
            index = pos;
            if (index === stack.length) {
                return done(err);
            }
            function next(err) {
                return dispatch(pos + 1, err);
            }
            return handle(stack[pos], err, req, res, next);
        }
        return dispatch(0, err);
    };
}
exports.errors = errors;
function handle(handler, err, req, res, next) {
    try {
        if (handler.length === 4) {
            if (err) {
                return handler(err, req, res, next);
            }
            return next(err);
        }
        if (err) {
            return next(err);
        }
        return handler(req, res, next);
    }
    catch (err) {
        return next(err);
    }
}
//# sourceMappingURL=index.js.map