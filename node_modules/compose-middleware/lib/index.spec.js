"use strict";
var index_1 = require('./index');
var chai_1 = require('chai');
describe('compose middleware', function () {
    it('should compose middleware', function (done) {
        var middleware = index_1.compose([
            function (req, res, next) {
                req.one = true;
                next();
            },
            function (req, res, next) {
                req.two = true;
                next();
            }
        ]);
        var req = {};
        var res = {};
        middleware(req, res, function (err) {
            chai_1.expect(err).to.not.exist;
            chai_1.expect(req.one).to.be.true;
            chai_1.expect(req.two).to.be.true;
            return done();
        });
    });
    it('should exit with an error', function (done) {
        var middleware = index_1.compose([
            function (req, res, next) {
                req.one = true;
                next(new Error('test'));
            },
            function (req, res, next) {
                req.two = true;
                next();
            }
        ]);
        var req = {};
        var res = {};
        middleware(req, res, function (err) {
            chai_1.expect(err).to.exist;
            chai_1.expect(req.one).to.be.true;
            chai_1.expect(req.two).to.not.exist;
            return done();
        });
    });
    it('should short-cut handler with a single function', function (done) {
        var middleware = index_1.compose([
            function (req, res, next) {
                req.one = true;
                next();
            }
        ]);
        var req = {};
        var res = {};
        middleware(req, res, function (err) {
            chai_1.expect(err).to.not.exist;
            chai_1.expect(req.one).to.be.true;
            return done();
        });
    });
    it('should accept a single function', function (done) {
        var middleware = index_1.compose(function (req, res, next) {
            req.one = true;
            next();
        });
        var req = {};
        middleware(req, {}, function (err) {
            chai_1.expect(err).to.not.exist;
            chai_1.expect(req.one).to.be.true;
            return done();
        });
    });
    it('should noop with no middleware', function (done) {
        var middleware = index_1.compose([]);
        middleware({}, {}, done);
    });
    it('should validate all handlers are functions', function () {
        chai_1.expect(function () { return index_1.compose(['foo']); }).to.throw(TypeError, 'Handlers must be a function');
    });
    it('should support error handlers', function (done) {
        var middleware = index_1.compose(function (req, res, next) {
            return next(new Error('test'));
        }, function (err, req, res, next) {
            return next();
        }, function (req, res, next) {
            req.success = true;
            return next();
        }, function (err, req, res, next) {
            req.fail = true;
            return next();
        });
        var req = {};
        middleware(req, {}, function (err) {
            chai_1.expect(req.fail).to.not.exist;
            chai_1.expect(req.success).to.be.true;
            return done(err);
        });
    });
    it('should error when calling `next()` multiple times', function (done) {
        var middleware = index_1.compose(function (req, res, next) {
            next();
            try {
                next();
            }
            catch (err) {
                return done();
            }
        });
        middleware({}, {}, function () { });
    });
    it('should forward thrown errors', function (done) {
        var middleware = index_1.compose(function (req, res, next) {
            throw new Error('Boom!');
        });
        middleware({}, {}, function (err) {
            chai_1.expect(err).to.exist;
            chai_1.expect(err.message).to.equal('Boom!');
            return done();
        });
    });
});
//# sourceMappingURL=index.spec.js.map